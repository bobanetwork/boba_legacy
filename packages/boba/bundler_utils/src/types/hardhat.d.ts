/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseWallet__factory>;
    getContractFactory(
      name: "IAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregator__factory>;
    getContractFactory(
      name: "IEntryPoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntryPoint__factory>;
    getContractFactory(
      name: "IStakeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakeManager__factory>;
    getContractFactory(
      name: "IWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWallet__factory>;
    getContractFactory(
      name: "SimpleWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleWallet__factory>;
    getContractFactory(
      name: "SampleRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SampleRecipient__factory>;
    getContractFactory(
      name: "SingletonFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingletonFactory__factory>;

    getContractAt(
      name: "BaseWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseWallet>;
    getContractAt(
      name: "IAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregator>;
    getContractAt(
      name: "IEntryPoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntryPoint>;
    getContractAt(
      name: "IStakeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakeManager>;
    getContractAt(
      name: "IWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWallet>;
    getContractAt(
      name: "SimpleWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleWallet>;
    getContractAt(
      name: "SampleRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SampleRecipient>;
    getContractAt(
      name: "SingletonFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SingletonFactory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
