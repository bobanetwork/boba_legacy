{"id":"fbc1c92fb2a258862280859a54359423","_format":"hh-sol-build-info-1","solcVersion":"0.8.15","solcLongVersion":"0.8.15+commit.e14f2714","input":{"language":"Solidity","sources":{"contracts/bundler/EntryPointWrapper.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n\nimport \"../interfaces/IEntryPoint.sol\";\n\ncontract EntryPointWrapper {\n    /**\n     * gas and return values during simulation\n     * @param preOpGas the gas used for validation (including preValidationGas)\n     * @param prefund the required prefund for this operation\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        bool sigFailed;\n        uint48 validAfter;\n        uint48 validUntil;\n        bytes paymasterContext;\n    }\n\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    /**\n     * returned aggregated signature info.\n     * the aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address aggregator;\n        StakeInfo stakeInfo;\n    }\n\n    struct FailedOpStatus {\n        bool status;\n        uint256 opIndex;\n        string reason;\n    }\n\n    struct Response {\n        string selectorType;\n        ReturnInfo returnInfo;\n        StakeInfo senderInfo;\n        StakeInfo factoryInfo;\n        StakeInfo paymasterInfo;\n        AggregatorStakeInfo aggregatorInfo;\n    }\n\n\n     /**\n     * a custom revert error of handleOps, to identify the offending op.\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n     *  @param reason - revert reason\n     *      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *      so a failure can be attributed to the correct entity.\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * Successful result from simulateValidation.\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     */\n    error ValidationResult(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\n\n    /**\n     * Successful result from simulateValidation, if the account returns a signature aggregator\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\n     */\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\n        AggregatorStakeInfo aggregatorInfo);\n\n    /**\n     * return value of getSenderAddress\n     */\n    error SenderAddressResult(address sender);\n\n    IEntryPoint public entryPoint;\n\n    StakeInfo private emptyStakeInfo = StakeInfo(0, 0);\n    AggregatorStakeInfo private emptyAggregatorInfo = AggregatorStakeInfo(address(0), emptyStakeInfo);\n    ReturnInfo private emptyReturnInfo = ReturnInfo(0, 0, false, 0, 0, new bytes(0));\n    Response private emptyResponse = Response(\"\", emptyReturnInfo, emptyStakeInfo, emptyStakeInfo, emptyStakeInfo, emptyAggregatorInfo);\n    FailedOpStatus private emptyFailedOp = FailedOpStatus(false, 0, \"\");\n\n    constructor(IEntryPoint _entryPoint) {\n        entryPoint = _entryPoint;\n    }\n\n    function simulateValidation(UserOperation calldata userOp) external returns (FailedOpStatus memory, Response memory) {\n        try entryPoint.simulateValidation(userOp) {}\n        catch (bytes memory revertData) {\n            bytes4 receivedSelector = bytes4(revertData);\n\n            if (receivedSelector == ValidationResult.selector) {\n                (ReturnInfo memory returnInfo, StakeInfo memory senderInfo, StakeInfo memory factoryInfo, StakeInfo memory paymasterInfo) = abi.decode(slice(revertData, 4, revertData.length - 4), (ReturnInfo, StakeInfo, StakeInfo, StakeInfo));\n                return (emptyFailedOp, Response('ValidationResult', returnInfo, senderInfo, factoryInfo, paymasterInfo, emptyAggregatorInfo));\n            } else if (receivedSelector == ValidationResultWithAggregation.selector) {\n                (ReturnInfo memory returnInfo, StakeInfo memory senderInfo, StakeInfo memory factoryInfo, StakeInfo memory paymasterInfo, AggregatorStakeInfo memory aggregatorInfo) = abi.decode(slice(revertData, 4, revertData.length - 4), (ReturnInfo, StakeInfo, StakeInfo, StakeInfo, AggregatorStakeInfo));\n                return (emptyFailedOp, Response('ValidationResultWithAggregation', returnInfo, senderInfo, factoryInfo, paymasterInfo, aggregatorInfo));\n            } else if (receivedSelector == FailedOp.selector){\n                (uint256 opIndex, string memory reason) = abi.decode(slice(revertData, 4, revertData.length - 4), (uint256, string));\n                return (FailedOpStatus(true, opIndex, reason), emptyResponse);\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function getUserOpHashes(IEntryPoint entryPoint, UserOperation[] memory userOps) public view returns (bytes32[] memory ret) {\n        ret = new bytes32[](userOps.length);\n        for (uint i = 0; i < userOps.length; i++) {\n            ret[i] = entryPoint.getUserOpHash(userOps[i]);\n        }\n        return ret;\n    }\n\n    function getCodeHashes(address[] memory addresses) public view returns (bytes32) {\n        bytes32[] memory hashes = new bytes32[](addresses.length);\n        for (uint i = 0; i < addresses.length; i++) {\n            hashes[i] = addresses[i].codehash;\n        }\n        bytes memory data = abi.encode(hashes);\n        return (keccak256(data));\n    }\n\n    function getSenderAddress(bytes calldata initCode) external returns (address) {\n        try entryPoint.getSenderAddress(initCode) {}\n        catch (bytes memory revertData) {\n            bytes4 receivedSelector = bytes4(revertData);\n\n            if (receivedSelector == SenderAddressResult.selector) {\n                address sender = abi.decode(slice(revertData, 4, revertData.length - 4), (address));\n                return sender;\n            } else {\n                revert (\"Invalid initCode\");\n            }\n        }\n    }\n}\n"},"contracts/core/Helpers.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\n/**\n * returned data from validateUserOp.\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\n * @param aggregator - address(0) - the account validated the signature by itself.\n *              address(1) - the account failed to validate the signature.\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\n * @param validAfter - this UserOp is valid only after this timestamp.\n * @param validaUntil - this UserOp is valid only up to this timestamp.\n */\n    struct ValidationData {\n        address aggregator;\n        uint48 validAfter;\n        uint48 validUntil;\n    }\n\n//extract sigFailed, validAfter, validUntil.\n// also convert zero validUntil to type(uint48).max\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\n        address aggregator = address(uint160(validationData));\n        uint48 validUntil = uint48(validationData >> 160);\n        if (validUntil == 0) {\n            validUntil = type(uint48).max;\n        }\n        uint48 validAfter = uint48(validationData >> (48 + 160));\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n// intersect account and paymaster ranges.\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\n        address aggregator = accountValidationData.aggregator;\n        if (aggregator == address(0)) {\n            aggregator = pmValidationData.aggregator;\n        }\n        uint48 validAfter = accountValidationData.validAfter;\n        uint48 validUntil = accountValidationData.validUntil;\n        uint48 pmValidAfter = pmValidationData.validAfter;\n        uint48 pmValidUntil = pmValidationData.validUntil;\n\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n/**\n * helper to pack the return value for validateUserOp\n * @param data - the ValidationData to pack\n */\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\n    }\n\n/**\n * helper to pack the return value for validateUserOp, when not using an aggregator\n * @param sigFailed - true for signature failure, false for success\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n * @param validAfter first timestamp this UserOperation is valid\n */\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\n    }\n\n/**\n * keccak function over calldata.\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\n */\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\n        assembly {\n            let mem := mload(0x40)\n            let len := data.length\n            calldatacopy(mem, data.offset, len)\n            ret := keccak256(mem, len)\n        }\n    }\n"},"contracts/interfaces/IAggregator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\n/**\n * Aggregated Signatures validator.\n */\ninterface IAggregator {\n\n    /**\n     * validate aggregated signature.\n     * revert if the aggregated signature does not match the given list of operations.\n     */\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\n\n    /**\n     * validate signature of a single userOp\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n     * @param userOp the userOperation received from the user.\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n     *    (usually empty, unless account and aggregator support some kind of \"multisig\"\n     */\n    function validateUserOpSignature(UserOperation calldata userOp)\n    external view returns (bytes memory sigForUserOp);\n\n    /**\n     * aggregate multiple signatures into a single value.\n     * This method is called off-chain to calculate the signature to pass with handleOps()\n     * bundler MAY use optimized custom code perform this aggregation\n     * @param userOps array of UserOperations to collect the signatures from.\n     * @return aggregatedSignature the aggregated signature\n     */\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\n}\n"},"contracts/interfaces/IEntryPoint.sol":{"content":"/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./UserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\nimport \"./INonceManager.sol\";\n\ninterface IEntryPoint is IStakeManager, INonceManager {\n\n    /***\n     * An event emitted after each successful request\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\n     * @param sender - the account that generates this request.\n     * @param paymaster - if non-null, the paymaster that pays for this request.\n     * @param nonce - the nonce value from the request.\n     * @param success - true if the sender transaction succeeded, false if reverted.\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\n     */\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\n\n    /**\n     * account \"sender\" was deployed.\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender the account that is deployed\n     * @param factory the factory used to deploy this account (in the initCode)\n     * @param paymaster the paymaster used by this UserOp\n     */\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length\n     * @param userOpHash the request unique identifier.\n     * @param sender the sender of this request\n     * @param nonce the nonce used in the request\n     * @param revertReason - the return bytes from the (reverted) call to \"callData\".\n     */\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\n\n    /**\n     * an event emitted by handleOps(), before starting the execution loop.\n     * any event emitted before this event, is part of the validation.\n     */\n    event BeforeExecution();\n\n    /**\n     * signature aggregator used by the following UserOperationEvents within this bundle.\n     */\n    event SignatureAggregatorChanged(address indexed aggregator);\n\n    /**\n     * a custom revert error of handleOps, to identify the offending op.\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n     *  @param reason - revert reason\n     *      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *      so a failure can be attributed to the correct entity.\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    /**\n     * Successful result from simulateValidation.\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     */\n    error ValidationResult(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\n\n    /**\n     * Successful result from simulateValidation, if the account returns a signature aggregator\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\n     */\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\n        AggregatorStakeInfo aggregatorInfo);\n\n    /**\n     * return value of getSenderAddress\n     */\n    error SenderAddressResult(address sender);\n\n    /**\n     * return value of simulateHandleOp\n     */\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\n\n    //UserOps handled, per aggregator\n    struct UserOpsPerAggregator {\n        UserOperation[] userOps;\n\n        // aggregator address\n        IAggregator aggregator;\n        // aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperation.\n     * no signature aggregator is used.\n     * if any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops the operations to execute\n     * @param beneficiary the address to receive the fees\n     */\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n     * @param beneficiary the address to receive the fees\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * generate a request Id - unique identifier for this request.\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     */\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\n\n    /**\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n     * @param userOp the user operation to validate.\n     */\n    function simulateValidation(UserOperation calldata userOp) external;\n\n    /**\n     * gas and return values during simulation\n     * @param preOpGas the gas used for validation (including preValidationGas)\n     * @param prefund the required prefund for this operation\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        bool sigFailed;\n        uint48 validAfter;\n        uint48 validUntil;\n        bytes paymasterContext;\n    }\n\n    /**\n     * returned aggregated signature info.\n     * the aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address aggregator;\n        StakeInfo stakeInfo;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * this method always revert, and returns the address in SenderAddressResult error\n     * @param initCode the constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n\n    /**\n     * simulate full execution of a UserOperation (including both validation and target execution)\n     * this method will always revert with \"ExecutionResult\".\n     * it performs full validation of the UserOperation, but ignores signature error.\n     * an optional target address is called after the userop succeeds, and its value is returned\n     * (before the entire call is reverted)\n     * Note that in order to collect the the success/failure of the target call, it must be executed\n     * with trace enabled to track the emitted events.\n     * @param op the UserOperation to simulate\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\n     *        are set to the return from that call.\n     * @param targetCallData callData to pass to target address\n     */\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\n}\n\n"},"contracts/interfaces/INonceManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\ninterface INonceManager {\n\n    /**\n     * Return the next nonce for this sender.\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n     * But UserOp with different keys can come with arbitrary order.\n     *\n     * @param sender the account address\n     * @param key the high 192 bit of the nonce\n     * @return nonce a full nonce to pass for next UserOp with this sender.\n     */\n    function getNonce(address sender, uint192 key)\n    external view returns (uint256 nonce);\n\n    /**\n     * Manually increment the nonce of the sender.\n     * This method is exposed just for completeness..\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\n     * as the EntryPoint will update the nonce regardless.\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n     * UserOperations will not pay extra for the first transaction with a given key.\n     */\n    function incrementNonce(uint192 key) external;\n}\n"},"contracts/interfaces/IStakeManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.12;\n\n/**\n * manage deposits and stakes.\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n * stake is value locked for at least \"unstakeDelay\" by the staked entity.\n */\ninterface IStakeManager {\n\n    event Deposited(\n        address indexed account,\n        uint256 totalDeposit\n    );\n\n    event Withdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /// Emitted when stake or unstake delay are modified\n    event StakeLocked(\n        address indexed account,\n        uint256 totalStaked,\n        uint256 unstakeDelaySec\n    );\n\n    /// Emitted once a stake is scheduled for withdrawal\n    event StakeUnlocked(\n        address indexed account,\n        uint256 withdrawTime\n    );\n\n    event StakeWithdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /**\n     * @param deposit the entity's deposit\n     * @param staked true if this entity is staked.\n     * @param stake actual amount of ether staked for this entity.\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\n     *    and the rest fit into a 2nd cell.\n     *    112 bit allows for 10^15 eth\n     *    48 bit for full timestamp\n     *    32 bit allows 150 years for unstake delay\n     */\n    struct DepositInfo {\n        uint112 deposit;\n        bool staked;\n        uint112 stake;\n        uint32 unstakeDelaySec;\n        uint48 withdrawTime;\n    }\n\n    //API struct used by getStakeInfo and simulateValidation\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    /// @return info - full deposit information of given account\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\n\n    /// @return the deposit (for gas payment) of the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * add to the deposit of the given account\n     */\n    function depositTo(address account) external payable;\n\n    /**\n     * add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 _unstakeDelaySec) external payable;\n\n    /**\n     * attempt to unlock the stake.\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external;\n\n    /**\n     * withdraw from the (unlocked) stake.\n     * must first call unlockStake and wait for the unstakeDelay to pass\n     * @param withdrawAddress the address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external;\n\n    /**\n     * withdraw from the deposit.\n     * @param withdrawAddress the address to send withdrawn value.\n     * @param withdrawAmount the amount to withdraw.\n     */\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\n}\n"},"contracts/interfaces/UserOperation.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\nimport {calldataKeccak} from \"../core/Helpers.sol\";\n\n    /**\n     * User Operation struct\n     * @param sender the sender account of this request.\n     * @param nonce unique value the sender uses to verify it is not a replay.\n     * @param initCode if set, the account contract will be created by this constructor/\n     * @param callData the method call to execute on this account.\n     * @param callGasLimit the gas limit passed to the callData method call.\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n     */\n    struct UserOperation {\n\n        address sender;\n        uint256 nonce;\n        bytes initCode;\n        bytes callData;\n        uint256 callGasLimit;\n        uint256 verificationGasLimit;\n        uint256 preVerificationGas;\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n        bytes paymasterAndData;\n        bytes signature;\n    }\n\n/**\n * Utility functions helpful when working with UserOperation structs.\n */\nlibrary UserOperationLib {\n\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\n        address data;\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\n        assembly {data := calldataload(userOp)}\n        return address(uint160(data));\n    }\n\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\n    // pay above what he signed for.\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\n    unchecked {\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        if (maxFeePerGas == maxPriorityFeePerGas) {\n            //legacy mode (for networks that don't support basefee opcode)\n            return maxFeePerGas;\n        }\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n    }\n    }\n\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\n        address sender = getSender(userOp);\n        uint256 nonce = userOp.nonce;\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\n        uint256 callGasLimit = userOp.callGasLimit;\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\n        uint256 preVerificationGas = userOp.preVerificationGas;\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\n\n        return abi.encode(\n            sender, nonce,\n            hashInitCode, hashCallData,\n            callGasLimit, verificationGasLimit, preVerificationGas,\n            maxFeePerGas, maxPriorityFeePerGas,\n            hashPaymasterAndData\n        );\n    }\n\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\n        return keccak256(pack(userOp));\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":10000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2519","formattedMessage":"Warning: This declaration shadows an existing declaration.\n   --> contracts/bundler/EntryPointWrapper.sol:197:30:\n    |\n197 |     function getUserOpHashes(IEntryPoint entryPoint, UserOperation[] memory userOps) public view returns (bytes32[] memory ret) {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^\nNote: The shadowed declaration is here:\n  --> contracts/bundler/EntryPointWrapper.sol:98:5:\n   |\n98 |     IEntryPoint public entryPoint;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":3816,"file":"contracts/bundler/EntryPointWrapper.sol","message":"The shadowed declaration is here:","start":3787}],"severity":"warning","sourceLocation":{"end":8804,"file":"contracts/bundler/EntryPointWrapper.sol","start":8782},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/bundler/EntryPointWrapper.sol:110:82:\n    |\n110 |     function simulateValidation(UserOperation calldata userOp) external returns (FailedOpStatus memory, Response memory) {\n    |                                                                                  ^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":4461,"file":"contracts/bundler/EntryPointWrapper.sol","start":4440},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/bundler/EntryPointWrapper.sol:110:105:\n    |\n110 |     function simulateValidation(UserOperation calldata userOp) external returns (FailedOpStatus memory, Response memory) {\n    |                                                                                                         ^^^^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":4478,"file":"contracts/bundler/EntryPointWrapper.sol","start":4463},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n   --> contracts/bundler/EntryPointWrapper.sol:214:74:\n    |\n214 |     function getSenderAddress(bytes calldata initCode) external returns (address) {\n    |                                                                          ^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":9510,"file":"contracts/bundler/EntryPointWrapper.sol","start":9503},"type":"Warning"}],"sources":{"contracts/bundler/EntryPointWrapper.sol":{"ast":{"absolutePath":"contracts/bundler/EntryPointWrapper.sol","exportedSymbols":{"EntryPointWrapper":[522],"IAggregator":[794],"IEntryPoint":[998],"INonceManager":[1017],"IStakeManager":[1122],"UserOperation":[1149],"UserOperationLib":[1319],"calldataKeccak":[760]},"id":523,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:0"},{"absolutePath":"contracts/interfaces/IEntryPoint.sol","file":"../interfaces/IEntryPoint.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":523,"sourceUnit":999,"src":"148:39:0","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"EntryPointWrapper","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":522,"linearizedBaseContracts":[522],"name":"EntryPointWrapper","nameLocation":"198:17:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EntryPointWrapper.ReturnInfo","id":15,"members":[{"constant":false,"id":4,"mutability":"mutable","name":"preOpGas","nameLocation":"851:8:0","nodeType":"VariableDeclaration","scope":15,"src":"843:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"prefund","nameLocation":"877:7:0","nodeType":"VariableDeclaration","scope":15,"src":"869:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5,"name":"uint256","nodeType":"ElementaryTypeName","src":"869:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8,"mutability":"mutable","name":"sigFailed","nameLocation":"899:9:0","nodeType":"VariableDeclaration","scope":15,"src":"894:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7,"name":"bool","nodeType":"ElementaryTypeName","src":"894:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":10,"mutability":"mutable","name":"validAfter","nameLocation":"925:10:0","nodeType":"VariableDeclaration","scope":15,"src":"918:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":9,"name":"uint48","nodeType":"ElementaryTypeName","src":"918:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":12,"mutability":"mutable","name":"validUntil","nameLocation":"952:10:0","nodeType":"VariableDeclaration","scope":15,"src":"945:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":11,"name":"uint48","nodeType":"ElementaryTypeName","src":"945:6:0","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":14,"mutability":"mutable","name":"paymasterContext","nameLocation":"978:16:0","nodeType":"VariableDeclaration","scope":15,"src":"972:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":13,"name":"bytes","nodeType":"ElementaryTypeName","src":"972:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"ReturnInfo","nameLocation":"822:10:0","nodeType":"StructDefinition","scope":522,"src":"815:186:0","visibility":"public"},{"canonicalName":"EntryPointWrapper.StakeInfo","id":20,"members":[{"constant":false,"id":17,"mutability":"mutable","name":"stake","nameLocation":"1042:5:0","nodeType":"VariableDeclaration","scope":20,"src":"1034:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":16,"name":"uint256","nodeType":"ElementaryTypeName","src":"1034:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":19,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"1065:15:0","nodeType":"VariableDeclaration","scope":20,"src":"1057:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":18,"name":"uint256","nodeType":"ElementaryTypeName","src":"1057:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StakeInfo","nameLocation":"1014:9:0","nodeType":"StructDefinition","scope":522,"src":"1007:80:0","visibility":"public"},{"canonicalName":"EntryPointWrapper.AggregatorStakeInfo","id":26,"members":[{"constant":false,"id":22,"mutability":"mutable","name":"aggregator","nameLocation":"1267:10:0","nodeType":"VariableDeclaration","scope":26,"src":"1259:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":21,"name":"address","nodeType":"ElementaryTypeName","src":"1259:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":25,"mutability":"mutable","name":"stakeInfo","nameLocation":"1297:9:0","nodeType":"VariableDeclaration","scope":26,"src":"1287:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":24,"nodeType":"UserDefinedTypeName","pathNode":{"id":23,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"1287:9:0"},"referencedDeclaration":20,"src":"1287:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"}],"name":"AggregatorStakeInfo","nameLocation":"1229:19:0","nodeType":"StructDefinition","scope":522,"src":"1222:91:0","visibility":"public"},{"canonicalName":"EntryPointWrapper.FailedOpStatus","id":33,"members":[{"constant":false,"id":28,"mutability":"mutable","name":"status","nameLocation":"1356:6:0","nodeType":"VariableDeclaration","scope":33,"src":"1351:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":27,"name":"bool","nodeType":"ElementaryTypeName","src":"1351:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":30,"mutability":"mutable","name":"opIndex","nameLocation":"1380:7:0","nodeType":"VariableDeclaration","scope":33,"src":"1372:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":29,"name":"uint256","nodeType":"ElementaryTypeName","src":"1372:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":32,"mutability":"mutable","name":"reason","nameLocation":"1404:6:0","nodeType":"VariableDeclaration","scope":33,"src":"1397:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":31,"name":"string","nodeType":"ElementaryTypeName","src":"1397:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"FailedOpStatus","nameLocation":"1326:14:0","nodeType":"StructDefinition","scope":522,"src":"1319:98:0","visibility":"public"},{"canonicalName":"EntryPointWrapper.Response","id":51,"members":[{"constant":false,"id":35,"mutability":"mutable","name":"selectorType","nameLocation":"1456:12:0","nodeType":"VariableDeclaration","scope":51,"src":"1449:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":34,"name":"string","nodeType":"ElementaryTypeName","src":"1449:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"returnInfo","nameLocation":"1489:10:0","nodeType":"VariableDeclaration","scope":51,"src":"1478:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"},"typeName":{"id":37,"nodeType":"UserDefinedTypeName","pathNode":{"id":36,"name":"ReturnInfo","nodeType":"IdentifierPath","referencedDeclaration":15,"src":"1478:10:0"},"referencedDeclaration":15,"src":"1478:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":41,"mutability":"mutable","name":"senderInfo","nameLocation":"1519:10:0","nodeType":"VariableDeclaration","scope":51,"src":"1509:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":40,"nodeType":"UserDefinedTypeName","pathNode":{"id":39,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"1509:9:0"},"referencedDeclaration":20,"src":"1509:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"factoryInfo","nameLocation":"1549:11:0","nodeType":"VariableDeclaration","scope":51,"src":"1539:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":43,"nodeType":"UserDefinedTypeName","pathNode":{"id":42,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"1539:9:0"},"referencedDeclaration":20,"src":"1539:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":47,"mutability":"mutable","name":"paymasterInfo","nameLocation":"1580:13:0","nodeType":"VariableDeclaration","scope":51,"src":"1570:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":46,"nodeType":"UserDefinedTypeName","pathNode":{"id":45,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"1570:9:0"},"referencedDeclaration":20,"src":"1570:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":50,"mutability":"mutable","name":"aggregatorInfo","nameLocation":"1623:14:0","nodeType":"VariableDeclaration","scope":51,"src":"1603:34:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo"},"typeName":{"id":49,"nodeType":"UserDefinedTypeName","pathNode":{"id":48,"name":"AggregatorStakeInfo","nodeType":"IdentifierPath","referencedDeclaration":26,"src":"1603:19:0"},"referencedDeclaration":26,"src":"1603:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo"}},"visibility":"internal"}],"name":"Response","nameLocation":"1430:8:0","nodeType":"StructDefinition","scope":522,"src":"1423:221:0","visibility":"public"},{"documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"1652:756:0","text":" a custom revert error of handleOps, to identify the offending op.\n  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n  @param reason - revert reason\n      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n      so a failure can be attributed to the correct entity.\n   Should be caught in off-chain handleOps simulation and not happen on-chain.\n   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."},"errorSelector":"220266b6","id":58,"name":"FailedOp","nameLocation":"2419:8:0","nodeType":"ErrorDefinition","parameters":{"id":57,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"opIndex","nameLocation":"2436:7:0","nodeType":"VariableDeclaration","scope":58,"src":"2428:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":53,"name":"uint256","nodeType":"ElementaryTypeName","src":"2428:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":56,"mutability":"mutable","name":"reason","nameLocation":"2452:6:0","nodeType":"VariableDeclaration","scope":58,"src":"2445:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":55,"name":"string","nodeType":"ElementaryTypeName","src":"2445:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2427:32:0"},"src":"2413:47:0"},{"documentation":{"id":59,"nodeType":"StructuredDocumentation","src":"2466:327:0","text":" Successful result from simulateValidation.\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)"},"errorSelector":"e0cff05f","id":73,"name":"ValidationResult","nameLocation":"2804:16:0","nodeType":"ErrorDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"returnInfo","nameLocation":"2832:10:0","nodeType":"VariableDeclaration","scope":73,"src":"2821:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_memory_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"},"typeName":{"id":61,"nodeType":"UserDefinedTypeName","pathNode":{"id":60,"name":"ReturnInfo","nodeType":"IdentifierPath","referencedDeclaration":15,"src":"2821:10:0"},"referencedDeclaration":15,"src":"2821:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"senderInfo","nameLocation":"2862:10:0","nodeType":"VariableDeclaration","scope":73,"src":"2852:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":64,"nodeType":"UserDefinedTypeName","pathNode":{"id":63,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"2852:9:0"},"referencedDeclaration":20,"src":"2852:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":68,"mutability":"mutable","name":"factoryInfo","nameLocation":"2884:11:0","nodeType":"VariableDeclaration","scope":73,"src":"2874:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":67,"nodeType":"UserDefinedTypeName","pathNode":{"id":66,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"2874:9:0"},"referencedDeclaration":20,"src":"2874:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":71,"mutability":"mutable","name":"paymasterInfo","nameLocation":"2907:13:0","nodeType":"VariableDeclaration","scope":73,"src":"2897:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":70,"nodeType":"UserDefinedTypeName","pathNode":{"id":69,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"2897:9:0"},"referencedDeclaration":20,"src":"2897:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"}],"src":"2820:101:0"},"src":"2798:124:0"},{"documentation":{"id":74,"nodeType":"StructuredDocumentation","src":"2928:561:0","text":" Successful result from simulateValidation, if the account returns a signature aggregator\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)\n @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n      bundler MUST use it to verify the signature, or reject the UserOperation"},"errorSelector":"faecb4e4","id":91,"name":"ValidationResultWithAggregation","nameLocation":"3500:31:0","nodeType":"ErrorDefinition","parameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"returnInfo","nameLocation":"3543:10:0","nodeType":"VariableDeclaration","scope":91,"src":"3532:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_memory_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"},"typeName":{"id":76,"nodeType":"UserDefinedTypeName","pathNode":{"id":75,"name":"ReturnInfo","nodeType":"IdentifierPath","referencedDeclaration":15,"src":"3532:10:0"},"referencedDeclaration":15,"src":"3532:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"senderInfo","nameLocation":"3573:10:0","nodeType":"VariableDeclaration","scope":91,"src":"3563:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":79,"nodeType":"UserDefinedTypeName","pathNode":{"id":78,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"3563:9:0"},"referencedDeclaration":20,"src":"3563:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":83,"mutability":"mutable","name":"factoryInfo","nameLocation":"3595:11:0","nodeType":"VariableDeclaration","scope":91,"src":"3585:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":82,"nodeType":"UserDefinedTypeName","pathNode":{"id":81,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"3585:9:0"},"referencedDeclaration":20,"src":"3585:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":86,"mutability":"mutable","name":"paymasterInfo","nameLocation":"3618:13:0","nodeType":"VariableDeclaration","scope":91,"src":"3608:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":85,"nodeType":"UserDefinedTypeName","pathNode":{"id":84,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"3608:9:0"},"referencedDeclaration":20,"src":"3608:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":89,"mutability":"mutable","name":"aggregatorInfo","nameLocation":"3661:14:0","nodeType":"VariableDeclaration","scope":91,"src":"3641:34:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_memory_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo"},"typeName":{"id":88,"nodeType":"UserDefinedTypeName","pathNode":{"id":87,"name":"AggregatorStakeInfo","nodeType":"IdentifierPath","referencedDeclaration":26,"src":"3641:19:0"},"referencedDeclaration":26,"src":"3641:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo"}},"visibility":"internal"}],"src":"3531:145:0"},"src":"3494:183:0"},{"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"3683:51:0","text":" return value of getSenderAddress"},"errorSelector":"6ca7b806","id":96,"name":"SenderAddressResult","nameLocation":"3745:19:0","nodeType":"ErrorDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"sender","nameLocation":"3773:6:0","nodeType":"VariableDeclaration","scope":96,"src":"3765:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"3765:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3764:16:0"},"src":"3739:42:0"},{"constant":false,"functionSelector":"b0d691fe","id":99,"mutability":"mutable","name":"entryPoint","nameLocation":"3806:10:0","nodeType":"VariableDeclaration","scope":522,"src":"3787:29:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"},"typeName":{"id":98,"nodeType":"UserDefinedTypeName","pathNode":{"id":97,"name":"IEntryPoint","nodeType":"IdentifierPath","referencedDeclaration":998,"src":"3787:11:0"},"referencedDeclaration":998,"src":"3787:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"}},"visibility":"public"},{"constant":false,"id":106,"mutability":"mutable","name":"emptyStakeInfo","nameLocation":"3841:14:0","nodeType":"VariableDeclaration","scope":522,"src":"3823:50:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":101,"nodeType":"UserDefinedTypeName","pathNode":{"id":100,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"3823:9:0"},"referencedDeclaration":20,"src":"3823:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"value":{"arguments":[{"hexValue":"30","id":103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3868:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3871:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":102,"name":"StakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"3858:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StakeInfo_$20_storage_ptr_$","typeString":"type(struct EntryPointWrapper.StakeInfo storage pointer)"}},"id":105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3858:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"}},"visibility":"private"},{"constant":false,"id":116,"mutability":"mutable","name":"emptyAggregatorInfo","nameLocation":"3907:19:0","nodeType":"VariableDeclaration","scope":522,"src":"3879:97:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage","typeString":"struct EntryPointWrapper.AggregatorStakeInfo"},"typeName":{"id":108,"nodeType":"UserDefinedTypeName","pathNode":{"id":107,"name":"AggregatorStakeInfo","nodeType":"IdentifierPath","referencedDeclaration":26,"src":"3879:19:0"},"referencedDeclaration":26,"src":"3879:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo"}},"value":{"arguments":[{"arguments":[{"hexValue":"30","id":112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3957:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3949:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":110,"name":"address","nodeType":"ElementaryTypeName","src":"3949:7:0","typeDescriptions":{}}},"id":113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3949:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":114,"name":"emptyStakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"3961:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage","typeString":"struct EntryPointWrapper.StakeInfo storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_struct$_StakeInfo_$20_storage","typeString":"struct EntryPointWrapper.StakeInfo storage ref"}],"id":109,"name":"AggregatorStakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3929:19:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AggregatorStakeInfo_$26_storage_ptr_$","typeString":"type(struct EntryPointWrapper.AggregatorStakeInfo storage pointer)"}},"id":115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3929:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_memory_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo memory"}},"visibility":"private"},{"constant":false,"id":130,"mutability":"mutable","name":"emptyReturnInfo","nameLocation":"4001:15:0","nodeType":"VariableDeclaration","scope":522,"src":"3982:80:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage","typeString":"struct EntryPointWrapper.ReturnInfo"},"typeName":{"id":118,"nodeType":"UserDefinedTypeName","pathNode":{"id":117,"name":"ReturnInfo","nodeType":"IdentifierPath","referencedDeclaration":15,"src":"3982:10:0"},"referencedDeclaration":15,"src":"3982:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"}},"value":{"arguments":[{"hexValue":"30","id":120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4030:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4033:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"66616c7365","id":122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4036:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4043:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4046:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"hexValue":"30","id":127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4059:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4049:9:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":125,"name":"bytes","nodeType":"ElementaryTypeName","src":"4053:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4049:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":119,"name":"ReturnInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"4019:10:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ReturnInfo_$15_storage_ptr_$","typeString":"type(struct EntryPointWrapper.ReturnInfo storage pointer)"}},"id":129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4019:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_memory_ptr","typeString":"struct EntryPointWrapper.ReturnInfo memory"}},"visibility":"private"},{"constant":false,"id":141,"mutability":"mutable","name":"emptyResponse","nameLocation":"4085:13:0","nodeType":"VariableDeclaration","scope":522,"src":"4068:131:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$51_storage","typeString":"struct EntryPointWrapper.Response"},"typeName":{"id":132,"nodeType":"UserDefinedTypeName","pathNode":{"id":131,"name":"Response","nodeType":"IdentifierPath","referencedDeclaration":51,"src":"4068:8:0"},"referencedDeclaration":51,"src":"4068:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$51_storage_ptr","typeString":"struct EntryPointWrapper.Response"}},"value":{"arguments":[{"hexValue":"","id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4110:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"id":135,"name":"emptyReturnInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":130,"src":"4114:15:0","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage","typeString":"struct EntryPointWrapper.ReturnInfo storage ref"}},{"id":136,"name":"emptyStakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"4131:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage","typeString":"struct EntryPointWrapper.StakeInfo storage ref"}},{"id":137,"name":"emptyStakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"4147:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage","typeString":"struct EntryPointWrapper.StakeInfo storage ref"}},{"id":138,"name":"emptyStakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"4163:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage","typeString":"struct EntryPointWrapper.StakeInfo storage ref"}},{"id":139,"name":"emptyAggregatorInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"4179:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage","typeString":"struct EntryPointWrapper.AggregatorStakeInfo storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage","typeString":"struct EntryPointWrapper.ReturnInfo storage ref"},{"typeIdentifier":"t_struct$_StakeInfo_$20_storage","typeString":"struct EntryPointWrapper.StakeInfo storage ref"},{"typeIdentifier":"t_struct$_StakeInfo_$20_storage","typeString":"struct EntryPointWrapper.StakeInfo storage ref"},{"typeIdentifier":"t_struct$_StakeInfo_$20_storage","typeString":"struct EntryPointWrapper.StakeInfo storage ref"},{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage","typeString":"struct EntryPointWrapper.AggregatorStakeInfo storage ref"}],"id":133,"name":"Response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"4101:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Response_$51_storage_ptr_$","typeString":"type(struct EntryPointWrapper.Response storage pointer)"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4101:98:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Response_$51_memory_ptr","typeString":"struct EntryPointWrapper.Response memory"}},"visibility":"private"},{"constant":false,"id":149,"mutability":"mutable","name":"emptyFailedOp","nameLocation":"4228:13:0","nodeType":"VariableDeclaration","scope":522,"src":"4205:67:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_FailedOpStatus_$33_storage","typeString":"struct EntryPointWrapper.FailedOpStatus"},"typeName":{"id":143,"nodeType":"UserDefinedTypeName","pathNode":{"id":142,"name":"FailedOpStatus","nodeType":"IdentifierPath","referencedDeclaration":33,"src":"4205:14:0"},"referencedDeclaration":33,"src":"4205:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_FailedOpStatus_$33_storage_ptr","typeString":"struct EntryPointWrapper.FailedOpStatus"}},"value":{"arguments":[{"hexValue":"66616c7365","id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4259:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4266:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"","id":147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4269:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":144,"name":"FailedOpStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"4244:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_FailedOpStatus_$33_storage_ptr_$","typeString":"type(struct EntryPointWrapper.FailedOpStatus storage pointer)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_FailedOpStatus_$33_memory_ptr","typeString":"struct EntryPointWrapper.FailedOpStatus memory"}},"visibility":"private"},{"body":{"id":159,"nodeType":"Block","src":"4316:41:0","statements":[{"expression":{"id":157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":155,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"4326:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":156,"name":"_entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"4339:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"}},"src":"4326:24:0","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"}},"id":158,"nodeType":"ExpressionStatement","src":"4326:24:0"}]},"id":160,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"mutability":"mutable","name":"_entryPoint","nameLocation":"4303:11:0","nodeType":"VariableDeclaration","scope":160,"src":"4291:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"},"typeName":{"id":151,"nodeType":"UserDefinedTypeName","pathNode":{"id":150,"name":"IEntryPoint","nodeType":"IdentifierPath","referencedDeclaration":998,"src":"4291:11:0"},"referencedDeclaration":998,"src":"4291:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"}},"visibility":"internal"}],"src":"4290:25:0"},"returnParameters":{"id":154,"nodeType":"ParameterList","parameters":[],"src":"4316:0:0"},"scope":522,"src":"4279:78:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":322,"nodeType":"Block","src":"4480:1461:0","statements":[{"clauses":[{"block":{"id":176,"nodeType":"Block","src":"4532:2:0","statements":[]},"errorName":"","id":177,"nodeType":"TryCatchClause","src":"4532:2:0"},{"block":{"id":319,"nodeType":"Block","src":"4575:1360:0","statements":[{"assignments":[182],"declarations":[{"constant":false,"id":182,"mutability":"mutable","name":"receivedSelector","nameLocation":"4596:16:0","nodeType":"VariableDeclaration","scope":319,"src":"4589:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":181,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4589:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":187,"initialValue":{"arguments":[{"id":185,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"4622:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4615:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":183,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4615:6:0","typeDescriptions":{}}},"id":186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4615:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"4589:44:0"},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":188,"name":"receivedSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"4652:16:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":189,"name":"ValidationResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"4672:16:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_struct$_ReturnInfo_$15_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$returns$__$","typeString":"function (struct EntryPointWrapper.ReturnInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.StakeInfo memory) pure"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"4672:25:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"4652:45:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":233,"name":"receivedSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"5111:16:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":234,"name":"ValidationResultWithAggregation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"5131:31:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_struct$_ReturnInfo_$15_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_AggregatorStakeInfo_$26_memory_ptr_$returns$__$","typeString":"function (struct EntryPointWrapper.ReturnInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.AggregatorStakeInfo memory) pure"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"5131:40:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"5111:60:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":282,"name":"receivedSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"5659:16:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":283,"name":"FailedOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":58,"src":"5679:8:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory) pure"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"5679:17:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"5659:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":316,"nodeType":"IfStatement","src":"5655:270:0","trueBody":{"id":315,"nodeType":"Block","src":"5697:228:0","statements":[{"assignments":[287,289],"declarations":[{"constant":false,"id":287,"mutability":"mutable","name":"opIndex","nameLocation":"5724:7:0","nodeType":"VariableDeclaration","scope":315,"src":"5716:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"5716:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":289,"mutability":"mutable","name":"reason","nameLocation":"5747:6:0","nodeType":"VariableDeclaration","scope":315,"src":"5733:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":288,"name":"string","nodeType":"ElementaryTypeName","src":"5733:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":306,"initialValue":{"arguments":[{"arguments":[{"id":293,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"5774:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"34","id":294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5786:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":295,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"5789:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5789:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"34","id":297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5809:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"5789:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":292,"name":"slice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"5768:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5768:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5814:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":300,"name":"uint256","nodeType":"ElementaryTypeName","src":"5814:7:0","typeDescriptions":{}}},{"id":303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5823:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":302,"name":"string","nodeType":"ElementaryTypeName","src":"5823:6:0","typeDescriptions":{}}}],"id":304,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5813:17:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_string_storage_ptr_$_$","typeString":"tuple(type(uint256),type(string storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_uint256_$_$_t_type$_t_string_storage_ptr_$_$","typeString":"tuple(type(uint256),type(string storage pointer))"}],"expression":{"id":290,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5757:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"5757:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5757:74:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_string_memory_ptr_$","typeString":"tuple(uint256,string memory)"}},"nodeType":"VariableDeclarationStatement","src":"5715:116:0"},{"expression":{"components":[{"arguments":[{"hexValue":"74727565","id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5872:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":309,"name":"opIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"5878:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":310,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"5887:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":307,"name":"FailedOpStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":33,"src":"5857:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_FailedOpStatus_$33_storage_ptr_$","typeString":"type(struct EntryPointWrapper.FailedOpStatus storage pointer)"}},"id":311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5857:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_FailedOpStatus_$33_memory_ptr","typeString":"struct EntryPointWrapper.FailedOpStatus memory"}},{"id":312,"name":"emptyResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5896:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$51_storage","typeString":"struct EntryPointWrapper.Response storage ref"}}],"id":313,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5856:54:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_FailedOpStatus_$33_memory_ptr_$_t_struct$_Response_$51_storage_$","typeString":"tuple(struct EntryPointWrapper.FailedOpStatus memory,struct EntryPointWrapper.Response storage ref)"}},"functionReturnParameters":171,"id":314,"nodeType":"Return","src":"5849:61:0"}]}},"id":317,"nodeType":"IfStatement","src":"5107:818:0","trueBody":{"id":281,"nodeType":"Block","src":"5173:476:0","statements":[{"assignments":[239,242,245,248,251],"declarations":[{"constant":false,"id":239,"mutability":"mutable","name":"returnInfo","nameLocation":"5210:10:0","nodeType":"VariableDeclaration","scope":281,"src":"5192:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_memory_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"},"typeName":{"id":238,"nodeType":"UserDefinedTypeName","pathNode":{"id":237,"name":"ReturnInfo","nodeType":"IdentifierPath","referencedDeclaration":15,"src":"5192:10:0"},"referencedDeclaration":15,"src":"5192:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":242,"mutability":"mutable","name":"senderInfo","nameLocation":"5239:10:0","nodeType":"VariableDeclaration","scope":281,"src":"5222:27:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":241,"nodeType":"UserDefinedTypeName","pathNode":{"id":240,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"5222:9:0"},"referencedDeclaration":20,"src":"5222:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":245,"mutability":"mutable","name":"factoryInfo","nameLocation":"5268:11:0","nodeType":"VariableDeclaration","scope":281,"src":"5251:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":244,"nodeType":"UserDefinedTypeName","pathNode":{"id":243,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"5251:9:0"},"referencedDeclaration":20,"src":"5251:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":248,"mutability":"mutable","name":"paymasterInfo","nameLocation":"5298:13:0","nodeType":"VariableDeclaration","scope":281,"src":"5281:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":247,"nodeType":"UserDefinedTypeName","pathNode":{"id":246,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"5281:9:0"},"referencedDeclaration":20,"src":"5281:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":251,"mutability":"mutable","name":"aggregatorInfo","nameLocation":"5340:14:0","nodeType":"VariableDeclaration","scope":281,"src":"5313:41:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_memory_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo"},"typeName":{"id":250,"nodeType":"UserDefinedTypeName","pathNode":{"id":249,"name":"AggregatorStakeInfo","nodeType":"IdentifierPath","referencedDeclaration":26,"src":"5313:19:0"},"referencedDeclaration":26,"src":"5313:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo"}},"visibility":"internal"}],"id":269,"initialValue":{"arguments":[{"arguments":[{"id":255,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"5375:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"34","id":256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5387:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":257,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"5390:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"5390:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"34","id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5410:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"5390:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":254,"name":"slice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"5369:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5369:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":262,"name":"ReturnInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"5415:10:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ReturnInfo_$15_storage_ptr_$","typeString":"type(struct EntryPointWrapper.ReturnInfo storage pointer)"}},{"id":263,"name":"StakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"5427:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StakeInfo_$20_storage_ptr_$","typeString":"type(struct EntryPointWrapper.StakeInfo storage pointer)"}},{"id":264,"name":"StakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"5438:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StakeInfo_$20_storage_ptr_$","typeString":"type(struct EntryPointWrapper.StakeInfo storage pointer)"}},{"id":265,"name":"StakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"5449:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StakeInfo_$20_storage_ptr_$","typeString":"type(struct EntryPointWrapper.StakeInfo storage pointer)"}},{"id":266,"name":"AggregatorStakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"5460:19:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AggregatorStakeInfo_$26_storage_ptr_$","typeString":"type(struct EntryPointWrapper.AggregatorStakeInfo storage pointer)"}}],"id":267,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5414:66:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_struct$_ReturnInfo_$15_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_AggregatorStakeInfo_$26_storage_ptr_$_$","typeString":"tuple(type(struct EntryPointWrapper.ReturnInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.AggregatorStakeInfo storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_struct$_ReturnInfo_$15_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_AggregatorStakeInfo_$26_storage_ptr_$_$","typeString":"tuple(type(struct EntryPointWrapper.ReturnInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.AggregatorStakeInfo storage pointer))"}],"expression":{"id":252,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5358:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"5358:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5358:123:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_ReturnInfo_$15_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_AggregatorStakeInfo_$26_memory_ptr_$","typeString":"tuple(struct EntryPointWrapper.ReturnInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.AggregatorStakeInfo memory)"}},"nodeType":"VariableDeclarationStatement","src":"5191:290:0"},{"expression":{"components":[{"id":270,"name":"emptyFailedOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"5507:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_FailedOpStatus_$33_storage","typeString":"struct EntryPointWrapper.FailedOpStatus storage ref"}},{"arguments":[{"hexValue":"56616c69646174696f6e526573756c74576974684167677265676174696f6e","id":272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5531:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_ea3130099f23ccb989b6d42303a297f831545c15c36a5fc95fe55cdc635ccfdc","typeString":"literal_string \"ValidationResultWithAggregation\""},"value":"ValidationResultWithAggregation"},{"id":273,"name":"returnInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"5566:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_memory_ptr","typeString":"struct EntryPointWrapper.ReturnInfo memory"}},{"id":274,"name":"senderInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"5578:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"}},{"id":275,"name":"factoryInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"5590:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"}},{"id":276,"name":"paymasterInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"5603:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"}},{"id":277,"name":"aggregatorInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"5618:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_memory_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ea3130099f23ccb989b6d42303a297f831545c15c36a5fc95fe55cdc635ccfdc","typeString":"literal_string \"ValidationResultWithAggregation\""},{"typeIdentifier":"t_struct$_ReturnInfo_$15_memory_ptr","typeString":"struct EntryPointWrapper.ReturnInfo memory"},{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"},{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"},{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"},{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_memory_ptr","typeString":"struct EntryPointWrapper.AggregatorStakeInfo memory"}],"id":271,"name":"Response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"5522:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Response_$51_storage_ptr_$","typeString":"type(struct EntryPointWrapper.Response storage pointer)"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5522:111:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Response_$51_memory_ptr","typeString":"struct EntryPointWrapper.Response memory"}}],"id":279,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5506:128:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_FailedOpStatus_$33_storage_$_t_struct$_Response_$51_memory_ptr_$","typeString":"tuple(struct EntryPointWrapper.FailedOpStatus storage ref,struct EntryPointWrapper.Response memory)"}},"functionReturnParameters":171,"id":280,"nodeType":"Return","src":"5499:135:0"}]}},"id":318,"nodeType":"IfStatement","src":"4648:1277:0","trueBody":{"id":232,"nodeType":"Block","src":"4699:402:0","statements":[{"assignments":[194,197,200,203],"declarations":[{"constant":false,"id":194,"mutability":"mutable","name":"returnInfo","nameLocation":"4736:10:0","nodeType":"VariableDeclaration","scope":232,"src":"4718:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_memory_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"},"typeName":{"id":193,"nodeType":"UserDefinedTypeName","pathNode":{"id":192,"name":"ReturnInfo","nodeType":"IdentifierPath","referencedDeclaration":15,"src":"4718:10:0"},"referencedDeclaration":15,"src":"4718:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_storage_ptr","typeString":"struct EntryPointWrapper.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"senderInfo","nameLocation":"4765:10:0","nodeType":"VariableDeclaration","scope":232,"src":"4748:27:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":196,"nodeType":"UserDefinedTypeName","pathNode":{"id":195,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"4748:9:0"},"referencedDeclaration":20,"src":"4748:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":200,"mutability":"mutable","name":"factoryInfo","nameLocation":"4794:11:0","nodeType":"VariableDeclaration","scope":232,"src":"4777:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":199,"nodeType":"UserDefinedTypeName","pathNode":{"id":198,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"4777:9:0"},"referencedDeclaration":20,"src":"4777:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":203,"mutability":"mutable","name":"paymasterInfo","nameLocation":"4824:13:0","nodeType":"VariableDeclaration","scope":232,"src":"4807:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo"},"typeName":{"id":202,"nodeType":"UserDefinedTypeName","pathNode":{"id":201,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":20,"src":"4807:9:0"},"referencedDeclaration":20,"src":"4807:9:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_storage_ptr","typeString":"struct EntryPointWrapper.StakeInfo"}},"visibility":"internal"}],"id":220,"initialValue":{"arguments":[{"arguments":[{"id":207,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"4858:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"34","id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4870:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":209,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"4873:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4873:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"34","id":211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4893:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"4873:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":206,"name":"slice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"4852:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4852:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":214,"name":"ReturnInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"4898:10:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ReturnInfo_$15_storage_ptr_$","typeString":"type(struct EntryPointWrapper.ReturnInfo storage pointer)"}},{"id":215,"name":"StakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"4910:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StakeInfo_$20_storage_ptr_$","typeString":"type(struct EntryPointWrapper.StakeInfo storage pointer)"}},{"id":216,"name":"StakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"4921:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StakeInfo_$20_storage_ptr_$","typeString":"type(struct EntryPointWrapper.StakeInfo storage pointer)"}},{"id":217,"name":"StakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"4932:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StakeInfo_$20_storage_ptr_$","typeString":"type(struct EntryPointWrapper.StakeInfo storage pointer)"}}],"id":218,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4897:45:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_struct$_ReturnInfo_$15_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$","typeString":"tuple(type(struct EntryPointWrapper.ReturnInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_struct$_ReturnInfo_$15_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$_t_type$_t_struct$_StakeInfo_$20_storage_ptr_$_$","typeString":"tuple(type(struct EntryPointWrapper.ReturnInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer),type(struct EntryPointWrapper.StakeInfo storage pointer))"}],"expression":{"id":204,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4841:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"4841:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4841:102:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_ReturnInfo_$15_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$_t_struct$_StakeInfo_$20_memory_ptr_$","typeString":"tuple(struct EntryPointWrapper.ReturnInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.StakeInfo memory,struct EntryPointWrapper.StakeInfo memory)"}},"nodeType":"VariableDeclarationStatement","src":"4717:226:0"},{"expression":{"components":[{"id":221,"name":"emptyFailedOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"4969:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_FailedOpStatus_$33_storage","typeString":"struct EntryPointWrapper.FailedOpStatus storage ref"}},{"arguments":[{"hexValue":"56616c69646174696f6e526573756c74","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4993:18:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_2553a72894d908a298b00dbf33bbabad7e5ce84b5e86e2b9599904735a8f7bdc","typeString":"literal_string \"ValidationResult\""},"value":"ValidationResult"},{"id":224,"name":"returnInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"5013:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$15_memory_ptr","typeString":"struct EntryPointWrapper.ReturnInfo memory"}},{"id":225,"name":"senderInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"5025:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"}},{"id":226,"name":"factoryInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"5037:11:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"}},{"id":227,"name":"paymasterInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"5050:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"}},{"id":228,"name":"emptyAggregatorInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"5065:19:0","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage","typeString":"struct EntryPointWrapper.AggregatorStakeInfo storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_2553a72894d908a298b00dbf33bbabad7e5ce84b5e86e2b9599904735a8f7bdc","typeString":"literal_string \"ValidationResult\""},{"typeIdentifier":"t_struct$_ReturnInfo_$15_memory_ptr","typeString":"struct EntryPointWrapper.ReturnInfo memory"},{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"},{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"},{"typeIdentifier":"t_struct$_StakeInfo_$20_memory_ptr","typeString":"struct EntryPointWrapper.StakeInfo memory"},{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$26_storage","typeString":"struct EntryPointWrapper.AggregatorStakeInfo storage ref"}],"id":222,"name":"Response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"4984:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Response_$51_storage_ptr_$","typeString":"type(struct EntryPointWrapper.Response storage pointer)"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4984:101:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Response_$51_memory_ptr","typeString":"struct EntryPointWrapper.Response memory"}}],"id":230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4968:118:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_struct$_FailedOpStatus_$33_storage_$_t_struct$_Response_$51_memory_ptr_$","typeString":"tuple(struct EntryPointWrapper.FailedOpStatus storage ref,struct EntryPointWrapper.Response memory)"}},"functionReturnParameters":171,"id":231,"nodeType":"Return","src":"4961:125:0"}]}}]},"errorName":"","id":320,"nodeType":"TryCatchClause","parameters":{"id":180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":179,"mutability":"mutable","name":"revertData","nameLocation":"4563:10:0","nodeType":"VariableDeclaration","scope":320,"src":"4550:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":178,"name":"bytes","nodeType":"ElementaryTypeName","src":"4550:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4549:25:0"},"src":"4543:1392:0"}],"externalCall":{"arguments":[{"id":174,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4524:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}],"expression":{"id":172,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"4494:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"simulateValidation","nodeType":"MemberAccess","referencedDeclaration":961,"src":"4494:29:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_struct$_UserOperation_$1149_memory_ptr_$returns$__$","typeString":"function (struct UserOperation memory) external"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4494:37:0","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"TryStatement","src":"4490:1445:0"}]},"functionSelector":"ee219423","id":323,"implemented":true,"kind":"function","modifiers":[],"name":"simulateValidation","nameLocation":"4372:18:0","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"userOp","nameLocation":"4414:6:0","nodeType":"VariableDeclaration","scope":323,"src":"4391:29:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":162,"nodeType":"UserDefinedTypeName","pathNode":{"id":161,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"4391:13:0"},"referencedDeclaration":1149,"src":"4391:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"4390:31:0"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":323,"src":"4440:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FailedOpStatus_$33_memory_ptr","typeString":"struct EntryPointWrapper.FailedOpStatus"},"typeName":{"id":166,"nodeType":"UserDefinedTypeName","pathNode":{"id":165,"name":"FailedOpStatus","nodeType":"IdentifierPath","referencedDeclaration":33,"src":"4440:14:0"},"referencedDeclaration":33,"src":"4440:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_FailedOpStatus_$33_storage_ptr","typeString":"struct EntryPointWrapper.FailedOpStatus"}},"visibility":"internal"},{"constant":false,"id":170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":323,"src":"4463:15:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$51_memory_ptr","typeString":"struct EntryPointWrapper.Response"},"typeName":{"id":169,"nodeType":"UserDefinedTypeName","pathNode":{"id":168,"name":"Response","nodeType":"IdentifierPath","referencedDeclaration":51,"src":"4463:8:0"},"referencedDeclaration":51,"src":"4463:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_Response_$51_storage_ptr","typeString":"struct EntryPointWrapper.Response"}},"visibility":"internal"}],"src":"4439:40:0"},"scope":522,"src":"4363:1578:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":359,"nodeType":"Block","src":"6111:2640:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":335,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6129:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3331","id":336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6139:2:0","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"6129:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":338,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6145:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f766572666c6f77","id":340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6154:16:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""},"value":"slice_overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e","typeString":"literal_string \"slice_overflow\""}],"id":334,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6121:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6121:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":342,"nodeType":"ExpressionStatement","src":"6121:50:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":344,"name":"_bytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"6189:6:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6189:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":346,"name":"_start","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"6206:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":347,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"6215:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6206:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6189:33:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"736c6963655f6f75744f66426f756e6473","id":350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6224:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""},"value":"slice_outOfBounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0","typeString":"literal_string \"slice_outOfBounds\""}],"id":343,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6181:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6181:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":352,"nodeType":"ExpressionStatement","src":"6181:63:0"},{"assignments":[354],"declarations":[{"constant":false,"id":354,"mutability":"mutable","name":"tempBytes","nameLocation":"6268:9:0","nodeType":"VariableDeclaration","scope":359,"src":"6255:22:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":353,"name":"bytes","nodeType":"ElementaryTypeName","src":"6255:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":355,"nodeType":"VariableDeclarationStatement","src":"6255:22:0"},{"AST":{"nodeType":"YulBlock","src":"6297:2421:0","statements":[{"cases":[{"body":{"nodeType":"YulBlock","src":"6353:1960:0","statements":[{"nodeType":"YulAssignment","src":"6509:24:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6528:4:0","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6522:5:0"},"nodeType":"YulFunctionCall","src":"6522:11:0"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"6509:9:0"}]},{"nodeType":"YulVariableDeclaration","src":"7157:33:0","value":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"7178:7:0"},{"kind":"number","nodeType":"YulLiteral","src":"7187:2:0","type":"","value":"31"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7174:3:0"},"nodeType":"YulFunctionCall","src":"7174:16:0"},"variables":[{"name":"lengthmod","nodeType":"YulTypedName","src":"7161:9:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7511:70:0","value":{"arguments":[{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"7529:9:0"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"7540:9:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7525:3:0"},"nodeType":"YulFunctionCall","src":"7525:25:0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7556:4:0","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"7569:9:0"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7562:6:0"},"nodeType":"YulFunctionCall","src":"7562:17:0"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7552:3:0"},"nodeType":"YulFunctionCall","src":"7552:28:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7521:3:0"},"nodeType":"YulFunctionCall","src":"7521:60:0"},"variables":[{"name":"mc","nodeType":"YulTypedName","src":"7515:2:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7598:27:0","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7613:2:0"},{"name":"_length","nodeType":"YulIdentifier","src":"7617:7:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7609:3:0"},"nodeType":"YulFunctionCall","src":"7609:16:0"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"7602:3:0","type":""}]},{"body":{"nodeType":"YulBlock","src":"8007:61:0","statements":[{"expression":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8036:2:0"},{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"8046:2:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8040:5:0"},"nodeType":"YulFunctionCall","src":"8040:9:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8029:6:0"},"nodeType":"YulFunctionCall","src":"8029:21:0"},"nodeType":"YulExpressionStatement","src":"8029:21:0"}]},"condition":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7898:2:0"},{"name":"end","nodeType":"YulIdentifier","src":"7902:3:0"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7895:2:0"},"nodeType":"YulFunctionCall","src":"7895:11:0"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7907:99:0","statements":[{"nodeType":"YulAssignment","src":"7929:19:0","value":{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"7939:2:0"},{"kind":"number","nodeType":"YulLiteral","src":"7943:4:0","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7935:3:0"},"nodeType":"YulFunctionCall","src":"7935:13:0"},"variableNames":[{"name":"mc","nodeType":"YulIdentifier","src":"7929:2:0"}]},{"nodeType":"YulAssignment","src":"7969:19:0","value":{"arguments":[{"name":"cc","nodeType":"YulIdentifier","src":"7979:2:0"},{"kind":"number","nodeType":"YulLiteral","src":"7983:4:0","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7975:3:0"},"nodeType":"YulFunctionCall","src":"7975:13:0"},"variableNames":[{"name":"cc","nodeType":"YulIdentifier","src":"7969:2:0"}]}]},"pre":{"nodeType":"YulBlock","src":"7647:247:0","statements":[{"nodeType":"YulVariableDeclaration","src":"7796:80:0","value":{"arguments":[{"arguments":[{"arguments":[{"name":"_bytes","nodeType":"YulIdentifier","src":"7818:6:0"},{"name":"lengthmod","nodeType":"YulIdentifier","src":"7826:9:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7814:3:0"},"nodeType":"YulFunctionCall","src":"7814:22:0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7842:4:0","type":"","value":"0x20"},{"arguments":[{"name":"lengthmod","nodeType":"YulIdentifier","src":"7855:9:0"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7848:6:0"},"nodeType":"YulFunctionCall","src":"7848:17:0"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7838:3:0"},"nodeType":"YulFunctionCall","src":"7838:28:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7810:3:0"},"nodeType":"YulFunctionCall","src":"7810:57:0"},{"name":"_start","nodeType":"YulIdentifier","src":"7869:6:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7806:3:0"},"nodeType":"YulFunctionCall","src":"7806:70:0"},"variables":[{"name":"cc","nodeType":"YulTypedName","src":"7800:2:0","type":""}]}]},"src":"7643:425:0"},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"8093:9:0"},{"name":"_length","nodeType":"YulIdentifier","src":"8104:7:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8086:6:0"},"nodeType":"YulFunctionCall","src":"8086:26:0"},"nodeType":"YulExpressionStatement","src":"8086:26:0"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8267:4:0","type":"","value":"0x40"},{"arguments":[{"arguments":[{"name":"mc","nodeType":"YulIdentifier","src":"8281:2:0"},{"kind":"number","nodeType":"YulLiteral","src":"8285:2:0","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8277:3:0"},"nodeType":"YulFunctionCall","src":"8277:11:0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8294:2:0","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8290:3:0"},"nodeType":"YulFunctionCall","src":"8290:7:0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8273:3:0"},"nodeType":"YulFunctionCall","src":"8273:25:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8260:6:0"},"nodeType":"YulFunctionCall","src":"8260:39:0"},"nodeType":"YulExpressionStatement","src":"8260:39:0"}]},"nodeType":"YulCase","src":"6346:1967:0","value":{"kind":"number","nodeType":"YulLiteral","src":"6351:1:0","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"8417:291:0","statements":[{"nodeType":"YulAssignment","src":"8435:24:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8454:4:0","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8448:5:0"},"nodeType":"YulFunctionCall","src":"8448:11:0"},"variableNames":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"8435:9:0"}]},{"expression":{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"8629:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"8640:1:0","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8622:6:0"},"nodeType":"YulFunctionCall","src":"8622:20:0"},"nodeType":"YulExpressionStatement","src":"8622:20:0"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8667:4:0","type":"","value":"0x40"},{"arguments":[{"name":"tempBytes","nodeType":"YulIdentifier","src":"8677:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"8688:4:0","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8673:3:0"},"nodeType":"YulFunctionCall","src":"8673:20:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8660:6:0"},"nodeType":"YulFunctionCall","src":"8660:34:0"},"nodeType":"YulExpressionStatement","src":"8660:34:0"}]},"nodeType":"YulCase","src":"8409:299:0","value":"default"}],"expression":{"arguments":[{"name":"_length","nodeType":"YulIdentifier","src":"6325:7:0"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6318:6:0"},"nodeType":"YulFunctionCall","src":"6318:15:0"},"nodeType":"YulSwitch","src":"6311:2397:0"}]},"evmVersion":"london","externalReferences":[{"declaration":325,"isOffset":false,"isSlot":false,"src":"7818:6:0","valueSize":1},{"declaration":329,"isOffset":false,"isSlot":false,"src":"6325:7:0","valueSize":1},{"declaration":329,"isOffset":false,"isSlot":false,"src":"7178:7:0","valueSize":1},{"declaration":329,"isOffset":false,"isSlot":false,"src":"7617:7:0","valueSize":1},{"declaration":329,"isOffset":false,"isSlot":false,"src":"8104:7:0","valueSize":1},{"declaration":327,"isOffset":false,"isSlot":false,"src":"7869:6:0","valueSize":1},{"declaration":354,"isOffset":false,"isSlot":false,"src":"6509:9:0","valueSize":1},{"declaration":354,"isOffset":false,"isSlot":false,"src":"7529:9:0","valueSize":1},{"declaration":354,"isOffset":false,"isSlot":false,"src":"8093:9:0","valueSize":1},{"declaration":354,"isOffset":false,"isSlot":false,"src":"8435:9:0","valueSize":1},{"declaration":354,"isOffset":false,"isSlot":false,"src":"8629:9:0","valueSize":1},{"declaration":354,"isOffset":false,"isSlot":false,"src":"8677:9:0","valueSize":1}],"id":356,"nodeType":"InlineAssembly","src":"6288:2430:0"},{"expression":{"id":357,"name":"tempBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"8735:9:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":333,"id":358,"nodeType":"Return","src":"8728:16:0"}]},"id":360,"implemented":true,"kind":"function","modifiers":[],"name":"slice","nameLocation":"5956:5:0","nodeType":"FunctionDefinition","parameters":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"_bytes","nameLocation":"5984:6:0","nodeType":"VariableDeclaration","scope":360,"src":"5971:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":324,"name":"bytes","nodeType":"ElementaryTypeName","src":"5971:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":327,"mutability":"mutable","name":"_start","nameLocation":"6008:6:0","nodeType":"VariableDeclaration","scope":360,"src":"6000:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":326,"name":"uint256","nodeType":"ElementaryTypeName","src":"6000:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":329,"mutability":"mutable","name":"_length","nameLocation":"6032:7:0","nodeType":"VariableDeclaration","scope":360,"src":"6024:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":328,"name":"uint256","nodeType":"ElementaryTypeName","src":"6024:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5961:84:0"},"returnParameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":360,"src":"6093:12:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":331,"name":"bytes","nodeType":"ElementaryTypeName","src":"6093:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6092:14:0"},"scope":522,"src":"5947:2804:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":408,"nodeType":"Block","src":"8881:193:0","statements":[{"expression":{"id":380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":373,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"8891:3:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":377,"name":"userOps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"8911:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_memory_ptr_$dyn_memory_ptr","typeString":"struct UserOperation memory[] memory"}},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8911:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8897:13:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8901:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":375,"nodeType":"ArrayTypeName","src":"8901:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8897:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"src":"8891:35:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":381,"nodeType":"ExpressionStatement","src":"8891:35:0"},{"body":{"id":404,"nodeType":"Block","src":"8978:70:0","statements":[{"expression":{"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":393,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"8992:3:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":395,"indexExpression":{"id":394,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"8996:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8992:6:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":398,"name":"userOps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"9026:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_memory_ptr_$dyn_memory_ptr","typeString":"struct UserOperation memory[] memory"}},"id":400,"indexExpression":{"id":399,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"9034:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9026:10:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_memory_ptr","typeString":"struct UserOperation memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$1149_memory_ptr","typeString":"struct UserOperation memory"}],"expression":{"id":396,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"9001:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getUserOpHash","nodeType":"MemberAccess","referencedDeclaration":954,"src":"9001:24:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_struct$_UserOperation_$1149_memory_ptr_$returns$_t_bytes32_$","typeString":"function (struct UserOperation memory) view external returns (bytes32)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9001:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8992:45:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":403,"nodeType":"ExpressionStatement","src":"8992:45:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":386,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"8953:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":387,"name":"userOps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"8957:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_memory_ptr_$dyn_memory_ptr","typeString":"struct UserOperation memory[] memory"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8957:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8953:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":405,"initializationExpression":{"assignments":[383],"declarations":[{"constant":false,"id":383,"mutability":"mutable","name":"i","nameLocation":"8946:1:0","nodeType":"VariableDeclaration","scope":405,"src":"8941:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":382,"name":"uint","nodeType":"ElementaryTypeName","src":"8941:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":385,"initialValue":{"hexValue":"30","id":384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8950:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8941:10:0"},"loopExpression":{"expression":{"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8973:3:0","subExpression":{"id":390,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"8973:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":392,"nodeType":"ExpressionStatement","src":"8973:3:0"},"nodeType":"ForStatement","src":"8936:112:0"},{"expression":{"id":406,"name":"ret","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"9064:3:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":372,"id":407,"nodeType":"Return","src":"9057:10:0"}]},"functionSelector":"3024e00c","id":409,"implemented":true,"kind":"function","modifiers":[],"name":"getUserOpHashes","nameLocation":"8766:15:0","nodeType":"FunctionDefinition","parameters":{"id":368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"entryPoint","nameLocation":"8794:10:0","nodeType":"VariableDeclaration","scope":409,"src":"8782:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"},"typeName":{"id":362,"nodeType":"UserDefinedTypeName","pathNode":{"id":361,"name":"IEntryPoint","nodeType":"IdentifierPath","referencedDeclaration":998,"src":"8782:11:0"},"referencedDeclaration":998,"src":"8782:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"}},"visibility":"internal"},{"constant":false,"id":367,"mutability":"mutable","name":"userOps","nameLocation":"8829:7:0","nodeType":"VariableDeclaration","scope":409,"src":"8806:30:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_memory_ptr_$dyn_memory_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":365,"nodeType":"UserDefinedTypeName","pathNode":{"id":364,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"8806:13:0"},"referencedDeclaration":1149,"src":"8806:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"id":366,"nodeType":"ArrayTypeName","src":"8806:15:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"}],"src":"8781:56:0"},"returnParameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"ret","nameLocation":"8876:3:0","nodeType":"VariableDeclaration","scope":409,"src":"8859:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":369,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8859:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":370,"nodeType":"ArrayTypeName","src":"8859:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"8858:22:0"},"scope":522,"src":"8757:317:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":463,"nodeType":"Block","src":"9161:267:0","statements":[{"assignments":[421],"declarations":[{"constant":false,"id":421,"mutability":"mutable","name":"hashes","nameLocation":"9188:6:0","nodeType":"VariableDeclaration","scope":463,"src":"9171:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9171:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":420,"nodeType":"ArrayTypeName","src":"9171:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":428,"initialValue":{"arguments":[{"expression":{"id":425,"name":"addresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"9211:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9211:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"9197:13:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":422,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9201:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":423,"nodeType":"ArrayTypeName","src":"9201:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9197:31:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"9171:57:0"},{"body":{"id":449,"nodeType":"Block","src":"9282:58:0","statements":[{"expression":{"id":447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":440,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"9296:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":442,"indexExpression":{"id":441,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"9303:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9296:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":443,"name":"addresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"9308:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":445,"indexExpression":{"id":444,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"9318:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9308:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"codehash","nodeType":"MemberAccess","src":"9308:21:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9296:33:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":448,"nodeType":"ExpressionStatement","src":"9296:33:0"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":433,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"9255:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":434,"name":"addresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"9259:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9259:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9255:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":450,"initializationExpression":{"assignments":[430],"declarations":[{"constant":false,"id":430,"mutability":"mutable","name":"i","nameLocation":"9248:1:0","nodeType":"VariableDeclaration","scope":450,"src":"9243:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint","nodeType":"ElementaryTypeName","src":"9243:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":432,"initialValue":{"hexValue":"30","id":431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9252:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9243:10:0"},"loopExpression":{"expression":{"id":438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9277:3:0","subExpression":{"id":437,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"9277:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":439,"nodeType":"ExpressionStatement","src":"9277:3:0"},"nodeType":"ForStatement","src":"9238:102:0"},{"assignments":[452],"declarations":[{"constant":false,"id":452,"mutability":"mutable","name":"data","nameLocation":"9362:4:0","nodeType":"VariableDeclaration","scope":463,"src":"9349:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":451,"name":"bytes","nodeType":"ElementaryTypeName","src":"9349:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":457,"initialValue":{"arguments":[{"id":455,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"9380:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"expression":{"id":453,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9369:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"9369:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9369:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"9349:38:0"},{"expression":{"components":[{"arguments":[{"id":459,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"9415:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":458,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9405:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9405:15:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":461,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9404:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":416,"id":462,"nodeType":"Return","src":"9397:24:0"}]},"functionSelector":"7b34b621","id":464,"implemented":true,"kind":"function","modifiers":[],"name":"getCodeHashes","nameLocation":"9089:13:0","nodeType":"FunctionDefinition","parameters":{"id":413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"addresses","nameLocation":"9120:9:0","nodeType":"VariableDeclaration","scope":464,"src":"9103:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":410,"name":"address","nodeType":"ElementaryTypeName","src":"9103:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":411,"nodeType":"ArrayTypeName","src":"9103:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"9102:28:0"},"returnParameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":464,"src":"9152:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":414,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9152:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9151:9:0"},"scope":522,"src":"9080:348:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":520,"nodeType":"Block","src":"9512:451:0","statements":[{"clauses":[{"block":{"id":475,"nodeType":"Block","src":"9564:2:0","statements":[]},"errorName":"","id":476,"nodeType":"TryCatchClause","src":"9564:2:0"},{"block":{"id":517,"nodeType":"Block","src":"9607:350:0","statements":[{"assignments":[481],"declarations":[{"constant":false,"id":481,"mutability":"mutable","name":"receivedSelector","nameLocation":"9628:16:0","nodeType":"VariableDeclaration","scope":517,"src":"9621:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":480,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9621:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"id":486,"initialValue":{"arguments":[{"id":484,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"9654:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9647:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":482,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9647:6:0","typeDescriptions":{}}},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9647:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"VariableDeclarationStatement","src":"9621:44:0"},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":487,"name":"receivedSelector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"9684:16:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":488,"name":"SenderAddressResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":96,"src":"9704:19:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"9704:28:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"9684:48:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":515,"nodeType":"Block","src":"9887:60:0","statements":[{"expression":{"arguments":[{"hexValue":"496e76616c696420696e6974436f6465","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9913:18:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_41358789453c2b61b04d9046ed6bd1617530e1f3f5c8b4843a7b086398036cc8","typeString":"literal_string \"Invalid initCode\""},"value":"Invalid initCode"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_41358789453c2b61b04d9046ed6bd1617530e1f3f5c8b4843a7b086398036cc8","typeString":"literal_string \"Invalid initCode\""}],"id":511,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9905:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9905:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":514,"nodeType":"ExpressionStatement","src":"9905:27:0"}]},"id":516,"nodeType":"IfStatement","src":"9680:267:0","trueBody":{"id":510,"nodeType":"Block","src":"9734:147:0","statements":[{"assignments":[492],"declarations":[{"constant":false,"id":492,"mutability":"mutable","name":"sender","nameLocation":"9760:6:0","nodeType":"VariableDeclaration","scope":510,"src":"9752:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":491,"name":"address","nodeType":"ElementaryTypeName","src":"9752:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":507,"initialValue":{"arguments":[{"arguments":[{"id":496,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"9786:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"34","id":497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9798:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":498,"name":"revertData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"9801:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"9801:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"34","id":500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9821:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9801:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":495,"name":"slice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":360,"src":"9780:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256) pure returns (bytes memory)"}},"id":502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9780:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9826:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":503,"name":"address","nodeType":"ElementaryTypeName","src":"9826:7:0","typeDescriptions":{}}}],"id":505,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"9825:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}],"expression":{"id":493,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9769:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"9769:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9769:66:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"9752:83:0"},{"expression":{"id":508,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":492,"src":"9860:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":470,"id":509,"nodeType":"Return","src":"9853:13:0"}]}}]},"errorName":"","id":518,"nodeType":"TryCatchClause","parameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"revertData","nameLocation":"9595:10:0","nodeType":"VariableDeclaration","scope":518,"src":"9582:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":477,"name":"bytes","nodeType":"ElementaryTypeName","src":"9582:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9581:25:0"},"src":"9575:382:0"}],"externalCall":{"arguments":[{"id":473,"name":"initCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"9554:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":471,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":99,"src":"9526:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$998","typeString":"contract IEntryPoint"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getSenderAddress","nodeType":"MemberAccess","referencedDeclaration":986,"src":"9526:27:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) external"}},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9526:37:0","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":519,"nodeType":"TryStatement","src":"9522:435:0"}]},"functionSelector":"9b249f69","id":521,"implemented":true,"kind":"function","modifiers":[],"name":"getSenderAddress","nameLocation":"9443:16:0","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"initCode","nameLocation":"9475:8:0","nodeType":"VariableDeclaration","scope":521,"src":"9460:23:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":465,"name":"bytes","nodeType":"ElementaryTypeName","src":"9460:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9459:25:0"},"returnParameters":{"id":470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":521,"src":"9503:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":468,"name":"address","nodeType":"ElementaryTypeName","src":"9503:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9502:9:0"},"scope":522,"src":"9434:529:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":523,"src":"189:9776:0","usedErrors":[58,73,91,96]}],"src":"36:9930:0"},"id":0},"contracts/core/Helpers.sol":{"ast":{"absolutePath":"contracts/core/Helpers.sol","exportedSymbols":{"ValidationData":[531],"_intersectTimeRange":[675],"_packValidationData":[712,750],"_parseValidationData":[590],"calldataKeccak":[760]},"id":761,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":524,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:1"},{"canonicalName":"ValidationData","id":531,"members":[{"constant":false,"id":526,"mutability":"mutable","name":"aggregator","nameLocation":"730:10:1","nodeType":"VariableDeclaration","scope":531,"src":"722:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":525,"name":"address","nodeType":"ElementaryTypeName","src":"722:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"validAfter","nameLocation":"757:10:1","nodeType":"VariableDeclaration","scope":531,"src":"750:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":527,"name":"uint48","nodeType":"ElementaryTypeName","src":"750:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"validUntil","nameLocation":"784:10:1","nodeType":"VariableDeclaration","scope":531,"src":"777:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":529,"name":"uint48","nodeType":"ElementaryTypeName","src":"777:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"name":"ValidationData","nameLocation":"697:14:1","nodeType":"StructDefinition","scope":761,"src":"690:111:1","visibility":"public"},{"body":{"id":589,"nodeType":"Block","src":"997:346:1","statements":[{"assignments":[540],"declarations":[{"constant":false,"id":540,"mutability":"mutable","name":"aggregator","nameLocation":"1015:10:1","nodeType":"VariableDeclaration","scope":589,"src":"1007:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":539,"name":"address","nodeType":"ElementaryTypeName","src":"1007:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":548,"initialValue":{"arguments":[{"arguments":[{"id":545,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"1044:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1036:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":543,"name":"uint160","nodeType":"ElementaryTypeName","src":"1036:7:1","typeDescriptions":{}}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1036:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1028:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:1","typeDescriptions":{}}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1028:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1007:53:1"},{"assignments":[550],"declarations":[{"constant":false,"id":550,"mutability":"mutable","name":"validUntil","nameLocation":"1077:10:1","nodeType":"VariableDeclaration","scope":589,"src":"1070:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":549,"name":"uint48","nodeType":"ElementaryTypeName","src":"1070:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":557,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":553,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"1097:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313630","id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1115:3:1","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"1097:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1090:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":551,"name":"uint48","nodeType":"ElementaryTypeName","src":"1090:6:1","typeDescriptions":{}}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1090:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1070:49:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":558,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"1133:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1147:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1133:15:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":570,"nodeType":"IfStatement","src":"1129:75:1","trueBody":{"id":569,"nodeType":"Block","src":"1150:54:1","statements":[{"expression":{"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":561,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"1164:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1182:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":563,"name":"uint48","nodeType":"ElementaryTypeName","src":"1182:6:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":562,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1177:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1177:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"1177:16:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"1164:29:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":568,"nodeType":"ExpressionStatement","src":"1164:29:1"}]}},{"assignments":[572],"declarations":[{"constant":false,"id":572,"mutability":"mutable","name":"validAfter","nameLocation":"1220:10:1","nodeType":"VariableDeclaration","scope":589,"src":"1213:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":571,"name":"uint48","nodeType":"ElementaryTypeName","src":"1213:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":582,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":575,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"1240:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1259:2:1","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"313630","id":577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1264:3:1","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"1259:8:1","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":579,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1258:10:1","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"1240:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1233:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":573,"name":"uint48","nodeType":"ElementaryTypeName","src":"1233:6:1","typeDescriptions":{}}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1233:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1213:56:1"},{"expression":{"arguments":[{"id":584,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"1301:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":585,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"1313:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":586,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"1325:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":583,"name":"ValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"1286:14:1","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ValidationData_$531_storage_ptr_$","typeString":"type(struct ValidationData storage pointer)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1286:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"functionReturnParameters":538,"id":588,"nodeType":"Return","src":"1279:57:1"}]},"id":590,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_parseValidationData","nameLocation":"913:20:1","nodeType":"FunctionDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"validationData","nameLocation":"939:14:1","nodeType":"VariableDeclaration","scope":590,"src":"934:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":532,"name":"uint","nodeType":"ElementaryTypeName","src":"934:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"933:21:1"},"returnParameters":{"id":538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":537,"mutability":"mutable","name":"data","nameLocation":"991:4:1","nodeType":"VariableDeclaration","scope":590,"src":"969:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":536,"nodeType":"UserDefinedTypeName","pathNode":{"id":535,"name":"ValidationData","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"969:14:1"},"referencedDeclaration":531,"src":"969:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"968:28:1"},"scope":761,"src":"904:439:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":674,"nodeType":"Block","src":"1515:804:1","statements":[{"assignments":[602],"declarations":[{"constant":false,"id":602,"mutability":"mutable","name":"accountValidationData","nameLocation":"1547:21:1","nodeType":"VariableDeclaration","scope":674,"src":"1525:43:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":601,"nodeType":"UserDefinedTypeName","pathNode":{"id":600,"name":"ValidationData","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"1525:14:1"},"referencedDeclaration":531,"src":"1525:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"id":606,"initialValue":{"arguments":[{"id":604,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"1592:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":603,"name":"_parseValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"1571:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$531_memory_ptr_$","typeString":"function (uint256) pure returns (struct ValidationData memory)"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1571:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"nodeType":"VariableDeclarationStatement","src":"1525:82:1"},{"assignments":[609],"declarations":[{"constant":false,"id":609,"mutability":"mutable","name":"pmValidationData","nameLocation":"1639:16:1","nodeType":"VariableDeclaration","scope":674,"src":"1617:38:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":608,"nodeType":"UserDefinedTypeName","pathNode":{"id":607,"name":"ValidationData","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"1617:14:1"},"referencedDeclaration":531,"src":"1617:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"id":613,"initialValue":{"arguments":[{"id":611,"name":"paymasterValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"1679:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":610,"name":"_parseValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"1658:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$531_memory_ptr_$","typeString":"function (uint256) pure returns (struct ValidationData memory)"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1658:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"nodeType":"VariableDeclarationStatement","src":"1617:86:1"},{"assignments":[615],"declarations":[{"constant":false,"id":615,"mutability":"mutable","name":"aggregator","nameLocation":"1721:10:1","nodeType":"VariableDeclaration","scope":674,"src":"1713:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":614,"name":"address","nodeType":"ElementaryTypeName","src":"1713:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":618,"initialValue":{"expression":{"id":616,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"1734:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"id":617,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":526,"src":"1734:32:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1713:53:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":619,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"1780:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1802:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1794:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":620,"name":"address","nodeType":"ElementaryTypeName","src":"1794:7:1","typeDescriptions":{}}},"id":623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1794:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1780:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":631,"nodeType":"IfStatement","src":"1776:95:1","trueBody":{"id":630,"nodeType":"Block","src":"1806:65:1","statements":[{"expression":{"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":625,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"1820:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":626,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"1833:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"id":627,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":526,"src":"1833:27:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1820:40:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":629,"nodeType":"ExpressionStatement","src":"1820:40:1"}]}},{"assignments":[633],"declarations":[{"constant":false,"id":633,"mutability":"mutable","name":"validAfter","nameLocation":"1887:10:1","nodeType":"VariableDeclaration","scope":674,"src":"1880:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":632,"name":"uint48","nodeType":"ElementaryTypeName","src":"1880:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":636,"initialValue":{"expression":{"id":634,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"1900:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"id":635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":528,"src":"1900:32:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1880:52:1"},{"assignments":[638],"declarations":[{"constant":false,"id":638,"mutability":"mutable","name":"validUntil","nameLocation":"1949:10:1","nodeType":"VariableDeclaration","scope":674,"src":"1942:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":637,"name":"uint48","nodeType":"ElementaryTypeName","src":"1942:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":641,"initialValue":{"expression":{"id":639,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"1962:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"id":640,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":530,"src":"1962:32:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1942:52:1"},{"assignments":[643],"declarations":[{"constant":false,"id":643,"mutability":"mutable","name":"pmValidAfter","nameLocation":"2011:12:1","nodeType":"VariableDeclaration","scope":674,"src":"2004:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":642,"name":"uint48","nodeType":"ElementaryTypeName","src":"2004:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":646,"initialValue":{"expression":{"id":644,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2026:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"id":645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":528,"src":"2026:27:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"2004:49:1"},{"assignments":[648],"declarations":[{"constant":false,"id":648,"mutability":"mutable","name":"pmValidUntil","nameLocation":"2070:12:1","nodeType":"VariableDeclaration","scope":674,"src":"2063:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":647,"name":"uint48","nodeType":"ElementaryTypeName","src":"2063:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":651,"initialValue":{"expression":{"id":649,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2085:16:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"id":650,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":530,"src":"2085:27:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"2063:49:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":652,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2127:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":653,"name":"pmValidAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"2140:12:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2127:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":659,"nodeType":"IfStatement","src":"2123:56:1","trueBody":{"expression":{"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":655,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2154:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":656,"name":"pmValidAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"2167:12:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2154:25:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":658,"nodeType":"ExpressionStatement","src":"2154:25:1"}},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":660,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"2193:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":661,"name":"pmValidUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"2206:12:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2193:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":667,"nodeType":"IfStatement","src":"2189:56:1","trueBody":{"expression":{"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":663,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"2220:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":664,"name":"pmValidUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"2233:12:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2220:25:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":666,"nodeType":"ExpressionStatement","src":"2220:25:1"}},{"expression":{"arguments":[{"id":669,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"2277:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":670,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2289:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":671,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"2301:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":668,"name":"ValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"2262:14:1","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ValidationData_$531_storage_ptr_$","typeString":"type(struct ValidationData storage pointer)"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2262:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"functionReturnParameters":599,"id":673,"nodeType":"Return","src":"2255:57:1"}]},"id":675,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_intersectTimeRange","nameLocation":"1401:19:1","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"mutability":"mutable","name":"validationData","nameLocation":"1429:14:1","nodeType":"VariableDeclaration","scope":675,"src":"1421:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":591,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":594,"mutability":"mutable","name":"paymasterValidationData","nameLocation":"1453:23:1","nodeType":"VariableDeclaration","scope":675,"src":"1445:31:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":593,"name":"uint256","nodeType":"ElementaryTypeName","src":"1445:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1420:57:1"},"returnParameters":{"id":599,"nodeType":"ParameterList","parameters":[{"constant":false,"id":598,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":675,"src":"1492:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":597,"nodeType":"UserDefinedTypeName","pathNode":{"id":596,"name":"ValidationData","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"1492:14:1"},"referencedDeclaration":531,"src":"1492:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"1491:23:1"},"scope":761,"src":"1392:927:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":711,"nodeType":"Block","src":"2511:127:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":686,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"2536:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"id":687,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":526,"src":"2536:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2528:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":684,"name":"uint160","nodeType":"ElementaryTypeName","src":"2528:7:1","typeDescriptions":{}}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2528:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":691,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"2564:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"id":692,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":530,"src":"2564:15:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2556:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":689,"name":"uint256","nodeType":"ElementaryTypeName","src":"2556:7:1","typeDescriptions":{}}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2556:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2584:3:1","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"2556:31:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":696,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2555:33:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2528:60:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":700,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"2600:4:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData memory"}},"id":701,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":528,"src":"2600:15:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2592:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":698,"name":"uint256","nodeType":"ElementaryTypeName","src":"2592:7:1","typeDescriptions":{}}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2592:24:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"313630","id":703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2621:3:1","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3438","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2627:2:1","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"2621:8:1","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":706,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2620:10:1","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"2592:38:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":708,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2591:40:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2528:103:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":683,"id":710,"nodeType":"Return","src":"2521:110:1"}]},"documentation":{"id":676,"nodeType":"StructuredDocumentation","src":"2321:105:1","text":" helper to pack the return value for validateUserOp\n @param data - the ValidationData to pack"},"id":712,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_packValidationData","nameLocation":"2440:19:1","nodeType":"FunctionDefinition","parameters":{"id":680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"data","nameLocation":"2482:4:1","nodeType":"VariableDeclaration","scope":712,"src":"2460:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":678,"nodeType":"UserDefinedTypeName","pathNode":{"id":677,"name":"ValidationData","nodeType":"IdentifierPath","referencedDeclaration":531,"src":"2460:14:1"},"referencedDeclaration":531,"src":"2460:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$531_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"2459:28:1"},"returnParameters":{"id":683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"2502:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"2502:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2501:9:1"},"scope":761,"src":"2431:207:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":749,"nodeType":"Block","src":"3062:112:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"condition":{"id":724,"name":"sigFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"3080:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3096:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3080:17:1","trueExpression":{"hexValue":"31","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3092:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":728,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3079:19:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":731,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"3110:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3102:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":729,"name":"uint256","nodeType":"ElementaryTypeName","src":"3102:7:1","typeDescriptions":{}}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3102:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3125:3:1","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"3102:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":735,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3101:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3079:50:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":739,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"3141:10:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3133:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":737,"name":"uint256","nodeType":"ElementaryTypeName","src":"3133:7:1","typeDescriptions":{}}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3133:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":743,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"313630","id":741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3157:3:1","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3438","id":742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3163:2:1","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"3157:8:1","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":744,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3156:10:1","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"3133:33:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":746,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3132:35:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3079:88:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":723,"id":748,"nodeType":"Return","src":"3072:95:1"}]},"documentation":{"id":713,"nodeType":"StructuredDocumentation","src":"2640:311:1","text":" helper to pack the return value for validateUserOp, when not using an aggregator\n @param sigFailed - true for signature failure, false for success\n @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n @param validAfter first timestamp this UserOperation is valid"},"id":750,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_packValidationData","nameLocation":"2965:19:1","nodeType":"FunctionDefinition","parameters":{"id":720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"sigFailed","nameLocation":"2990:9:1","nodeType":"VariableDeclaration","scope":750,"src":"2985:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":714,"name":"bool","nodeType":"ElementaryTypeName","src":"2985:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":717,"mutability":"mutable","name":"validUntil","nameLocation":"3008:10:1","nodeType":"VariableDeclaration","scope":750,"src":"3001:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":716,"name":"uint48","nodeType":"ElementaryTypeName","src":"3001:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":719,"mutability":"mutable","name":"validAfter","nameLocation":"3027:10:1","nodeType":"VariableDeclaration","scope":750,"src":"3020:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":718,"name":"uint48","nodeType":"ElementaryTypeName","src":"3020:6:1","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2984:54:1"},"returnParameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":750,"src":"3053:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":721,"name":"uint256","nodeType":"ElementaryTypeName","src":"3053:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3052:9:1"},"scope":761,"src":"2956:218:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":759,"nodeType":"Block","src":"3429:193:1","statements":[{"AST":{"nodeType":"YulBlock","src":"3448:168:1","statements":[{"nodeType":"YulVariableDeclaration","src":"3462:22:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3479:4:1","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:1"},"nodeType":"YulFunctionCall","src":"3473:11:1"},"variables":[{"name":"mem","nodeType":"YulTypedName","src":"3466:3:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3497:22:1","value":{"name":"data.length","nodeType":"YulIdentifier","src":"3508:11:1"},"variables":[{"name":"len","nodeType":"YulTypedName","src":"3501:3:1","type":""}]},{"expression":{"arguments":[{"name":"mem","nodeType":"YulIdentifier","src":"3545:3:1"},{"name":"data.offset","nodeType":"YulIdentifier","src":"3550:11:1"},{"name":"len","nodeType":"YulIdentifier","src":"3563:3:1"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3532:12:1"},"nodeType":"YulFunctionCall","src":"3532:35:1"},"nodeType":"YulExpressionStatement","src":"3532:35:1"},{"nodeType":"YulAssignment","src":"3580:26:1","value":{"arguments":[{"name":"mem","nodeType":"YulIdentifier","src":"3597:3:1"},{"name":"len","nodeType":"YulIdentifier","src":"3602:3:1"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3587:9:1"},"nodeType":"YulFunctionCall","src":"3587:19:1"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3580:3:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":753,"isOffset":false,"isSlot":false,"src":"3508:11:1","suffix":"length","valueSize":1},{"declaration":753,"isOffset":true,"isSlot":false,"src":"3550:11:1","suffix":"offset","valueSize":1},{"declaration":756,"isOffset":false,"isSlot":false,"src":"3580:3:1","valueSize":1}],"id":758,"nodeType":"InlineAssembly","src":"3439:177:1"}]},"documentation":{"id":751,"nodeType":"StructuredDocumentation","src":"3176:176:1","text":" keccak function over calldata.\n @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it."},"id":760,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"calldataKeccak","nameLocation":"3366:14:1","nodeType":"FunctionDefinition","parameters":{"id":754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":753,"mutability":"mutable","name":"data","nameLocation":"3396:4:1","nodeType":"VariableDeclaration","scope":760,"src":"3381:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":752,"name":"bytes","nodeType":"ElementaryTypeName","src":"3381:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3380:21:1"},"returnParameters":{"id":757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":756,"mutability":"mutable","name":"ret","nameLocation":"3424:3:1","nodeType":"VariableDeclaration","scope":760,"src":"3416:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":755,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3416:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3415:13:1"},"scope":761,"src":"3357:265:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"36:3587:1"},"id":1},"contracts/interfaces/IAggregator.sol":{"ast":{"absolutePath":"contracts/interfaces/IAggregator.sol","exportedSymbols":{"IAggregator":[794],"UserOperation":[1149],"UserOperationLib":[1319],"calldataKeccak":[760]},"id":795,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":762,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:2"},{"absolutePath":"contracts/interfaces/UserOperation.sol","file":"./UserOperation.sol","id":763,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":795,"sourceUnit":1320,"src":"62:29:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAggregator","contractDependencies":[],"contractKind":"interface","documentation":{"id":764,"nodeType":"StructuredDocumentation","src":"93:43:2","text":" Aggregated Signatures validator."},"fullyImplemented":false,"id":794,"linearizedBaseContracts":[794],"name":"IAggregator","nameLocation":"147:11:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":765,"nodeType":"StructuredDocumentation","src":"166:136:2","text":" validate aggregated signature.\n revert if the aggregated signature does not match the given list of operations."},"functionSelector":"e3563a4f","id":774,"implemented":false,"kind":"function","modifiers":[],"name":"validateSignatures","nameLocation":"316:18:2","nodeType":"FunctionDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"userOps","nameLocation":"360:7:2","nodeType":"VariableDeclaration","scope":774,"src":"335:32:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_calldata_ptr_$dyn_calldata_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":767,"nodeType":"UserDefinedTypeName","pathNode":{"id":766,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"335:13:2"},"referencedDeclaration":1149,"src":"335:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"id":768,"nodeType":"ArrayTypeName","src":"335:15:2","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"},{"constant":false,"id":771,"mutability":"mutable","name":"signature","nameLocation":"384:9:2","nodeType":"VariableDeclaration","scope":774,"src":"369:24:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":770,"name":"bytes","nodeType":"ElementaryTypeName","src":"369:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"334:60:2"},"returnParameters":{"id":773,"nodeType":"ParameterList","parameters":[],"src":"408:0:2"},"scope":794,"src":"307:102:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"415:576:2","text":" validate signature of a single userOp\n This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n @param userOp the userOperation received from the user.\n @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n    (usually empty, unless account and aggregator support some kind of \"multisig\""},"functionSelector":"64c530cd","id":783,"implemented":false,"kind":"function","modifiers":[],"name":"validateUserOpSignature","nameLocation":"1005:23:2","nodeType":"FunctionDefinition","parameters":{"id":779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"userOp","nameLocation":"1052:6:2","nodeType":"VariableDeclaration","scope":783,"src":"1029:29:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":777,"nodeType":"UserDefinedTypeName","pathNode":{"id":776,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"1029:13:2"},"referencedDeclaration":1149,"src":"1029:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"1028:31:2"},"returnParameters":{"id":782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":781,"mutability":"mutable","name":"sigForUserOp","nameLocation":"1100:12:2","nodeType":"VariableDeclaration","scope":783,"src":"1087:25:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":780,"name":"bytes","nodeType":"ElementaryTypeName","src":"1087:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1086:27:2"},"scope":794,"src":"996:118:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"1120:368:2","text":" aggregate multiple signatures into a single value.\n This method is called off-chain to calculate the signature to pass with handleOps()\n bundler MAY use optimized custom code perform this aggregation\n @param userOps array of UserOperations to collect the signatures from.\n @return aggregatedSignature the aggregated signature"},"functionSelector":"275e2d79","id":793,"implemented":false,"kind":"function","modifiers":[],"name":"aggregateSignatures","nameLocation":"1502:19:2","nodeType":"FunctionDefinition","parameters":{"id":789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":788,"mutability":"mutable","name":"userOps","nameLocation":"1547:7:2","nodeType":"VariableDeclaration","scope":793,"src":"1522:32:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_calldata_ptr_$dyn_calldata_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":786,"nodeType":"UserDefinedTypeName","pathNode":{"id":785,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"1522:13:2"},"referencedDeclaration":1149,"src":"1522:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"id":787,"nodeType":"ArrayTypeName","src":"1522:15:2","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"}],"src":"1521:34:2"},"returnParameters":{"id":792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"aggregatedSignature","nameLocation":"1592:19:2","nodeType":"VariableDeclaration","scope":793,"src":"1579:32:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":790,"name":"bytes","nodeType":"ElementaryTypeName","src":"1579:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1578:34:2"},"scope":794,"src":"1493:120:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":795,"src":"137:1478:2","usedErrors":[]}],"src":"36:1580:2"},"id":2},"contracts/interfaces/IEntryPoint.sol":{"ast":{"absolutePath":"contracts/interfaces/IEntryPoint.sol","exportedSymbols":{"IAggregator":[794],"IEntryPoint":[998],"INonceManager":[1017],"IStakeManager":[1122],"UserOperation":[1149],"UserOperationLib":[1319],"calldataKeccak":[760]},"id":999,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":796,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"163:24:3"},{"absolutePath":"contracts/interfaces/UserOperation.sol","file":"./UserOperation.sol","id":797,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":999,"sourceUnit":1320,"src":"311:29:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IStakeManager.sol","file":"./IStakeManager.sol","id":798,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":999,"sourceUnit":1123,"src":"341:29:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IAggregator.sol","file":"./IAggregator.sol","id":799,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":999,"sourceUnit":795,"src":"371:27:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/INonceManager.sol","file":"./INonceManager.sol","id":800,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":999,"sourceUnit":1018,"src":"399:29:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":801,"name":"IStakeManager","nodeType":"IdentifierPath","referencedDeclaration":1122,"src":"455:13:3"},"id":802,"nodeType":"InheritanceSpecifier","src":"455:13:3"},{"baseName":{"id":803,"name":"INonceManager","nodeType":"IdentifierPath","referencedDeclaration":1017,"src":"470:13:3"},"id":804,"nodeType":"InheritanceSpecifier","src":"470:13:3"}],"canonicalName":"IEntryPoint","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":998,"linearizedBaseContracts":[998,1017,1122],"name":"IEntryPoint","nameLocation":"440:11:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f","id":820,"name":"UserOperationEvent","nameLocation":"1191:18:3","nodeType":"EventDefinition","parameters":{"id":819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"indexed":true,"mutability":"mutable","name":"userOpHash","nameLocation":"1226:10:3","nodeType":"VariableDeclaration","scope":820,"src":"1210:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1210:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":808,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1254:6:3","nodeType":"VariableDeclaration","scope":820,"src":"1238:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":807,"name":"address","nodeType":"ElementaryTypeName","src":"1238:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":810,"indexed":true,"mutability":"mutable","name":"paymaster","nameLocation":"1278:9:3","nodeType":"VariableDeclaration","scope":820,"src":"1262:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"1262:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":812,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"1297:5:3","nodeType":"VariableDeclaration","scope":820,"src":"1289:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":811,"name":"uint256","nodeType":"ElementaryTypeName","src":"1289:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":814,"indexed":false,"mutability":"mutable","name":"success","nameLocation":"1309:7:3","nodeType":"VariableDeclaration","scope":820,"src":"1304:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":813,"name":"bool","nodeType":"ElementaryTypeName","src":"1304:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":816,"indexed":false,"mutability":"mutable","name":"actualGasCost","nameLocation":"1326:13:3","nodeType":"VariableDeclaration","scope":820,"src":"1318:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":815,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":818,"indexed":false,"mutability":"mutable","name":"actualGasUsed","nameLocation":"1349:13:3","nodeType":"VariableDeclaration","scope":820,"src":"1341:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":817,"name":"uint256","nodeType":"ElementaryTypeName","src":"1341:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1209:154:3"},"src":"1185:179:3"},{"anonymous":false,"documentation":{"id":821,"nodeType":"StructuredDocumentation","src":"1370:333:3","text":" account \"sender\" was deployed.\n @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n @param sender the account that is deployed\n @param factory the factory used to deploy this account (in the initCode)\n @param paymaster the paymaster used by this UserOp"},"eventSelector":"d51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d","id":831,"name":"AccountDeployed","nameLocation":"1714:15:3","nodeType":"EventDefinition","parameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":823,"indexed":true,"mutability":"mutable","name":"userOpHash","nameLocation":"1746:10:3","nodeType":"VariableDeclaration","scope":831,"src":"1730:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":822,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1730:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":825,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1774:6:3","nodeType":"VariableDeclaration","scope":831,"src":"1758:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":824,"name":"address","nodeType":"ElementaryTypeName","src":"1758:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":827,"indexed":false,"mutability":"mutable","name":"factory","nameLocation":"1790:7:3","nodeType":"VariableDeclaration","scope":831,"src":"1782:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":826,"name":"address","nodeType":"ElementaryTypeName","src":"1782:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":829,"indexed":false,"mutability":"mutable","name":"paymaster","nameLocation":"1807:9:3","nodeType":"VariableDeclaration","scope":831,"src":"1799:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":828,"name":"address","nodeType":"ElementaryTypeName","src":"1799:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1729:88:3"},"src":"1708:110:3"},{"anonymous":false,"documentation":{"id":832,"nodeType":"StructuredDocumentation","src":"1824:337:3","text":" An event emitted if the UserOperation \"callData\" reverted with non-zero length\n @param userOpHash the request unique identifier.\n @param sender the sender of this request\n @param nonce the nonce used in the request\n @param revertReason - the return bytes from the (reverted) call to \"callData\"."},"eventSelector":"1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201","id":842,"name":"UserOperationRevertReason","nameLocation":"2172:25:3","nodeType":"EventDefinition","parameters":{"id":841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":834,"indexed":true,"mutability":"mutable","name":"userOpHash","nameLocation":"2214:10:3","nodeType":"VariableDeclaration","scope":842,"src":"2198:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":833,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2198:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":836,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2242:6:3","nodeType":"VariableDeclaration","scope":842,"src":"2226:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":835,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":838,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"2258:5:3","nodeType":"VariableDeclaration","scope":842,"src":"2250:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":837,"name":"uint256","nodeType":"ElementaryTypeName","src":"2250:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":840,"indexed":false,"mutability":"mutable","name":"revertReason","nameLocation":"2271:12:3","nodeType":"VariableDeclaration","scope":842,"src":"2265:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":839,"name":"bytes","nodeType":"ElementaryTypeName","src":"2265:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2197:87:3"},"src":"2166:119:3"},{"anonymous":false,"documentation":{"id":843,"nodeType":"StructuredDocumentation","src":"2291:158:3","text":" an event emitted by handleOps(), before starting the execution loop.\n any event emitted before this event, is part of the validation."},"eventSelector":"bb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972","id":845,"name":"BeforeExecution","nameLocation":"2460:15:3","nodeType":"EventDefinition","parameters":{"id":844,"nodeType":"ParameterList","parameters":[],"src":"2475:2:3"},"src":"2454:24:3"},{"anonymous":false,"documentation":{"id":846,"nodeType":"StructuredDocumentation","src":"2484:101:3","text":" signature aggregator used by the following UserOperationEvents within this bundle."},"eventSelector":"575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d","id":850,"name":"SignatureAggregatorChanged","nameLocation":"2596:26:3","nodeType":"EventDefinition","parameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"indexed":true,"mutability":"mutable","name":"aggregator","nameLocation":"2639:10:3","nodeType":"VariableDeclaration","scope":850,"src":"2623:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"2623:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2622:28:3"},"src":"2590:61:3"},{"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"2657:756:3","text":" a custom revert error of handleOps, to identify the offending op.\n  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n  @param reason - revert reason\n      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n      so a failure can be attributed to the correct entity.\n   Should be caught in off-chain handleOps simulation and not happen on-chain.\n   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."},"errorSelector":"220266b6","id":857,"name":"FailedOp","nameLocation":"3424:8:3","nodeType":"ErrorDefinition","parameters":{"id":856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"opIndex","nameLocation":"3441:7:3","nodeType":"VariableDeclaration","scope":857,"src":"3433:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":852,"name":"uint256","nodeType":"ElementaryTypeName","src":"3433:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"reason","nameLocation":"3457:6:3","nodeType":"VariableDeclaration","scope":857,"src":"3450:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":854,"name":"string","nodeType":"ElementaryTypeName","src":"3450:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3432:32:3"},"src":"3418:47:3"},{"documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"3471:114:3","text":" error case when a signature aggregator fails to verify the aggregated signature it had created."},"errorSelector":"86a9f750","id":862,"name":"SignatureValidationFailed","nameLocation":"3596:25:3","nodeType":"ErrorDefinition","parameters":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":860,"mutability":"mutable","name":"aggregator","nameLocation":"3630:10:3","nodeType":"VariableDeclaration","scope":862,"src":"3622:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":859,"name":"address","nodeType":"ElementaryTypeName","src":"3622:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3621:20:3"},"src":"3590:52:3"},{"documentation":{"id":863,"nodeType":"StructuredDocumentation","src":"3648:327:3","text":" Successful result from simulateValidation.\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)"},"errorSelector":"e0cff05f","id":877,"name":"ValidationResult","nameLocation":"3986:16:3","nodeType":"ErrorDefinition","parameters":{"id":876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":866,"mutability":"mutable","name":"returnInfo","nameLocation":"4014:10:3","nodeType":"VariableDeclaration","scope":877,"src":"4003:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$974_memory_ptr","typeString":"struct IEntryPoint.ReturnInfo"},"typeName":{"id":865,"nodeType":"UserDefinedTypeName","pathNode":{"id":864,"name":"ReturnInfo","nodeType":"IdentifierPath","referencedDeclaration":974,"src":"4003:10:3"},"referencedDeclaration":974,"src":"4003:10:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$974_storage_ptr","typeString":"struct IEntryPoint.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":869,"mutability":"mutable","name":"senderInfo","nameLocation":"4044:10:3","nodeType":"VariableDeclaration","scope":877,"src":"4034:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":868,"nodeType":"UserDefinedTypeName","pathNode":{"id":867,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":1074,"src":"4034:9:3"},"referencedDeclaration":1074,"src":"4034:9:3","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":872,"mutability":"mutable","name":"factoryInfo","nameLocation":"4066:11:3","nodeType":"VariableDeclaration","scope":877,"src":"4056:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":871,"nodeType":"UserDefinedTypeName","pathNode":{"id":870,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":1074,"src":"4056:9:3"},"referencedDeclaration":1074,"src":"4056:9:3","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"paymasterInfo","nameLocation":"4089:13:3","nodeType":"VariableDeclaration","scope":877,"src":"4079:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":874,"nodeType":"UserDefinedTypeName","pathNode":{"id":873,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":1074,"src":"4079:9:3"},"referencedDeclaration":1074,"src":"4079:9:3","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"}],"src":"4002:101:3"},"src":"3980:124:3"},{"documentation":{"id":878,"nodeType":"StructuredDocumentation","src":"4110:561:3","text":" Successful result from simulateValidation, if the account returns a signature aggregator\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)\n @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n      bundler MUST use it to verify the signature, or reject the UserOperation"},"errorSelector":"faecb4e4","id":895,"name":"ValidationResultWithAggregation","nameLocation":"4682:31:3","nodeType":"ErrorDefinition","parameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":881,"mutability":"mutable","name":"returnInfo","nameLocation":"4725:10:3","nodeType":"VariableDeclaration","scope":895,"src":"4714:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$974_memory_ptr","typeString":"struct IEntryPoint.ReturnInfo"},"typeName":{"id":880,"nodeType":"UserDefinedTypeName","pathNode":{"id":879,"name":"ReturnInfo","nodeType":"IdentifierPath","referencedDeclaration":974,"src":"4714:10:3"},"referencedDeclaration":974,"src":"4714:10:3","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$974_storage_ptr","typeString":"struct IEntryPoint.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":884,"mutability":"mutable","name":"senderInfo","nameLocation":"4755:10:3","nodeType":"VariableDeclaration","scope":895,"src":"4745:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":883,"nodeType":"UserDefinedTypeName","pathNode":{"id":882,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":1074,"src":"4745:9:3"},"referencedDeclaration":1074,"src":"4745:9:3","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"factoryInfo","nameLocation":"4777:11:3","nodeType":"VariableDeclaration","scope":895,"src":"4767:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":886,"nodeType":"UserDefinedTypeName","pathNode":{"id":885,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":1074,"src":"4767:9:3"},"referencedDeclaration":1074,"src":"4767:9:3","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":890,"mutability":"mutable","name":"paymasterInfo","nameLocation":"4800:13:3","nodeType":"VariableDeclaration","scope":895,"src":"4790:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":889,"nodeType":"UserDefinedTypeName","pathNode":{"id":888,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":1074,"src":"4790:9:3"},"referencedDeclaration":1074,"src":"4790:9:3","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"aggregatorInfo","nameLocation":"4843:14:3","nodeType":"VariableDeclaration","scope":895,"src":"4823:34:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$980_memory_ptr","typeString":"struct IEntryPoint.AggregatorStakeInfo"},"typeName":{"id":892,"nodeType":"UserDefinedTypeName","pathNode":{"id":891,"name":"AggregatorStakeInfo","nodeType":"IdentifierPath","referencedDeclaration":980,"src":"4823:19:3"},"referencedDeclaration":980,"src":"4823:19:3","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$980_storage_ptr","typeString":"struct IEntryPoint.AggregatorStakeInfo"}},"visibility":"internal"}],"src":"4713:145:3"},"src":"4676:183:3"},{"documentation":{"id":896,"nodeType":"StructuredDocumentation","src":"4865:51:3","text":" return value of getSenderAddress"},"errorSelector":"6ca7b806","id":900,"name":"SenderAddressResult","nameLocation":"4927:19:3","nodeType":"ErrorDefinition","parameters":{"id":899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":898,"mutability":"mutable","name":"sender","nameLocation":"4955:6:3","nodeType":"VariableDeclaration","scope":900,"src":"4947:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":897,"name":"address","nodeType":"ElementaryTypeName","src":"4947:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4946:16:3"},"src":"4921:42:3"},{"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"4969:51:3","text":" return value of simulateHandleOp"},"errorSelector":"8b7ac980","id":915,"name":"ExecutionResult","nameLocation":"5031:15:3","nodeType":"ErrorDefinition","parameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"preOpGas","nameLocation":"5055:8:3","nodeType":"VariableDeclaration","scope":915,"src":"5047:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"5047:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":905,"mutability":"mutable","name":"paid","nameLocation":"5073:4:3","nodeType":"VariableDeclaration","scope":915,"src":"5065:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":904,"name":"uint256","nodeType":"ElementaryTypeName","src":"5065:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":907,"mutability":"mutable","name":"validAfter","nameLocation":"5086:10:3","nodeType":"VariableDeclaration","scope":915,"src":"5079:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":906,"name":"uint48","nodeType":"ElementaryTypeName","src":"5079:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":909,"mutability":"mutable","name":"validUntil","nameLocation":"5105:10:3","nodeType":"VariableDeclaration","scope":915,"src":"5098:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":908,"name":"uint48","nodeType":"ElementaryTypeName","src":"5098:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":911,"mutability":"mutable","name":"targetSuccess","nameLocation":"5122:13:3","nodeType":"VariableDeclaration","scope":915,"src":"5117:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":910,"name":"bool","nodeType":"ElementaryTypeName","src":"5117:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"targetResult","nameLocation":"5143:12:3","nodeType":"VariableDeclaration","scope":915,"src":"5137:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":912,"name":"bytes","nodeType":"ElementaryTypeName","src":"5137:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5046:110:3"},"src":"5025:132:3"},{"canonicalName":"IEntryPoint.UserOpsPerAggregator","id":925,"members":[{"constant":false,"id":919,"mutability":"mutable","name":"userOps","nameLocation":"5255:7:3","nodeType":"VariableDeclaration","scope":925,"src":"5239:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":917,"nodeType":"UserDefinedTypeName","pathNode":{"id":916,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"5239:13:3"},"referencedDeclaration":1149,"src":"5239:13:3","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"id":918,"nodeType":"ArrayTypeName","src":"5239:15:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"},{"constant":false,"id":922,"mutability":"mutable","name":"aggregator","nameLocation":"5315:10:3","nodeType":"VariableDeclaration","scope":925,"src":"5303:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAggregator_$794","typeString":"contract IAggregator"},"typeName":{"id":921,"nodeType":"UserDefinedTypeName","pathNode":{"id":920,"name":"IAggregator","nodeType":"IdentifierPath","referencedDeclaration":794,"src":"5303:11:3"},"referencedDeclaration":794,"src":"5303:11:3","typeDescriptions":{"typeIdentifier":"t_contract$_IAggregator_$794","typeString":"contract IAggregator"}},"visibility":"internal"},{"constant":false,"id":924,"mutability":"mutable","name":"signature","nameLocation":"5373:9:3","nodeType":"VariableDeclaration","scope":925,"src":"5367:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":923,"name":"bytes","nodeType":"ElementaryTypeName","src":"5367:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"UserOpsPerAggregator","nameLocation":"5208:20:3","nodeType":"StructDefinition","scope":998,"src":"5201:188:3","visibility":"public"},{"documentation":{"id":926,"nodeType":"StructuredDocumentation","src":"5395:368:3","text":" Execute a batch of UserOperation.\n no signature aggregator is used.\n if any account requires an aggregator (that is, it returned an aggregator when\n performing simulateValidation), then handleAggregatedOps() must be used instead.\n @param ops the operations to execute\n @param beneficiary the address to receive the fees"},"functionSelector":"1fad948c","id":935,"implemented":false,"kind":"function","modifiers":[],"name":"handleOps","nameLocation":"5777:9:3","nodeType":"FunctionDefinition","parameters":{"id":933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"ops","nameLocation":"5812:3:3","nodeType":"VariableDeclaration","scope":935,"src":"5787:28:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_calldata_ptr_$dyn_calldata_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":928,"nodeType":"UserDefinedTypeName","pathNode":{"id":927,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"5787:13:3"},"referencedDeclaration":1149,"src":"5787:13:3","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"id":929,"nodeType":"ArrayTypeName","src":"5787:15:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$1149_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"},{"constant":false,"id":932,"mutability":"mutable","name":"beneficiary","nameLocation":"5833:11:3","nodeType":"VariableDeclaration","scope":935,"src":"5817:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":931,"name":"address","nodeType":"ElementaryTypeName","src":"5817:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"5786:59:3"},"returnParameters":{"id":934,"nodeType":"ParameterList","parameters":[],"src":"5854:0:3"},"scope":998,"src":"5768:87:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"5861:249:3","text":" Execute a batch of UserOperation with Aggregators\n @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n @param beneficiary the address to receive the fees"},"functionSelector":"4b1d7cf5","id":945,"implemented":false,"kind":"function","modifiers":[],"name":"handleAggregatedOps","nameLocation":"6124:19:3","nodeType":"FunctionDefinition","parameters":{"id":943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"opsPerAggregator","nameLocation":"6185:16:3","nodeType":"VariableDeclaration","scope":945,"src":"6153:48:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOpsPerAggregator_$925_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IEntryPoint.UserOpsPerAggregator[]"},"typeName":{"baseType":{"id":938,"nodeType":"UserDefinedTypeName","pathNode":{"id":937,"name":"UserOpsPerAggregator","nodeType":"IdentifierPath","referencedDeclaration":925,"src":"6153:20:3"},"referencedDeclaration":925,"src":"6153:20:3","typeDescriptions":{"typeIdentifier":"t_struct$_UserOpsPerAggregator_$925_storage_ptr","typeString":"struct IEntryPoint.UserOpsPerAggregator"}},"id":939,"nodeType":"ArrayTypeName","src":"6153:22:3","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOpsPerAggregator_$925_storage_$dyn_storage_ptr","typeString":"struct IEntryPoint.UserOpsPerAggregator[]"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"beneficiary","nameLocation":"6227:11:3","nodeType":"VariableDeclaration","scope":945,"src":"6211:27:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":941,"name":"address","nodeType":"ElementaryTypeName","src":"6211:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"6143:101:3"},"returnParameters":{"id":944,"nodeType":"ParameterList","parameters":[],"src":"6253:0:3"},"scope":998,"src":"6115:139:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":946,"nodeType":"StructuredDocumentation","src":"6260:197:3","text":" generate a request Id - unique identifier for this request.\n the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."},"functionSelector":"a6193531","id":954,"implemented":false,"kind":"function","modifiers":[],"name":"getUserOpHash","nameLocation":"6471:13:3","nodeType":"FunctionDefinition","parameters":{"id":950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":949,"mutability":"mutable","name":"userOp","nameLocation":"6508:6:3","nodeType":"VariableDeclaration","scope":954,"src":"6485:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":948,"nodeType":"UserDefinedTypeName","pathNode":{"id":947,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"6485:13:3"},"referencedDeclaration":1149,"src":"6485:13:3","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"6484:31:3"},"returnParameters":{"id":953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":954,"src":"6539:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":951,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6539:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6538:9:3"},"scope":998,"src":"6462:86:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":955,"nodeType":"StructuredDocumentation","src":"6554:398:3","text":" Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n @param userOp the user operation to validate."},"functionSelector":"ee219423","id":961,"implemented":false,"kind":"function","modifiers":[],"name":"simulateValidation","nameLocation":"6966:18:3","nodeType":"FunctionDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":958,"mutability":"mutable","name":"userOp","nameLocation":"7008:6:3","nodeType":"VariableDeclaration","scope":961,"src":"6985:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":957,"nodeType":"UserDefinedTypeName","pathNode":{"id":956,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"6985:13:3"},"referencedDeclaration":1149,"src":"6985:13:3","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"6984:31:3"},"returnParameters":{"id":960,"nodeType":"ParameterList","parameters":[],"src":"7024:0:3"},"scope":998,"src":"6957:68:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"canonicalName":"IEntryPoint.ReturnInfo","id":974,"members":[{"constant":false,"id":963,"mutability":"mutable","name":"preOpGas","nameLocation":"7660:8:3","nodeType":"VariableDeclaration","scope":974,"src":"7652:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":962,"name":"uint256","nodeType":"ElementaryTypeName","src":"7652:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":965,"mutability":"mutable","name":"prefund","nameLocation":"7686:7:3","nodeType":"VariableDeclaration","scope":974,"src":"7678:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":964,"name":"uint256","nodeType":"ElementaryTypeName","src":"7678:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":967,"mutability":"mutable","name":"sigFailed","nameLocation":"7708:9:3","nodeType":"VariableDeclaration","scope":974,"src":"7703:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":966,"name":"bool","nodeType":"ElementaryTypeName","src":"7703:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"validAfter","nameLocation":"7734:10:3","nodeType":"VariableDeclaration","scope":974,"src":"7727:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":968,"name":"uint48","nodeType":"ElementaryTypeName","src":"7727:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":971,"mutability":"mutable","name":"validUntil","nameLocation":"7761:10:3","nodeType":"VariableDeclaration","scope":974,"src":"7754:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":970,"name":"uint48","nodeType":"ElementaryTypeName","src":"7754:6:3","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":973,"mutability":"mutable","name":"paymasterContext","nameLocation":"7787:16:3","nodeType":"VariableDeclaration","scope":974,"src":"7781:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":972,"name":"bytes","nodeType":"ElementaryTypeName","src":"7781:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"ReturnInfo","nameLocation":"7631:10:3","nodeType":"StructDefinition","scope":998,"src":"7624:186:3","visibility":"public"},{"canonicalName":"IEntryPoint.AggregatorStakeInfo","id":980,"members":[{"constant":false,"id":976,"mutability":"mutable","name":"aggregator","nameLocation":"7990:10:3","nodeType":"VariableDeclaration","scope":980,"src":"7982:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":975,"name":"address","nodeType":"ElementaryTypeName","src":"7982:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":979,"mutability":"mutable","name":"stakeInfo","nameLocation":"8020:9:3","nodeType":"VariableDeclaration","scope":980,"src":"8010:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_storage_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":978,"nodeType":"UserDefinedTypeName","pathNode":{"id":977,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":1074,"src":"8010:9:3"},"referencedDeclaration":1074,"src":"8010:9:3","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$1074_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"}],"name":"AggregatorStakeInfo","nameLocation":"7952:19:3","nodeType":"StructDefinition","scope":998,"src":"7945:91:3","visibility":"public"},{"documentation":{"id":981,"nodeType":"StructuredDocumentation","src":"8042:337:3","text":" Get counterfactual sender address.\n  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n this method always revert, and returns the address in SenderAddressResult error\n @param initCode the constructor code to be passed into the UserOperation."},"functionSelector":"9b249f69","id":986,"implemented":false,"kind":"function","modifiers":[],"name":"getSenderAddress","nameLocation":"8393:16:3","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"initCode","nameLocation":"8423:8:3","nodeType":"VariableDeclaration","scope":986,"src":"8410:21:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":982,"name":"bytes","nodeType":"ElementaryTypeName","src":"8410:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8409:23:3"},"returnParameters":{"id":985,"nodeType":"ParameterList","parameters":[],"src":"8441:0:3"},"scope":998,"src":"8384:58:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"8449:847:3","text":" simulate full execution of a UserOperation (including both validation and target execution)\n this method will always revert with \"ExecutionResult\".\n it performs full validation of the UserOperation, but ignores signature error.\n an optional target address is called after the userop succeeds, and its value is returned\n (before the entire call is reverted)\n Note that in order to collect the the success/failure of the target call, it must be executed\n with trace enabled to track the emitted events.\n @param op the UserOperation to simulate\n @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\n        are set to the return from that call.\n @param targetCallData callData to pass to target address"},"functionSelector":"d6383f94","id":997,"implemented":false,"kind":"function","modifiers":[],"name":"simulateHandleOp","nameLocation":"9310:16:3","nodeType":"FunctionDefinition","parameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"op","nameLocation":"9350:2:3","nodeType":"VariableDeclaration","scope":997,"src":"9327:25:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":989,"nodeType":"UserDefinedTypeName","pathNode":{"id":988,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"9327:13:3"},"referencedDeclaration":1149,"src":"9327:13:3","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":992,"mutability":"mutable","name":"target","nameLocation":"9362:6:3","nodeType":"VariableDeclaration","scope":997,"src":"9354:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"9354:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"targetCallData","nameLocation":"9385:14:3","nodeType":"VariableDeclaration","scope":997,"src":"9370:29:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":993,"name":"bytes","nodeType":"ElementaryTypeName","src":"9370:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9326:74:3"},"returnParameters":{"id":996,"nodeType":"ParameterList","parameters":[],"src":"9409:0:3"},"scope":998,"src":"9301:109:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":999,"src":"430:8982:3","usedErrors":[857,862,877,895,900,915]}],"src":"163:9251:3"},"id":3},"contracts/interfaces/INonceManager.sol":{"ast":{"absolutePath":"contracts/interfaces/INonceManager.sol","exportedSymbols":{"INonceManager":[1017]},"id":1018,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":1000,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"INonceManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1017,"linearizedBaseContracts":[1017],"name":"INonceManager","nameLocation":"72:13:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1001,"nodeType":"StructuredDocumentation","src":"93:416:4","text":" Return the next nonce for this sender.\n Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n But UserOp with different keys can come with arbitrary order.\n @param sender the account address\n @param key the high 192 bit of the nonce\n @return nonce a full nonce to pass for next UserOp with this sender."},"functionSelector":"35567e1a","id":1010,"implemented":false,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"523:8:4","nodeType":"FunctionDefinition","parameters":{"id":1006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1003,"mutability":"mutable","name":"sender","nameLocation":"540:6:4","nodeType":"VariableDeclaration","scope":1010,"src":"532:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1002,"name":"address","nodeType":"ElementaryTypeName","src":"532:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1005,"mutability":"mutable","name":"key","nameLocation":"556:3:4","nodeType":"VariableDeclaration","scope":1010,"src":"548:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":1004,"name":"uint192","nodeType":"ElementaryTypeName","src":"548:7:4","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"531:29:4"},"returnParameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1008,"mutability":"mutable","name":"nonce","nameLocation":"596:5:4","nodeType":"VariableDeclaration","scope":1010,"src":"588:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1007,"name":"uint256","nodeType":"ElementaryTypeName","src":"588:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"587:15:4"},"scope":1017,"src":"514:89:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1011,"nodeType":"StructuredDocumentation","src":"609:449:4","text":" Manually increment the nonce of the sender.\n This method is exposed just for completeness..\n Account does NOT need to call it, neither during validation, nor elsewhere,\n as the EntryPoint will update the nonce regardless.\n Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n UserOperations will not pay extra for the first transaction with a given key."},"functionSelector":"0bd28e3b","id":1016,"implemented":false,"kind":"function","modifiers":[],"name":"incrementNonce","nameLocation":"1072:14:4","nodeType":"FunctionDefinition","parameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"key","nameLocation":"1095:3:4","nodeType":"VariableDeclaration","scope":1016,"src":"1087:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":1012,"name":"uint192","nodeType":"ElementaryTypeName","src":"1087:7:4","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"1086:13:4"},"returnParameters":{"id":1015,"nodeType":"ParameterList","parameters":[],"src":"1108:0:4"},"scope":1017,"src":"1063:46:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1018,"src":"62:1049:4","usedErrors":[]}],"src":"36:1076:4"},"id":4},"contracts/interfaces/IStakeManager.sol":{"ast":{"absolutePath":"contracts/interfaces/IStakeManager.sol","exportedSymbols":{"IStakeManager":[1122]},"id":1123,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1019,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"41:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IStakeManager","contractDependencies":[],"contractKind":"interface","documentation":{"id":1020,"nodeType":"StructuredDocumentation","src":"67:211:5","text":" manage deposits and stakes.\n deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n stake is value locked for at least \"unstakeDelay\" by the staked entity."},"fullyImplemented":false,"id":1122,"linearizedBaseContracts":[1122],"name":"IStakeManager","nameLocation":"289:13:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4","id":1026,"name":"Deposited","nameLocation":"316:9:5","nodeType":"EventDefinition","parameters":{"id":1025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1022,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"351:7:5","nodeType":"VariableDeclaration","scope":1026,"src":"335:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1021,"name":"address","nodeType":"ElementaryTypeName","src":"335:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1024,"indexed":false,"mutability":"mutable","name":"totalDeposit","nameLocation":"376:12:5","nodeType":"VariableDeclaration","scope":1026,"src":"368:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1023,"name":"uint256","nodeType":"ElementaryTypeName","src":"368:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"325:69:5"},"src":"310:85:5"},{"anonymous":false,"eventSelector":"d1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb","id":1034,"name":"Withdrawn","nameLocation":"407:9:5","nodeType":"EventDefinition","parameters":{"id":1033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"442:7:5","nodeType":"VariableDeclaration","scope":1034,"src":"426:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1027,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1030,"indexed":false,"mutability":"mutable","name":"withdrawAddress","nameLocation":"467:15:5","nodeType":"VariableDeclaration","scope":1034,"src":"459:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1029,"name":"address","nodeType":"ElementaryTypeName","src":"459:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1032,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"500:6:5","nodeType":"VariableDeclaration","scope":1034,"src":"492:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1031,"name":"uint256","nodeType":"ElementaryTypeName","src":"492:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"416:96:5"},"src":"401:112:5"},{"anonymous":false,"documentation":{"id":1035,"nodeType":"StructuredDocumentation","src":"519:52:5","text":"Emitted when stake or unstake delay are modified"},"eventSelector":"a5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01","id":1043,"name":"StakeLocked","nameLocation":"582:11:5","nodeType":"EventDefinition","parameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"619:7:5","nodeType":"VariableDeclaration","scope":1043,"src":"603:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1039,"indexed":false,"mutability":"mutable","name":"totalStaked","nameLocation":"644:11:5","nodeType":"VariableDeclaration","scope":1043,"src":"636:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1038,"name":"uint256","nodeType":"ElementaryTypeName","src":"636:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1041,"indexed":false,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"673:15:5","nodeType":"VariableDeclaration","scope":1043,"src":"665:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1040,"name":"uint256","nodeType":"ElementaryTypeName","src":"665:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"593:101:5"},"src":"576:119:5"},{"anonymous":false,"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"701:52:5","text":"Emitted once a stake is scheduled for withdrawal"},"eventSelector":"fa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a","id":1050,"name":"StakeUnlocked","nameLocation":"764:13:5","nodeType":"EventDefinition","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"803:7:5","nodeType":"VariableDeclaration","scope":1050,"src":"787:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1045,"name":"address","nodeType":"ElementaryTypeName","src":"787:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1048,"indexed":false,"mutability":"mutable","name":"withdrawTime","nameLocation":"828:12:5","nodeType":"VariableDeclaration","scope":1050,"src":"820:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"777:69:5"},"src":"758:89:5"},{"anonymous":false,"eventSelector":"b7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3","id":1058,"name":"StakeWithdrawn","nameLocation":"859:14:5","nodeType":"EventDefinition","parameters":{"id":1057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1052,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"899:7:5","nodeType":"VariableDeclaration","scope":1058,"src":"883:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1051,"name":"address","nodeType":"ElementaryTypeName","src":"883:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1054,"indexed":false,"mutability":"mutable","name":"withdrawAddress","nameLocation":"924:15:5","nodeType":"VariableDeclaration","scope":1058,"src":"916:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1053,"name":"address","nodeType":"ElementaryTypeName","src":"916:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1056,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"957:6:5","nodeType":"VariableDeclaration","scope":1058,"src":"949:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1055,"name":"uint256","nodeType":"ElementaryTypeName","src":"949:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"873:96:5"},"src":"853:117:5"},{"canonicalName":"IStakeManager.DepositInfo","id":1069,"members":[{"constant":false,"id":1060,"mutability":"mutable","name":"deposit","nameLocation":"1650:7:5","nodeType":"VariableDeclaration","scope":1069,"src":"1642:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":1059,"name":"uint112","nodeType":"ElementaryTypeName","src":"1642:7:5","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":1062,"mutability":"mutable","name":"staked","nameLocation":"1672:6:5","nodeType":"VariableDeclaration","scope":1069,"src":"1667:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1061,"name":"bool","nodeType":"ElementaryTypeName","src":"1667:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1064,"mutability":"mutable","name":"stake","nameLocation":"1696:5:5","nodeType":"VariableDeclaration","scope":1069,"src":"1688:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":1063,"name":"uint112","nodeType":"ElementaryTypeName","src":"1688:7:5","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":1066,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"1718:15:5","nodeType":"VariableDeclaration","scope":1069,"src":"1711:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1065,"name":"uint32","nodeType":"ElementaryTypeName","src":"1711:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":1068,"mutability":"mutable","name":"withdrawTime","nameLocation":"1750:12:5","nodeType":"VariableDeclaration","scope":1069,"src":"1743:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":1067,"name":"uint48","nodeType":"ElementaryTypeName","src":"1743:6:5","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"name":"DepositInfo","nameLocation":"1620:11:5","nodeType":"StructDefinition","scope":1122,"src":"1613:156:5","visibility":"public"},{"canonicalName":"IStakeManager.StakeInfo","id":1074,"members":[{"constant":false,"id":1071,"mutability":"mutable","name":"stake","nameLocation":"1871:5:5","nodeType":"VariableDeclaration","scope":1074,"src":"1863:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1070,"name":"uint256","nodeType":"ElementaryTypeName","src":"1863:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1073,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"1894:15:5","nodeType":"VariableDeclaration","scope":1074,"src":"1886:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1072,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StakeInfo","nameLocation":"1843:9:5","nodeType":"StructDefinition","scope":1122,"src":"1836:80:5","visibility":"public"},{"documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"1922:60:5","text":"@return info - full deposit information of given account"},"functionSelector":"5287ce12","id":1083,"implemented":false,"kind":"function","modifiers":[],"name":"getDepositInfo","nameLocation":"1996:14:5","nodeType":"FunctionDefinition","parameters":{"id":1078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1077,"mutability":"mutable","name":"account","nameLocation":"2019:7:5","nodeType":"VariableDeclaration","scope":1083,"src":"2011:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"2011:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2010:17:5"},"returnParameters":{"id":1082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1081,"mutability":"mutable","name":"info","nameLocation":"2070:4:5","nodeType":"VariableDeclaration","scope":1083,"src":"2051:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DepositInfo_$1069_memory_ptr","typeString":"struct IStakeManager.DepositInfo"},"typeName":{"id":1080,"nodeType":"UserDefinedTypeName","pathNode":{"id":1079,"name":"DepositInfo","nodeType":"IdentifierPath","referencedDeclaration":1069,"src":"2051:11:5"},"referencedDeclaration":1069,"src":"2051:11:5","typeDescriptions":{"typeIdentifier":"t_struct$_DepositInfo_$1069_storage_ptr","typeString":"struct IStakeManager.DepositInfo"}},"visibility":"internal"}],"src":"2050:25:5"},"scope":1122,"src":"1987:89:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1084,"nodeType":"StructuredDocumentation","src":"2082:56:5","text":"@return the deposit (for gas payment) of the account"},"functionSelector":"70a08231","id":1091,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2152:9:5","nodeType":"FunctionDefinition","parameters":{"id":1087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1086,"mutability":"mutable","name":"account","nameLocation":"2170:7:5","nodeType":"VariableDeclaration","scope":1091,"src":"2162:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1085,"name":"address","nodeType":"ElementaryTypeName","src":"2162:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2161:17:5"},"returnParameters":{"id":1090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1091,"src":"2202:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:9:5"},"scope":1122,"src":"2143:68:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1092,"nodeType":"StructuredDocumentation","src":"2217:58:5","text":" add to the deposit of the given account"},"functionSelector":"b760faf9","id":1097,"implemented":false,"kind":"function","modifiers":[],"name":"depositTo","nameLocation":"2289:9:5","nodeType":"FunctionDefinition","parameters":{"id":1095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1094,"mutability":"mutable","name":"account","nameLocation":"2307:7:5","nodeType":"VariableDeclaration","scope":1097,"src":"2299:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1093,"name":"address","nodeType":"ElementaryTypeName","src":"2299:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2298:17:5"},"returnParameters":{"id":1096,"nodeType":"ParameterList","parameters":[],"src":"2332:0:5"},"scope":1122,"src":"2280:53:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1098,"nodeType":"StructuredDocumentation","src":"2339:201:5","text":" add to the account's stake - amount and delay\n any pending unstake is first cancelled.\n @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn."},"functionSelector":"0396cb60","id":1103,"implemented":false,"kind":"function","modifiers":[],"name":"addStake","nameLocation":"2554:8:5","nodeType":"FunctionDefinition","parameters":{"id":1101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1100,"mutability":"mutable","name":"_unstakeDelaySec","nameLocation":"2570:16:5","nodeType":"VariableDeclaration","scope":1103,"src":"2563:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1099,"name":"uint32","nodeType":"ElementaryTypeName","src":"2563:6:5","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2562:25:5"},"returnParameters":{"id":1102,"nodeType":"ParameterList","parameters":[],"src":"2604:0:5"},"scope":1122,"src":"2545:60:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1104,"nodeType":"StructuredDocumentation","src":"2611:128:5","text":" attempt to unlock the stake.\n the value can be withdrawn (using withdrawStake) after the unstake delay."},"functionSelector":"bb9fe6bf","id":1107,"implemented":false,"kind":"function","modifiers":[],"name":"unlockStake","nameLocation":"2753:11:5","nodeType":"FunctionDefinition","parameters":{"id":1105,"nodeType":"ParameterList","parameters":[],"src":"2764:2:5"},"returnParameters":{"id":1106,"nodeType":"ParameterList","parameters":[],"src":"2775:0:5"},"scope":1122,"src":"2744:32:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1108,"nodeType":"StructuredDocumentation","src":"2782:194:5","text":" withdraw from the (unlocked) stake.\n must first call unlockStake and wait for the unstakeDelay to pass\n @param withdrawAddress the address to send withdrawn value."},"functionSelector":"c23a5cea","id":1113,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawStake","nameLocation":"2990:13:5","nodeType":"FunctionDefinition","parameters":{"id":1111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1110,"mutability":"mutable","name":"withdrawAddress","nameLocation":"3020:15:5","nodeType":"VariableDeclaration","scope":1113,"src":"3004:31:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1109,"name":"address","nodeType":"ElementaryTypeName","src":"3004:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3003:33:5"},"returnParameters":{"id":1112,"nodeType":"ParameterList","parameters":[],"src":"3045:0:5"},"scope":1122,"src":"2981:65:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1114,"nodeType":"StructuredDocumentation","src":"3052:165:5","text":" withdraw from the deposit.\n @param withdrawAddress the address to send withdrawn value.\n @param withdrawAmount the amount to withdraw."},"functionSelector":"205c2878","id":1121,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawTo","nameLocation":"3231:10:5","nodeType":"FunctionDefinition","parameters":{"id":1119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1116,"mutability":"mutable","name":"withdrawAddress","nameLocation":"3258:15:5","nodeType":"VariableDeclaration","scope":1121,"src":"3242:31:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1115,"name":"address","nodeType":"ElementaryTypeName","src":"3242:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1118,"mutability":"mutable","name":"withdrawAmount","nameLocation":"3283:14:5","nodeType":"VariableDeclaration","scope":1121,"src":"3275:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"3275:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3241:57:5"},"returnParameters":{"id":1120,"nodeType":"ParameterList","parameters":[],"src":"3307:0:5"},"scope":1122,"src":"3222:86:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1123,"src":"279:3031:5","usedErrors":[]}],"src":"41:3270:5"},"id":5},"contracts/interfaces/UserOperation.sol":{"ast":{"absolutePath":"contracts/interfaces/UserOperation.sol","exportedSymbols":{"UserOperation":[1149],"UserOperationLib":[1319],"calldataKeccak":[760]},"id":1320,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":1124,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:6"},{"absolutePath":"contracts/core/Helpers.sol","file":"../core/Helpers.sol","id":1126,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1320,"sourceUnit":761,"src":"104:51:6","symbolAliases":[{"foreign":{"id":1125,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"112:14:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"UserOperation","id":1149,"members":[{"constant":false,"id":1128,"mutability":"mutable","name":"sender","nameLocation":"1249:6:6","nodeType":"VariableDeclaration","scope":1149,"src":"1241:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1127,"name":"address","nodeType":"ElementaryTypeName","src":"1241:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"nonce","nameLocation":"1273:5:6","nodeType":"VariableDeclaration","scope":1149,"src":"1265:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"1265:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1132,"mutability":"mutable","name":"initCode","nameLocation":"1294:8:6","nodeType":"VariableDeclaration","scope":1149,"src":"1288:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1131,"name":"bytes","nodeType":"ElementaryTypeName","src":"1288:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1134,"mutability":"mutable","name":"callData","nameLocation":"1318:8:6","nodeType":"VariableDeclaration","scope":1149,"src":"1312:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1133,"name":"bytes","nodeType":"ElementaryTypeName","src":"1312:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1136,"mutability":"mutable","name":"callGasLimit","nameLocation":"1344:12:6","nodeType":"VariableDeclaration","scope":1149,"src":"1336:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1135,"name":"uint256","nodeType":"ElementaryTypeName","src":"1336:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1138,"mutability":"mutable","name":"verificationGasLimit","nameLocation":"1374:20:6","nodeType":"VariableDeclaration","scope":1149,"src":"1366:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1137,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1140,"mutability":"mutable","name":"preVerificationGas","nameLocation":"1412:18:6","nodeType":"VariableDeclaration","scope":1149,"src":"1404:26:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1139,"name":"uint256","nodeType":"ElementaryTypeName","src":"1404:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"1448:12:6","nodeType":"VariableDeclaration","scope":1149,"src":"1440:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1141,"name":"uint256","nodeType":"ElementaryTypeName","src":"1440:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1144,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"1478:20:6","nodeType":"VariableDeclaration","scope":1149,"src":"1470:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1143,"name":"uint256","nodeType":"ElementaryTypeName","src":"1470:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1146,"mutability":"mutable","name":"paymasterAndData","nameLocation":"1514:16:6","nodeType":"VariableDeclaration","scope":1149,"src":"1508:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1145,"name":"bytes","nodeType":"ElementaryTypeName","src":"1508:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1148,"mutability":"mutable","name":"signature","nameLocation":"1546:9:6","nodeType":"VariableDeclaration","scope":1149,"src":"1540:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1147,"name":"bytes","nodeType":"ElementaryTypeName","src":"1540:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"UserOperation","nameLocation":"1216:13:6","nodeType":"StructDefinition","scope":1320,"src":"1209:353:6","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"UserOperationLib","contractDependencies":[],"contractKind":"library","documentation":{"id":1150,"nodeType":"StructuredDocumentation","src":"1564:77:6","text":" Utility functions helpful when working with UserOperation structs."},"fullyImplemented":true,"id":1319,"linearizedBaseContracts":[1319],"name":"UserOperationLib","nameLocation":"1650:16:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1170,"nodeType":"Block","src":"1756:199:6","statements":[{"assignments":[1159],"declarations":[{"constant":false,"id":1159,"mutability":"mutable","name":"data","nameLocation":"1774:4:6","nodeType":"VariableDeclaration","scope":1170,"src":"1766:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1158,"name":"address","nodeType":"ElementaryTypeName","src":"1766:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1160,"nodeType":"VariableDeclarationStatement","src":"1766:12:6"},{"AST":{"nodeType":"YulBlock","src":"1880:30:6","statements":[{"nodeType":"YulAssignment","src":"1881:28:6","value":{"arguments":[{"name":"userOp","nodeType":"YulIdentifier","src":"1902:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1889:12:6"},"nodeType":"YulFunctionCall","src":"1889:20:6"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1881:4:6"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1159,"isOffset":false,"isSlot":false,"src":"1881:4:6","valueSize":1},{"declaration":1153,"isOffset":false,"isSlot":false,"src":"1902:6:6","valueSize":1}],"id":1161,"nodeType":"InlineAssembly","src":"1871:39:6"},{"expression":{"arguments":[{"arguments":[{"id":1166,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"1942:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1934:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1164,"name":"uint160","nodeType":"ElementaryTypeName","src":"1934:7:6","typeDescriptions":{}}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1934:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1926:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"1926:7:6","typeDescriptions":{}}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1926:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1157,"id":1169,"nodeType":"Return","src":"1919:29:6"}]},"id":1171,"implemented":true,"kind":"function","modifiers":[],"name":"getSender","nameLocation":"1683:9:6","nodeType":"FunctionDefinition","parameters":{"id":1154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1153,"mutability":"mutable","name":"userOp","nameLocation":"1716:6:6","nodeType":"VariableDeclaration","scope":1171,"src":"1693:29:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":1152,"nodeType":"UserDefinedTypeName","pathNode":{"id":1151,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"1693:13:6"},"referencedDeclaration":1149,"src":"1693:13:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"1692:31:6"},"returnParameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1171,"src":"1747:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1155,"name":"address","nodeType":"ElementaryTypeName","src":"1747:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1746:9:6"},"scope":1319,"src":"1674:281:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1205,"nodeType":"Block","src":"2176:391:6","statements":[{"id":1204,"nodeType":"UncheckedBlock","src":"2182:379:6","statements":[{"assignments":[1180],"declarations":[{"constant":false,"id":1180,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"2210:12:6","nodeType":"VariableDeclaration","scope":1204,"src":"2202:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1179,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1183,"initialValue":{"expression":{"id":1181,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2225:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"maxFeePerGas","nodeType":"MemberAccess","referencedDeclaration":1142,"src":"2225:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2202:42:6"},{"assignments":[1185],"declarations":[{"constant":false,"id":1185,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"2262:20:6","nodeType":"VariableDeclaration","scope":1204,"src":"2254:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1184,"name":"uint256","nodeType":"ElementaryTypeName","src":"2254:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1188,"initialValue":{"expression":{"id":1186,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"2285:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"maxPriorityFeePerGas","nodeType":"MemberAccess","referencedDeclaration":1144,"src":"2285:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2254:58:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1189,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"2326:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1190,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"2342:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2326:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1195,"nodeType":"IfStatement","src":"2322:161:6","trueBody":{"id":1194,"nodeType":"Block","src":"2364:119:6","statements":[{"expression":{"id":1192,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"2460:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1178,"id":1193,"nodeType":"Return","src":"2453:19:6"}]}},{"expression":{"arguments":[{"id":1197,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"2503:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1198,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"2517:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1199,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2540:5:6","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"basefee","nodeType":"MemberAccess","src":"2540:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2517:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1196,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"2499:3:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2499:55:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1178,"id":1203,"nodeType":"Return","src":"2492:62:6"}]}]},"id":1206,"implemented":true,"kind":"function","modifiers":[],"name":"gasPrice","nameLocation":"2104:8:6","nodeType":"FunctionDefinition","parameters":{"id":1175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"userOp","nameLocation":"2136:6:6","nodeType":"VariableDeclaration","scope":1206,"src":"2113:29:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":1173,"nodeType":"UserDefinedTypeName","pathNode":{"id":1172,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"2113:13:6"},"referencedDeclaration":1149,"src":"2113:13:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"2112:31:6"},"returnParameters":{"id":1178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1206,"src":"2167:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1176,"name":"uint256","nodeType":"ElementaryTypeName","src":"2167:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2166:9:6"},"scope":1319,"src":"2095:472:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1285,"nodeType":"Block","src":"2659:856:6","statements":[{"assignments":[1215],"declarations":[{"constant":false,"id":1215,"mutability":"mutable","name":"sender","nameLocation":"2677:6:6","nodeType":"VariableDeclaration","scope":1285,"src":"2669:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"2669:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1219,"initialValue":{"arguments":[{"id":1217,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"2696:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}],"id":1216,"name":"getSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"2686:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$1149_calldata_ptr_$returns$_t_address_$","typeString":"function (struct UserOperation calldata) pure returns (address)"}},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2686:17:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2669:34:6"},{"assignments":[1221],"declarations":[{"constant":false,"id":1221,"mutability":"mutable","name":"nonce","nameLocation":"2721:5:6","nodeType":"VariableDeclaration","scope":1285,"src":"2713:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1220,"name":"uint256","nodeType":"ElementaryTypeName","src":"2713:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1224,"initialValue":{"expression":{"id":1222,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"2729:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":1130,"src":"2729:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2713:28:6"},{"assignments":[1226],"declarations":[{"constant":false,"id":1226,"mutability":"mutable","name":"hashInitCode","nameLocation":"2759:12:6","nodeType":"VariableDeclaration","scope":1285,"src":"2751:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1225,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2751:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1231,"initialValue":{"arguments":[{"expression":{"id":1228,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"2789:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"initCode","nodeType":"MemberAccess","referencedDeclaration":1132,"src":"2789:15:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1227,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"2774:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2774:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2751:54:6"},{"assignments":[1233],"declarations":[{"constant":false,"id":1233,"mutability":"mutable","name":"hashCallData","nameLocation":"2823:12:6","nodeType":"VariableDeclaration","scope":1285,"src":"2815:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2815:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1238,"initialValue":{"arguments":[{"expression":{"id":1235,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"2853:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"callData","nodeType":"MemberAccess","referencedDeclaration":1134,"src":"2853:15:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1234,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"2838:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2838:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2815:54:6"},{"assignments":[1240],"declarations":[{"constant":false,"id":1240,"mutability":"mutable","name":"callGasLimit","nameLocation":"2887:12:6","nodeType":"VariableDeclaration","scope":1285,"src":"2879:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1239,"name":"uint256","nodeType":"ElementaryTypeName","src":"2879:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1243,"initialValue":{"expression":{"id":1241,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"2902:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"callGasLimit","nodeType":"MemberAccess","referencedDeclaration":1136,"src":"2902:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2879:42:6"},{"assignments":[1245],"declarations":[{"constant":false,"id":1245,"mutability":"mutable","name":"verificationGasLimit","nameLocation":"2939:20:6","nodeType":"VariableDeclaration","scope":1285,"src":"2931:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1244,"name":"uint256","nodeType":"ElementaryTypeName","src":"2931:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1248,"initialValue":{"expression":{"id":1246,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"2962:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"verificationGasLimit","nodeType":"MemberAccess","referencedDeclaration":1138,"src":"2962:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2931:58:6"},{"assignments":[1250],"declarations":[{"constant":false,"id":1250,"mutability":"mutable","name":"preVerificationGas","nameLocation":"3007:18:6","nodeType":"VariableDeclaration","scope":1285,"src":"2999:26:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1249,"name":"uint256","nodeType":"ElementaryTypeName","src":"2999:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1253,"initialValue":{"expression":{"id":1251,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"3028:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"preVerificationGas","nodeType":"MemberAccess","referencedDeclaration":1140,"src":"3028:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2999:54:6"},{"assignments":[1255],"declarations":[{"constant":false,"id":1255,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"3071:12:6","nodeType":"VariableDeclaration","scope":1285,"src":"3063:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1254,"name":"uint256","nodeType":"ElementaryTypeName","src":"3063:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1258,"initialValue":{"expression":{"id":1256,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"3086:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"maxFeePerGas","nodeType":"MemberAccess","referencedDeclaration":1142,"src":"3086:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3063:42:6"},{"assignments":[1260],"declarations":[{"constant":false,"id":1260,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"3123:20:6","nodeType":"VariableDeclaration","scope":1285,"src":"3115:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1259,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1263,"initialValue":{"expression":{"id":1261,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"3146:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"maxPriorityFeePerGas","nodeType":"MemberAccess","referencedDeclaration":1144,"src":"3146:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3115:58:6"},{"assignments":[1265],"declarations":[{"constant":false,"id":1265,"mutability":"mutable","name":"hashPaymasterAndData","nameLocation":"3191:20:6","nodeType":"VariableDeclaration","scope":1285,"src":"3183:28:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3183:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1270,"initialValue":{"arguments":[{"expression":{"id":1267,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"3229:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"paymasterAndData","nodeType":"MemberAccess","referencedDeclaration":1146,"src":"3229:23:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1266,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"3214:14:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3214:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3183:70:6"},{"expression":{"arguments":[{"id":1273,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"3295:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1274,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"3303:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1275,"name":"hashInitCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"3322:12:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1276,"name":"hashCallData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"3336:12:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1277,"name":"callGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"3362:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1278,"name":"verificationGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1245,"src":"3376:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1279,"name":"preVerificationGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1250,"src":"3398:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1280,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"3430:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1281,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"3444:20:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1282,"name":"hashPaymasterAndData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"3478:20:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1271,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3271:3:6","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"3271:10:6","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3271:237:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1213,"id":1284,"nodeType":"Return","src":"3264:244:6"}]},"id":1286,"implemented":true,"kind":"function","modifiers":[],"name":"pack","nameLocation":"2582:4:6","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1209,"mutability":"mutable","name":"userOp","nameLocation":"2610:6:6","nodeType":"VariableDeclaration","scope":1286,"src":"2587:29:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":1208,"nodeType":"UserDefinedTypeName","pathNode":{"id":1207,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"2587:13:6"},"referencedDeclaration":1149,"src":"2587:13:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"2586:31:6"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"ret","nameLocation":"2654:3:6","nodeType":"VariableDeclaration","scope":1286,"src":"2641:16:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1211,"name":"bytes","nodeType":"ElementaryTypeName","src":"2641:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2640:18:6"},"scope":1319,"src":"2573:942:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1300,"nodeType":"Block","src":"3598:47:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1296,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"3630:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation calldata"}],"id":1295,"name":"pack","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1286,"src":"3625:4:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$1149_calldata_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct UserOperation calldata) pure returns (bytes memory)"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3625:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1294,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3615:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3615:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1293,"id":1299,"nodeType":"Return","src":"3608:30:6"}]},"id":1301,"implemented":true,"kind":"function","modifiers":[],"name":"hash","nameLocation":"3530:4:6","nodeType":"FunctionDefinition","parameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1289,"mutability":"mutable","name":"userOp","nameLocation":"3558:6:6","nodeType":"VariableDeclaration","scope":1301,"src":"3535:29:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":1288,"nodeType":"UserDefinedTypeName","pathNode":{"id":1287,"name":"UserOperation","nodeType":"IdentifierPath","referencedDeclaration":1149,"src":"3535:13:6"},"referencedDeclaration":1149,"src":"3535:13:6","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$1149_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"3534:31:6"},"returnParameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1301,"src":"3589:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1291,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3589:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3588:9:6"},"scope":1319,"src":"3521:124:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1317,"nodeType":"Block","src":"3718:37:6","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1310,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"3735:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1311,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"3739:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3735:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1314,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"3747:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3735:13:6","trueExpression":{"id":1313,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"3743:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1309,"id":1316,"nodeType":"Return","src":"3728:20:6"}]},"id":1318,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"3660:3:6","nodeType":"FunctionDefinition","parameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1303,"mutability":"mutable","name":"a","nameLocation":"3672:1:6","nodeType":"VariableDeclaration","scope":1318,"src":"3664:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1302,"name":"uint256","nodeType":"ElementaryTypeName","src":"3664:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1305,"mutability":"mutable","name":"b","nameLocation":"3683:1:6","nodeType":"VariableDeclaration","scope":1318,"src":"3675:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1304,"name":"uint256","nodeType":"ElementaryTypeName","src":"3675:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3663:22:6"},"returnParameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1318,"src":"3709:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1307,"name":"uint256","nodeType":"ElementaryTypeName","src":"3709:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3708:9:6"},"scope":1319,"src":"3651:104:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1320,"src":"1642:2115:6","usedErrors":[]}],"src":"36:3722:6"},"id":6}},"contracts":{"contracts/bundler/EntryPointWrapper.sol":{"EntryPointWrapper":{"abi":[{"inputs":[{"internalType":"contract IEntryPoint","name":"_entryPoint","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"opIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"name":"FailedOp","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderAddressResult","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct EntryPointWrapper.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"paymasterInfo","type":"tuple"}],"name":"ValidationResult","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct EntryPointWrapper.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"paymasterInfo","type":"tuple"},{"components":[{"internalType":"address","name":"aggregator","type":"address"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"stakeInfo","type":"tuple"}],"internalType":"struct EntryPointWrapper.AggregatorStakeInfo","name":"aggregatorInfo","type":"tuple"}],"name":"ValidationResultWithAggregation","type":"error"},{"inputs":[],"name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"addresses","type":"address[]"}],"name":"getCodeHashes","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"getSenderAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IEntryPoint","name":"entryPoint","type":"address"},{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"}],"name":"getUserOpHashes","outputs":[{"internalType":"bytes32[]","name":"ret","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"simulateValidation","outputs":[{"components":[{"internalType":"bool","name":"status","type":"bool"},{"internalType":"uint256","name":"opIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"internalType":"struct EntryPointWrapper.FailedOpStatus","name":"","type":"tuple"},{"components":[{"internalType":"string","name":"selectorType","type":"string"},{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct EntryPointWrapper.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"paymasterInfo","type":"tuple"},{"components":[{"internalType":"address","name":"aggregator","type":"address"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct EntryPointWrapper.StakeInfo","name":"stakeInfo","type":"tuple"}],"internalType":"struct EntryPointWrapper.AggregatorStakeInfo","name":"aggregatorInfo","type":"tuple"}],"internalType":"struct EntryPointWrapper.Response","name":"","type":"tuple"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedOp(uint256,string)":[{"params":{"opIndex":"- index into the array of ops to the failed one (in simulateValidation, this is always zero)","reason":"- revert reason      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."}}],"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))":[{"params":{"factoryInfo":"stake information about the factory (if any)","paymasterInfo":"stake information about the paymaster (if any)","returnInfo":"gas and time-range returned values","senderInfo":"stake information about the sender"}}],"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))":[{"params":{"aggregatorInfo":"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation","factoryInfo":"stake information about the factory (if any)","paymasterInfo":"stake information about the paymaster (if any)","returnInfo":"gas and time-range returned values","senderInfo":"stake information about the sender"}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_160":{"entryPoint":null,"id":160,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_IEntryPoint_$998_fromMemory":{"entryPoint":1393,"id":null,"parameterSlots":2,"returnSlots":1},"array_dataslot_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_bytes_storage":{"entryPoint":1106,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":1189,"id":null,"parameterSlots":2,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1046,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":1024,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4395:7","statements":[{"nodeType":"YulBlock","src":"6:3:7","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:7","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:7","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:7","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:7"},"nodeType":"YulFunctionCall","src":"66:20:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:7"},"nodeType":"YulFunctionCall","src":"56:31:7"},"nodeType":"YulExpressionStatement","src":"56:31:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:7","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:7","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:7"},"nodeType":"YulFunctionCall","src":"96:15:7"},"nodeType":"YulExpressionStatement","src":"96:15:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:7","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:7"},"nodeType":"YulFunctionCall","src":"120:15:7"},"nodeType":"YulExpressionStatement","src":"120:15:7"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:7"},{"body":{"nodeType":"YulBlock","src":"201:325:7","statements":[{"nodeType":"YulAssignment","src":"211:22:7","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"225:1:7","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"228:4:7"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"221:3:7"},"nodeType":"YulFunctionCall","src":"221:12:7"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"211:6:7"}]},{"nodeType":"YulVariableDeclaration","src":"242:38:7","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"272:4:7"},{"kind":"number","nodeType":"YulLiteral","src":"278:1:7","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"268:3:7"},"nodeType":"YulFunctionCall","src":"268:12:7"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"246:18:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"319:31:7","statements":[{"nodeType":"YulAssignment","src":"321:27:7","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"335:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"343:4:7","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"331:3:7"},"nodeType":"YulFunctionCall","src":"331:17:7"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"321:6:7"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"299:18:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"292:6:7"},"nodeType":"YulFunctionCall","src":"292:26:7"},"nodeType":"YulIf","src":"289:61:7"},{"body":{"nodeType":"YulBlock","src":"409:111:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"430:1:7","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:3:7","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"442:10:7","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"433:3:7"},"nodeType":"YulFunctionCall","src":"433:20:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"423:6:7"},"nodeType":"YulFunctionCall","src":"423:31:7"},"nodeType":"YulExpressionStatement","src":"423:31:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"474:1:7","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"477:4:7","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"467:6:7"},"nodeType":"YulFunctionCall","src":"467:15:7"},"nodeType":"YulExpressionStatement","src":"467:15:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"502:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"505:4:7","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"495:6:7"},"nodeType":"YulFunctionCall","src":"495:15:7"},"nodeType":"YulExpressionStatement","src":"495:15:7"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"365:18:7"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"388:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"396:2:7","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"385:2:7"},"nodeType":"YulFunctionCall","src":"385:14:7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"362:2:7"},"nodeType":"YulFunctionCall","src":"362:38:7"},"nodeType":"YulIf","src":"359:161:7"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"181:4:7","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"190:6:7","type":""}],"src":"146:380:7"},{"body":{"nodeType":"YulBlock","src":"586:65:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"603:1:7","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"606:3:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"596:6:7"},"nodeType":"YulFunctionCall","src":"596:14:7"},"nodeType":"YulExpressionStatement","src":"596:14:7"},{"nodeType":"YulAssignment","src":"619:26:7","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"637:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"640:4:7","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"627:9:7"},"nodeType":"YulFunctionCall","src":"627:18:7"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"619:4:7"}]}]},"name":"array_dataslot_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"569:3:7","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"577:4:7","type":""}],"src":"531:120:7"},{"body":{"nodeType":"YulBlock","src":"736:464:7","statements":[{"body":{"nodeType":"YulBlock","src":"769:425:7","statements":[{"nodeType":"YulVariableDeclaration","src":"783:11:7","value":{"kind":"number","nodeType":"YulLiteral","src":"793:1:7","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"787:2:7","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"814:2:7"},{"name":"array","nodeType":"YulIdentifier","src":"818:5:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"807:6:7"},"nodeType":"YulFunctionCall","src":"807:17:7"},"nodeType":"YulExpressionStatement","src":"807:17:7"},{"nodeType":"YulVariableDeclaration","src":"837:31:7","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"859:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"863:4:7","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"849:9:7"},"nodeType":"YulFunctionCall","src":"849:19:7"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"841:4:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"881:57:7","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"904:4:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"914:1:7","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"921:10:7"},{"kind":"number","nodeType":"YulLiteral","src":"933:2:7","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"917:3:7"},"nodeType":"YulFunctionCall","src":"917:19:7"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"910:3:7"},"nodeType":"YulFunctionCall","src":"910:27:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"900:3:7"},"nodeType":"YulFunctionCall","src":"900:38:7"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"885:11:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"975:23:7","statements":[{"nodeType":"YulAssignment","src":"977:19:7","value":{"name":"data","nodeType":"YulIdentifier","src":"992:4:7"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"977:11:7"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"957:10:7"},{"kind":"number","nodeType":"YulLiteral","src":"969:4:7","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"954:2:7"},"nodeType":"YulFunctionCall","src":"954:20:7"},"nodeType":"YulIf","src":"951:47:7"},{"nodeType":"YulVariableDeclaration","src":"1011:41:7","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1025:4:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1035:1:7","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1042:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"1047:2:7","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1038:3:7"},"nodeType":"YulFunctionCall","src":"1038:12:7"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1031:3:7"},"nodeType":"YulFunctionCall","src":"1031:20:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1021:3:7"},"nodeType":"YulFunctionCall","src":"1021:31:7"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1015:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1065:24:7","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1078:11:7"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1069:5:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"1163:21:7","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1172:5:7"},{"name":"_1","nodeType":"YulIdentifier","src":"1179:2:7"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1165:6:7"},"nodeType":"YulFunctionCall","src":"1165:17:7"},"nodeType":"YulExpressionStatement","src":"1165:17:7"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1113:5:7"},{"name":"_2","nodeType":"YulIdentifier","src":"1120:2:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1110:2:7"},"nodeType":"YulFunctionCall","src":"1110:13:7"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1124:26:7","statements":[{"nodeType":"YulAssignment","src":"1126:22:7","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1139:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"1146:1:7","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1135:3:7"},"nodeType":"YulFunctionCall","src":"1135:13:7"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1126:5:7"}]}]},"pre":{"nodeType":"YulBlock","src":"1106:3:7","statements":[]},"src":"1102:82:7"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"752:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"757:2:7","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"749:2:7"},"nodeType":"YulFunctionCall","src":"749:11:7"},"nodeType":"YulIf","src":"746:448:7"}]},"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"708:5:7","type":""},{"name":"len","nodeType":"YulTypedName","src":"715:3:7","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"720:10:7","type":""}],"src":"656:544:7"},{"body":{"nodeType":"YulBlock","src":"1290:81:7","statements":[{"nodeType":"YulAssignment","src":"1300:65:7","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1315:4:7"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1333:1:7","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1336:3:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1329:3:7"},"nodeType":"YulFunctionCall","src":"1329:11:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1346:1:7","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1342:3:7"},"nodeType":"YulFunctionCall","src":"1342:6:7"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1325:3:7"},"nodeType":"YulFunctionCall","src":"1325:24:7"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1321:3:7"},"nodeType":"YulFunctionCall","src":"1321:29:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1311:3:7"},"nodeType":"YulFunctionCall","src":"1311:40:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1357:1:7","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1360:3:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1353:3:7"},"nodeType":"YulFunctionCall","src":"1353:11:7"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1308:2:7"},"nodeType":"YulFunctionCall","src":"1308:57:7"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1300:4:7"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1267:4:7","type":""},{"name":"len","nodeType":"YulTypedName","src":"1273:3:7","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1281:4:7","type":""}],"src":"1205:166:7"},{"body":{"nodeType":"YulBlock","src":"1470:1254:7","statements":[{"nodeType":"YulVariableDeclaration","src":"1480:24:7","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1500:3:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1494:5:7"},"nodeType":"YulFunctionCall","src":"1494:10:7"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1484:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"1547:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1549:16:7"},"nodeType":"YulFunctionCall","src":"1549:18:7"},"nodeType":"YulExpressionStatement","src":"1549:18:7"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1519:6:7"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1535:2:7","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1539:1:7","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1531:3:7"},"nodeType":"YulFunctionCall","src":"1531:10:7"},{"kind":"number","nodeType":"YulLiteral","src":"1543:1:7","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1527:3:7"},"nodeType":"YulFunctionCall","src":"1527:18:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1516:2:7"},"nodeType":"YulFunctionCall","src":"1516:30:7"},"nodeType":"YulIf","src":"1513:56:7"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1621:4:7"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1659:4:7"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1653:5:7"},"nodeType":"YulFunctionCall","src":"1653:11:7"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"1627:25:7"},"nodeType":"YulFunctionCall","src":"1627:38:7"},{"name":"newLen","nodeType":"YulIdentifier","src":"1667:6:7"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"1578:42:7"},"nodeType":"YulFunctionCall","src":"1578:96:7"},"nodeType":"YulExpressionStatement","src":"1578:96:7"},{"nodeType":"YulVariableDeclaration","src":"1683:18:7","value":{"kind":"number","nodeType":"YulLiteral","src":"1700:1:7","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"1687:9:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1710:23:7","value":{"kind":"number","nodeType":"YulLiteral","src":"1729:4:7","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"1714:11:7","type":""}]},{"nodeType":"YulAssignment","src":"1742:24:7","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"1755:11:7"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"1742:9:7"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"1812:655:7","statements":[{"nodeType":"YulVariableDeclaration","src":"1826:35:7","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1845:6:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1857:2:7","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1853:3:7"},"nodeType":"YulFunctionCall","src":"1853:7:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1841:3:7"},"nodeType":"YulFunctionCall","src":"1841:20:7"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"1830:7:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1874:48:7","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1917:4:7"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"1888:28:7"},"nodeType":"YulFunctionCall","src":"1888:34:7"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"1878:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1935:10:7","value":{"kind":"number","nodeType":"YulLiteral","src":"1944:1:7","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1939:1:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"2022:172:7","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2047:6:7"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2065:3:7"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2070:9:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2061:3:7"},"nodeType":"YulFunctionCall","src":"2061:19:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2055:5:7"},"nodeType":"YulFunctionCall","src":"2055:26:7"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2040:6:7"},"nodeType":"YulFunctionCall","src":"2040:42:7"},"nodeType":"YulExpressionStatement","src":"2040:42:7"},{"nodeType":"YulAssignment","src":"2099:24:7","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2113:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"2121:1:7","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2109:3:7"},"nodeType":"YulFunctionCall","src":"2109:14:7"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2099:6:7"}]},{"nodeType":"YulAssignment","src":"2140:40:7","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2157:9:7"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2168:11:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:7"},"nodeType":"YulFunctionCall","src":"2153:27:7"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2140:9:7"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1969:1:7"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"1972:7:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1966:2:7"},"nodeType":"YulFunctionCall","src":"1966:14:7"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1981:28:7","statements":[{"nodeType":"YulAssignment","src":"1983:24:7","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1992:1:7"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"1995:11:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1988:3:7"},"nodeType":"YulFunctionCall","src":"1988:19:7"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1983:1:7"}]}]},"pre":{"nodeType":"YulBlock","src":"1962:3:7","statements":[]},"src":"1958:236:7"},{"body":{"nodeType":"YulBlock","src":"2242:166:7","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:43:7","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2287:3:7"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2292:9:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2283:3:7"},"nodeType":"YulFunctionCall","src":"2283:19:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2277:5:7"},"nodeType":"YulFunctionCall","src":"2277:26:7"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2264:9:7","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2327:6:7"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2339:9:7"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2366:1:7","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2369:6:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2362:3:7"},"nodeType":"YulFunctionCall","src":"2362:14:7"},{"kind":"number","nodeType":"YulLiteral","src":"2378:3:7","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2358:3:7"},"nodeType":"YulFunctionCall","src":"2358:24:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2388:1:7","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2384:3:7"},"nodeType":"YulFunctionCall","src":"2384:6:7"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2354:3:7"},"nodeType":"YulFunctionCall","src":"2354:37:7"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2350:3:7"},"nodeType":"YulFunctionCall","src":"2350:42:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2335:3:7"},"nodeType":"YulFunctionCall","src":"2335:58:7"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2320:6:7"},"nodeType":"YulFunctionCall","src":"2320:74:7"},"nodeType":"YulExpressionStatement","src":"2320:74:7"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2213:7:7"},{"name":"newLen","nodeType":"YulIdentifier","src":"2222:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2210:2:7"},"nodeType":"YulFunctionCall","src":"2210:19:7"},"nodeType":"YulIf","src":"2207:201:7"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2428:4:7"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2442:1:7","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2445:6:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2438:3:7"},"nodeType":"YulFunctionCall","src":"2438:14:7"},{"kind":"number","nodeType":"YulLiteral","src":"2454:1:7","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2434:3:7"},"nodeType":"YulFunctionCall","src":"2434:22:7"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2421:6:7"},"nodeType":"YulFunctionCall","src":"2421:36:7"},"nodeType":"YulExpressionStatement","src":"2421:36:7"}]},"nodeType":"YulCase","src":"1805:662:7","value":{"kind":"number","nodeType":"YulLiteral","src":"1810:1:7","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2484:234:7","statements":[{"nodeType":"YulVariableDeclaration","src":"2498:14:7","value":{"kind":"number","nodeType":"YulLiteral","src":"2511:1:7","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2502:5:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"2547:67:7","statements":[{"nodeType":"YulAssignment","src":"2565:35:7","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2584:3:7"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2589:9:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2580:3:7"},"nodeType":"YulFunctionCall","src":"2580:19:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2574:5:7"},"nodeType":"YulFunctionCall","src":"2574:26:7"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2565:5:7"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2528:6:7"},"nodeType":"YulIf","src":"2525:89:7"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2634:4:7"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2693:5:7"},{"name":"newLen","nodeType":"YulIdentifier","src":"2700:6:7"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"2640:52:7"},"nodeType":"YulFunctionCall","src":"2640:67:7"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2627:6:7"},"nodeType":"YulFunctionCall","src":"2627:81:7"},"nodeType":"YulExpressionStatement","src":"2627:81:7"}]},"nodeType":"YulCase","src":"2476:242:7","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1785:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"1793:2:7","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1782:2:7"},"nodeType":"YulFunctionCall","src":"1782:14:7"},"nodeType":"YulSwitch","src":"1775:943:7"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1455:4:7","type":""},{"name":"src","nodeType":"YulTypedName","src":"1461:3:7","type":""}],"src":"1376:1348:7"},{"body":{"nodeType":"YulBlock","src":"2825:1254:7","statements":[{"nodeType":"YulVariableDeclaration","src":"2835:24:7","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2855:3:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2849:5:7"},"nodeType":"YulFunctionCall","src":"2849:10:7"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2839:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"2902:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2904:16:7"},"nodeType":"YulFunctionCall","src":"2904:18:7"},"nodeType":"YulExpressionStatement","src":"2904:18:7"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2874:6:7"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2890:2:7","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2894:1:7","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2886:3:7"},"nodeType":"YulFunctionCall","src":"2886:10:7"},{"kind":"number","nodeType":"YulLiteral","src":"2898:1:7","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2882:3:7"},"nodeType":"YulFunctionCall","src":"2882:18:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2871:2:7"},"nodeType":"YulFunctionCall","src":"2871:30:7"},"nodeType":"YulIf","src":"2868:56:7"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2976:4:7"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3014:4:7"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3008:5:7"},"nodeType":"YulFunctionCall","src":"3008:11:7"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"2982:25:7"},"nodeType":"YulFunctionCall","src":"2982:38:7"},{"name":"newLen","nodeType":"YulIdentifier","src":"3022:6:7"}],"functionName":{"name":"clean_up_bytearray_end_slots_bytes_storage","nodeType":"YulIdentifier","src":"2933:42:7"},"nodeType":"YulFunctionCall","src":"2933:96:7"},"nodeType":"YulExpressionStatement","src":"2933:96:7"},{"nodeType":"YulVariableDeclaration","src":"3038:18:7","value":{"kind":"number","nodeType":"YulLiteral","src":"3055:1:7","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3042:9:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3065:23:7","value":{"kind":"number","nodeType":"YulLiteral","src":"3084:4:7","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3069:11:7","type":""}]},{"nodeType":"YulAssignment","src":"3097:24:7","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3110:11:7"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3097:9:7"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3167:655:7","statements":[{"nodeType":"YulVariableDeclaration","src":"3181:35:7","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3200:6:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3212:2:7","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3208:3:7"},"nodeType":"YulFunctionCall","src":"3208:7:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3196:3:7"},"nodeType":"YulFunctionCall","src":"3196:20:7"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3185:7:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3229:48:7","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3272:4:7"}],"functionName":{"name":"array_dataslot_bytes_storage","nodeType":"YulIdentifier","src":"3243:28:7"},"nodeType":"YulFunctionCall","src":"3243:34:7"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3233:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3290:10:7","value":{"kind":"number","nodeType":"YulLiteral","src":"3299:1:7","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3294:1:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"3377:172:7","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3402:6:7"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3420:3:7"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3425:9:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3416:3:7"},"nodeType":"YulFunctionCall","src":"3416:19:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3410:5:7"},"nodeType":"YulFunctionCall","src":"3410:26:7"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3395:6:7"},"nodeType":"YulFunctionCall","src":"3395:42:7"},"nodeType":"YulExpressionStatement","src":"3395:42:7"},{"nodeType":"YulAssignment","src":"3454:24:7","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3468:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"3476:1:7","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3464:3:7"},"nodeType":"YulFunctionCall","src":"3464:14:7"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3454:6:7"}]},{"nodeType":"YulAssignment","src":"3495:40:7","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3512:9:7"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3523:11:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3508:3:7"},"nodeType":"YulFunctionCall","src":"3508:27:7"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3495:9:7"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3324:1:7"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3327:7:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3321:2:7"},"nodeType":"YulFunctionCall","src":"3321:14:7"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3336:28:7","statements":[{"nodeType":"YulAssignment","src":"3338:24:7","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3347:1:7"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3350:11:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3343:3:7"},"nodeType":"YulFunctionCall","src":"3343:19:7"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3338:1:7"}]}]},"pre":{"nodeType":"YulBlock","src":"3317:3:7","statements":[]},"src":"3313:236:7"},{"body":{"nodeType":"YulBlock","src":"3597:166:7","statements":[{"nodeType":"YulVariableDeclaration","src":"3615:43:7","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3642:3:7"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3647:9:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3638:3:7"},"nodeType":"YulFunctionCall","src":"3638:19:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3632:5:7"},"nodeType":"YulFunctionCall","src":"3632:26:7"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3619:9:7","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3682:6:7"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3694:9:7"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3721:1:7","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3724:6:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3717:3:7"},"nodeType":"YulFunctionCall","src":"3717:14:7"},{"kind":"number","nodeType":"YulLiteral","src":"3733:3:7","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3713:3:7"},"nodeType":"YulFunctionCall","src":"3713:24:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3743:1:7","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3739:3:7"},"nodeType":"YulFunctionCall","src":"3739:6:7"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3709:3:7"},"nodeType":"YulFunctionCall","src":"3709:37:7"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3705:3:7"},"nodeType":"YulFunctionCall","src":"3705:42:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3690:3:7"},"nodeType":"YulFunctionCall","src":"3690:58:7"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3675:6:7"},"nodeType":"YulFunctionCall","src":"3675:74:7"},"nodeType":"YulExpressionStatement","src":"3675:74:7"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3568:7:7"},{"name":"newLen","nodeType":"YulIdentifier","src":"3577:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3565:2:7"},"nodeType":"YulFunctionCall","src":"3565:19:7"},"nodeType":"YulIf","src":"3562:201:7"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3783:4:7"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3797:1:7","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3800:6:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3793:3:7"},"nodeType":"YulFunctionCall","src":"3793:14:7"},{"kind":"number","nodeType":"YulLiteral","src":"3809:1:7","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3789:3:7"},"nodeType":"YulFunctionCall","src":"3789:22:7"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3776:6:7"},"nodeType":"YulFunctionCall","src":"3776:36:7"},"nodeType":"YulExpressionStatement","src":"3776:36:7"}]},"nodeType":"YulCase","src":"3160:662:7","value":{"kind":"number","nodeType":"YulLiteral","src":"3165:1:7","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3839:234:7","statements":[{"nodeType":"YulVariableDeclaration","src":"3853:14:7","value":{"kind":"number","nodeType":"YulLiteral","src":"3866:1:7","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3857:5:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"3902:67:7","statements":[{"nodeType":"YulAssignment","src":"3920:35:7","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3939:3:7"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3944:9:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3935:3:7"},"nodeType":"YulFunctionCall","src":"3935:19:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3929:5:7"},"nodeType":"YulFunctionCall","src":"3929:26:7"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3920:5:7"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3883:6:7"},"nodeType":"YulIf","src":"3880:89:7"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3989:4:7"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4048:5:7"},{"name":"newLen","nodeType":"YulIdentifier","src":"4055:6:7"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"3995:52:7"},"nodeType":"YulFunctionCall","src":"3995:67:7"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3982:6:7"},"nodeType":"YulFunctionCall","src":"3982:81:7"},"nodeType":"YulExpressionStatement","src":"3982:81:7"}]},"nodeType":"YulCase","src":"3831:242:7","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3140:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"3148:2:7","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3137:2:7"},"nodeType":"YulFunctionCall","src":"3137:14:7"},"nodeType":"YulSwitch","src":"3130:943:7"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2810:4:7","type":""},{"name":"src","nodeType":"YulTypedName","src":"2816:3:7","type":""}],"src":"2729:1350:7"},{"body":{"nodeType":"YulBlock","src":"4184:209:7","statements":[{"body":{"nodeType":"YulBlock","src":"4230:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4239:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4242:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4232:6:7"},"nodeType":"YulFunctionCall","src":"4232:12:7"},"nodeType":"YulExpressionStatement","src":"4232:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4205:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"4214:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4201:3:7"},"nodeType":"YulFunctionCall","src":"4201:23:7"},{"kind":"number","nodeType":"YulLiteral","src":"4226:2:7","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4197:3:7"},"nodeType":"YulFunctionCall","src":"4197:32:7"},"nodeType":"YulIf","src":"4194:52:7"},{"nodeType":"YulVariableDeclaration","src":"4255:29:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4274:9:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4268:5:7"},"nodeType":"YulFunctionCall","src":"4268:16:7"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4259:5:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"4347:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4356:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4359:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4349:6:7"},"nodeType":"YulFunctionCall","src":"4349:12:7"},"nodeType":"YulExpressionStatement","src":"4349:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4306:5:7"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4317:5:7"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4332:3:7","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"4337:1:7","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4328:3:7"},"nodeType":"YulFunctionCall","src":"4328:11:7"},{"kind":"number","nodeType":"YulLiteral","src":"4341:1:7","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4324:3:7"},"nodeType":"YulFunctionCall","src":"4324:19:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4313:3:7"},"nodeType":"YulFunctionCall","src":"4313:31:7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4303:2:7"},"nodeType":"YulFunctionCall","src":"4303:42:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4296:6:7"},"nodeType":"YulFunctionCall","src":"4296:50:7"},"nodeType":"YulIf","src":"4293:70:7"},{"nodeType":"YulAssignment","src":"4372:15:7","value":{"name":"value","nodeType":"YulIdentifier","src":"4382:5:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4372:6:7"}]}]},"name":"abi_decode_tuple_t_contract$_IEntryPoint_$998_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4150:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4161:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4173:6:7","type":""}],"src":"4084:309:7"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_decode_tuple_t_contract$_IEntryPoint_$998_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":7,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6000608081905260a08190526001819055600281905560c081905261010081815261012082905260e052600380546001600160a01b0319169055600481905560058190556101408181526101608290526101808290526101a08290526101c08290526102008281526102206040526101e08190526006838155600793909355600880546001600160681b0319169055909190600990620000a09082620004a5565b50506040805160e081018252600060c08083019182529082528251908101835260068054825260075460208381019190915260085460ff811615159584019590955265ffffffffffff610100860481166060850152670100000000000000909504909416608083015260098054939550938501939192909160a0840191620001289062000416565b80601f0160208091040260200160405190810160405280929190818152602001828054620001569062000416565b8015620001a75780601f106200017b57610100808354040283529160200191620001a7565b820191906000526020600020905b8154815290600101906020018083116200018957829003601f168201915b505050919092525050508152604080518082018252600154808252600254602083810182905280860193909352835180850185528281528084018290528486015283518085018552918252818301526060840152815180830183526003546001600160a01b031681528251808401909352600454835260055483830152908101919091526080909101528051600a908190620002449082620004a5565b5060208281015180516001840190815591810151600284015560408101516003840180546060840151608085015166ffffffffffffff1990921693151566ffffffffffff0019169390931761010065ffffffffffff948516021765ffffffffffff60381b1916670100000000000000939091169290920291909117905560a08101519091906004840190620002da9082620004a5565b505050604082810151805160058401556020908101516006840155606080850151805160078601558201516008850155608085015180516009860155820151600a85015560a0909401518051600b850180546001600160a01b0319166001600160a01b039092169190911790558101518051600c850155810151600d909301929092558051928301815260008084528383018181528251938401835290835290830182905282516018805460ff1916911515919091178155905160195590601a90620003a79082620004a5565b505050348015620003b757600080fd5b506040516200223438038062002234833981016040819052620003da9162000571565b600080546001600160a01b0319166001600160a01b0392909216919091179055620005a3565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200042b57607f821691505b6020821081036200044c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004a057600081815260208120601f850160051c810160208610156200047b5750805b601f850160051c820191505b818110156200049c5782815560010162000487565b5050505b505050565b81516001600160401b03811115620004c157620004c162000400565b620004d981620004d2845462000416565b8462000452565b602080601f831160018114620005115760008415620004f85750858301515b600019600386901b1c1916600185901b1785556200049c565b600085815260208120601f198616915b82811015620005425788860151825594840194600190910190840162000521565b5085821015620005615787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156200058457600080fd5b81516001600160a01b03811681146200059c57600080fd5b9392505050565b611c8180620005b36000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639b249f69116100505780639b249f69146100b6578063b0d691fe146100ee578063ee2194231461010e57600080fd5b80633024e00c1461006c5780637b34b62114610095575b600080fd5b61007f61007a36600461103a565b61012f565b60405161008c91906111f9565b60405180910390f35b6100a86100a336600461123d565b61024d565b60405190815260200161008c565b6100c96100c43660046112d7565b610336565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b6000546100c99073ffffffffffffffffffffffffffffffffffffffff1681565b61012161011c366004611349565b6104e3565b60405161008c9291906113e1565b6060815167ffffffffffffffff81111561014b5761014b610eb8565b604051908082528060200260200182016040528015610174578160200160208202803683370190505b50905060005b8251811015610245578373ffffffffffffffffffffffffffffffffffffffff1663a61935318483815181106101b1576101b161152b565b60200260200101516040518263ffffffff1660e01b81526004016101d5919061155a565b602060405180830381865afa1580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102169190611648565b8282815181106102285761022861152b565b60209081029190910101528061023d81611690565b91505061017a565b505b92915050565b600080825167ffffffffffffffff81111561026a5761026a610eb8565b604051908082528060200260200182016040528015610293578160200160208202803683370190505b50905060005b8351811015610302578381815181106102b4576102b461152b565b602002602001015173ffffffffffffffffffffffffffffffffffffffff163f8282815181106102e5576102e561152b565b6020908102919091010152806102fa81611690565b915050610299565b5060008160405160200161031691906111f9565b60408051601f198184030181529190528051602090910120949350505050565b600080546040517f9b249f6900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690639b249f699061038f90869086906004016116f3565b600060405180830381600087803b1580156103a957600080fd5b505af19250505080156103ba575060015b610247573d8080156103e8576040519150601f19603f3d011682016040523d82523d6000602084013e6103ed565b606091505b5060006103f98261170f565b90507f935847fa000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161047c57600061045e836004808651610459919061175f565b610c39565b8060200190518101906104719190611776565b935061024792505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c696420696e6974436f64650000000000000000000000000000000060448201526064015b60405180910390fd5b60408051606080820183526000808352602083015291810191909152610507610d97565b6000546040517fee21942300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063ee2194239061055d9086906004016117fe565b600060405180830381600087803b15801561057757600080fd5b505af1925050508015610588575060015b610c34573d8080156105b6576040519150601f19603f3d011682016040523d82523d6000602084013e6105bb565b606091505b5060006105c78261170f565b90507f1f300fa1000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016107a75760008060008061062b866004808951610459919061175f565b80602001905181019061063e9190611a3c565b6040805161010081018252601060c082019081527f56616c69646174696f6e526573756c740000000000000000000000000000000060e0830152815260208082018790528183018690526060808301869052608083018590528351808501855260035473ffffffffffffffffffffffffffffffffffffffff168152845180860186526004548152600554818501528184015260a0840152835190810184526018805460ff161515825260195492820192909252601a8054989c50969a509498509296509194919385929184019161071490611aae565b80601f016020809104026020016040519081016040528092919081815260200182805461074090611aae565b801561078d5780601f106107625761010080835404028352916020019161078d565b820191906000526020600020905b81548152906001019060200180831161077057829003601f168201915b505050505081525050915097509750505050505050915091565b7f05134b1c000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161095357600080600080600061080b876004808a51610459919061175f565b80602001905181019061081e9190611b01565b6040805161010081018252601f60c082019081527f56616c69646174696f6e526573756c74576974684167677265676174696f6e0060e08301528152602080820188905281830187905260608083018790526080830186905260a08301859052835190810184526018805460ff161515825260195492820192909252601a8054999e50979c50959a509398509196509194909385928401916108bf90611aae565b80601f01602080910402602001604051908101604052809291908181526020018280546108eb90611aae565b80156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b50505050508152505091509850985050505050505050915091565b7fddfd994a000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610c31576000806109b2846004808751610459919061175f565b8060200190518101906109c59190611bd8565b91509150604051806060016040528060011515815260200183815260200182815250600a806040518060c0016040529081600082018054610a0590611aae565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3190611aae565b8015610a7e5780601f10610a5357610100808354040283529160200191610a7e565b820191906000526020600020905b815481529060010190602001808311610a6157829003601f168201915b50505091835250506040805160c08101825260018401805482526002850154602083810191909152600386015460ff811615159484019490945265ffffffffffff610100850481166060850152670100000000000000909404909316608083015260048501805493909401939192909160a0840191610afc90611aae565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2890611aae565b8015610b755780601f10610b4a57610100808354040283529160200191610b75565b820191906000526020600020905b815481529060010190602001808311610b5857829003601f168201915b505050919092525050508152604080518082018252600584015481526006840154602082810191909152808401919091528151808301835260078501548152600885015481830152828401528151808301835260098501548152600a85015481830152606084015281518083018352600b85015473ffffffffffffffffffffffffffffffffffffffff1681528251808401909352600c8501548352600d9094015482820152830152608001529199919850909650505050505050565b50505b915091565b606081610c4781601f611c33565b1015610caf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016104da565b610cb98284611c33565b84511015610d23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016104da565b606082158015610d425760405191506000825260208201604052610d8c565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610d7b578051835260209283019201610d63565b5050858452601f01601f1916604052505b5090505b9392505050565b6040805160c0808201835260608083528351918201845260008083526020838101829052948301819052828201819052608083015260a082015290918201908152602001610df8604051806040016040528060008152602001600081525090565b8152602001610e1a604051806040016040528060008152602001600081525090565b8152602001610e3c604051806040016040528060008152602001600081525090565b8152602001610e49610e4e565b905290565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001610e49604051806040016040528060008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff81168114610eb557600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715610f0b57610f0b610eb8565b60405290565b60405160c0810167ffffffffffffffff81118282101715610f0b57610f0b610eb8565b6040805190810167ffffffffffffffff81118282101715610f0b57610f0b610eb8565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f8057610f80610eb8565b604052919050565b600067ffffffffffffffff821115610fa257610fa2610eb8565b5060051b60200190565b8035610fb781610e93565b919050565b600067ffffffffffffffff821115610fd657610fd6610eb8565b50601f01601f191660200190565b600082601f830112610ff557600080fd5b813561100861100382610fbc565b610f57565b81815284602083860101111561101d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561104d57600080fd5b823561105881610e93565b915060208381013567ffffffffffffffff8082111561107657600080fd5b818601915086601f83011261108a57600080fd5b813561109861100382610f88565b81815260059190911b830184019084810190898311156110b757600080fd5b8585015b838110156111e8578035858111156110d257600080fd5b8601610160818d03601f190112156110e957600080fd5b6110f1610ee7565b6110fc898301610fac565b815260408201358982015260608201358781111561111957600080fd5b6111278e8b83860101610fe4565b60408301525060808201358781111561113f57600080fd5b61114d8e8b83860101610fe4565b60608301525060a0820135608082015260c082013560a082015260e082013560c082015261010082013560e0820152610120820135610100820152610140808301358881111561119c57600080fd5b6111aa8f8c83870101610fe4565b61012084015250610160830135888111156111c457600080fd5b6111d28f8c83870101610fe4565b91830191909152508452509186019186016110bb565b508096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561123157835183529284019291840191600101611215565b50909695505050505050565b6000602080838503121561125057600080fd5b823567ffffffffffffffff81111561126757600080fd5b8301601f8101851361127857600080fd5b803561128661100382610f88565b81815260059190911b820183019083810190878311156112a557600080fd5b928401925b828410156112cc5783356112bd81610e93565b825292840192908401906112aa565b979650505050505050565b600080602083850312156112ea57600080fd5b823567ffffffffffffffff8082111561130257600080fd5b818501915085601f83011261131657600080fd5b81358181111561132557600080fd5b86602082850101111561133757600080fd5b60209290920196919550909350505050565b60006020828403121561135b57600080fd5b813567ffffffffffffffff81111561137257600080fd5b82016101608185031215610d9057600080fd5b60005b838110156113a0578181015183820152602001611388565b838111156113af576000848401525b50505050565b600081518084526113cd816020860160208601611385565b601f01601f19169290920160200192915050565b6000604080835284511515818401526020808601516060850152818601516060608086015261141360a08601826113b5565b9050848103828601526101608651818352611430828401826113b5565b9150508287015182820384840152805182528381015184830152848101511515858301526060810151935065ffffffffffff80851660608401528060808301511660808401525060a081015193505060c060a082015261149360c08201846113b5565b925050828601516114b08483018280518252602090810151910152565b50606086015180516080830152602081015160a083015292506080860151805160c0830152602081015160e0830152925060a08601519250611521610100820184805173ffffffffffffffffffffffffffffffffffffffff1682526020908101518051828401520151604090910152565b5095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020815261158160208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60208201516040820152600060408301516101608060608501526115a96101808501836113b5565b91506060850151601f19808685030160808701526115c784836113b5565b9350608087015160a087015260a087015160c087015260c087015160e087015260e0870151915061010082818801528088015192505061012082818801528088015192505061014081878603018188015261162285846113b5565b90880151878203909201848801529350905061163e83826113b5565b9695505050505050565b60006020828403121561165a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116c1576116c1611661565b5060010190565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6020815260006117076020830184866116c8565b949350505050565b6000815160208301517fffffffff00000000000000000000000000000000000000000000000000000000808216935060048310156117575780818460040360031b1b83161693505b505050919050565b60008282101561177157611771611661565b500390565b60006020828403121561178857600080fd5b8151610d9081610e93565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126117c857600080fd5b830160208101925035905067ffffffffffffffff8111156117e857600080fd5b8036038213156117f757600080fd5b9250929050565b6020815261182c6020820161181284610fac565b73ffffffffffffffffffffffffffffffffffffffff169052565b6020820135604082015260006118456040840184611793565b61016080606086015261185d610180860183856116c8565b925061186c6060870187611793565b9250601f19808786030160808801526118868585846116c8565b9450608088013560a088015260a088013560c088015260c088013560e0880152610100935060e088013584880152610120915083880135828801526118cd82890189611793565b945091506101408188870301818901526118e88686856116c8565b95506118f6818a018a611793565b9550925050808786030183880152506112cc8484836116c8565b805165ffffffffffff81168114610fb757600080fd5b600061193461100384610fbc565b905082815283838301111561194857600080fd5b610d90836020830184611385565b600082601f83011261196757600080fd5b610d9083835160208501611926565b600060c0828403121561198857600080fd5b611990610f11565b90508151815260208201516020820152604082015180151581146119b357600080fd5b60408201526119c460608301611910565b60608201526119d560808301611910565b608082015260a082015167ffffffffffffffff8111156119f457600080fd5b611a0084828501611956565b60a08301525092915050565b600060408284031215611a1e57600080fd5b611a26610f34565b9050815181526020820151602082015292915050565b60008060008060e08587031215611a5257600080fd5b845167ffffffffffffffff811115611a6957600080fd5b611a7587828801611976565b945050611a858660208701611a0c565b9250611a948660608701611a0c565b9150611aa38660a08701611a0c565b905092959194509250565b600181811c90821680611ac257607f821691505b602082108103611afb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000806000806000858703610140811215611b1b57600080fd5b865167ffffffffffffffff811115611b3257600080fd5b611b3e89828a01611976565b965050611b4e8860208901611a0c565b9450611b5d8860608901611a0c565b9350611b6c8860a08901611a0c565b925060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2082011215611b9e57600080fd5b50611ba7610f34565b60e0870151611bb581610e93565b8152611bc5886101008901611a0c565b6020820152809150509295509295909350565b60008060408385031215611beb57600080fd5b82519150602083015167ffffffffffffffff811115611c0957600080fd5b8301601f81018513611c1a57600080fd5b611c2985825160208401611926565b9150509250929050565b60008219821115611c4657611c46611661565b50019056fea26469706673582212209a1c7252e82e84056f2a73f6c8f87a6651303771a673fe8cebe2dbe5467b390664736f6c634300080f0033","opcodes":"PUSH1 0x0 PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0xC0 DUP2 SWAP1 MSTORE PUSH2 0x100 DUP2 DUP2 MSTORE PUSH2 0x120 DUP3 SWAP1 MSTORE PUSH1 0xE0 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x5 DUP2 SWAP1 SSTORE PUSH2 0x140 DUP2 DUP2 MSTORE PUSH2 0x160 DUP3 SWAP1 MSTORE PUSH2 0x180 DUP3 SWAP1 MSTORE PUSH2 0x1A0 DUP3 SWAP1 MSTORE PUSH2 0x1C0 DUP3 SWAP1 MSTORE PUSH2 0x200 DUP3 DUP2 MSTORE PUSH2 0x220 PUSH1 0x40 MSTORE PUSH2 0x1E0 DUP2 SWAP1 MSTORE PUSH1 0x6 DUP4 DUP2 SSTORE PUSH1 0x7 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x68 SHL SUB NOT AND SWAP1 SSTORE SWAP1 SWAP2 SWAP1 PUSH1 0x9 SWAP1 PUSH3 0xA0 SWAP1 DUP3 PUSH3 0x4A5 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 PUSH1 0xC0 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE SWAP1 DUP3 MSTORE DUP3 MLOAD SWAP1 DUP2 ADD DUP4 MSTORE PUSH1 0x6 DUP1 SLOAD DUP3 MSTORE PUSH1 0x7 SLOAD PUSH1 0x20 DUP4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x8 SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO SWAP6 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH2 0x100 DUP7 DIV DUP2 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH8 0x100000000000000 SWAP1 SWAP6 DIV SWAP1 SWAP5 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x9 DUP1 SLOAD SWAP4 SWAP6 POP SWAP4 DUP6 ADD SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xA0 DUP5 ADD SWAP2 PUSH3 0x128 SWAP1 PUSH3 0x416 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH3 0x156 SWAP1 PUSH3 0x416 JUMP JUMPDEST DUP1 ISZERO PUSH3 0x1A7 JUMPI DUP1 PUSH1 0x1F LT PUSH3 0x17B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH3 0x1A7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH3 0x189 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP POP DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x1 SLOAD DUP1 DUP3 MSTORE PUSH1 0x2 SLOAD PUSH1 0x20 DUP4 DUP2 ADD DUP3 SWAP1 MSTORE DUP1 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE DUP3 DUP2 MSTORE DUP1 DUP5 ADD DUP3 SWAP1 MSTORE DUP5 DUP7 ADD MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE SWAP2 DUP3 MSTORE DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x4 SLOAD DUP4 MSTORE PUSH1 0x5 SLOAD DUP4 DUP4 ADD MSTORE SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE DUP1 MLOAD PUSH1 0xA SWAP1 DUP2 SWAP1 PUSH3 0x244 SWAP1 DUP3 PUSH3 0x4A5 JUMP JUMPDEST POP PUSH1 0x20 DUP3 DUP2 ADD MLOAD DUP1 MLOAD PUSH1 0x1 DUP5 ADD SWAP1 DUP2 SSTORE SWAP2 DUP2 ADD MLOAD PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x3 DUP5 ADD DUP1 SLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP6 ADD MLOAD PUSH7 0xFFFFFFFFFFFFFF NOT SWAP1 SWAP3 AND SWAP4 ISZERO ISZERO PUSH7 0xFFFFFFFFFFFF00 NOT AND SWAP4 SWAP1 SWAP4 OR PUSH2 0x100 PUSH6 0xFFFFFFFFFFFF SWAP5 DUP6 AND MUL OR PUSH6 0xFFFFFFFFFFFF PUSH1 0x38 SHL NOT AND PUSH8 0x100000000000000 SWAP4 SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP3 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x4 DUP5 ADD SWAP1 PUSH3 0x2DA SWAP1 DUP3 PUSH3 0x4A5 JUMP JUMPDEST POP POP POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD DUP1 MLOAD PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0x20 SWAP1 DUP2 ADD MLOAD PUSH1 0x6 DUP5 ADD SSTORE PUSH1 0x60 DUP1 DUP6 ADD MLOAD DUP1 MLOAD PUSH1 0x7 DUP7 ADD SSTORE DUP3 ADD MLOAD PUSH1 0x8 DUP6 ADD SSTORE PUSH1 0x80 DUP6 ADD MLOAD DUP1 MLOAD PUSH1 0x9 DUP7 ADD SSTORE DUP3 ADD MLOAD PUSH1 0xA DUP6 ADD SSTORE PUSH1 0xA0 SWAP1 SWAP5 ADD MLOAD DUP1 MLOAD PUSH1 0xB DUP6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP2 ADD MLOAD DUP1 MLOAD PUSH1 0xC DUP6 ADD SSTORE DUP2 ADD MLOAD PUSH1 0xD SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP1 MLOAD SWAP3 DUP4 ADD DUP2 MSTORE PUSH1 0x0 DUP1 DUP5 MSTORE DUP4 DUP4 ADD DUP2 DUP2 MSTORE DUP3 MLOAD SWAP4 DUP5 ADD DUP4 MSTORE SWAP1 DUP4 MSTORE SWAP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP3 MLOAD PUSH1 0x18 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE SWAP1 MLOAD PUSH1 0x19 SSTORE SWAP1 PUSH1 0x1A SWAP1 PUSH3 0x3A7 SWAP1 DUP3 PUSH3 0x4A5 JUMP JUMPDEST POP POP POP CALLVALUE DUP1 ISZERO PUSH3 0x3B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2234 CODESIZE SUB DUP1 PUSH3 0x2234 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3DA SWAP2 PUSH3 0x571 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x5A3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x42B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x44C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x4A0 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x47B JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x49C JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x487 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x4C1 JUMPI PUSH3 0x4C1 PUSH3 0x400 JUMP JUMPDEST PUSH3 0x4D9 DUP2 PUSH3 0x4D2 DUP5 SLOAD PUSH3 0x416 JUMP JUMPDEST DUP5 PUSH3 0x452 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x511 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x4F8 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x49C JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x542 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x521 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x561 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x584 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x59C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1C81 DUP1 PUSH3 0x5B3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9B249F69 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x9B249F69 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0xB0D691FE EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0xEE219423 EQ PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3024E00C EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x7B34B621 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x103A JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x11F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA8 PUSH2 0xA3 CALLDATASIZE PUSH1 0x4 PUSH2 0x123D JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C JUMP JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x12D7 JUMP JUMPDEST PUSH2 0x336 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xC9 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x121 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x1349 JUMP JUMPDEST PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP3 SWAP2 SWAP1 PUSH2 0x13E1 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14B JUMPI PUSH2 0x14B PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x174 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x245 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA6193531 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1B1 JUMPI PUSH2 0x1B1 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x155A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x216 SWAP2 SWAP1 PUSH2 0x1648 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x228 JUMPI PUSH2 0x228 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x23D DUP2 PUSH2 0x1690 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x17A JUMP JUMPDEST POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A JUMPI PUSH2 0x26A PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x293 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x302 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2B4 JUMPI PUSH2 0x2B4 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODEHASH DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E5 JUMPI PUSH2 0x2E5 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x2FA DUP2 PUSH2 0x1690 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x299 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x11F9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9B249F6900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x9B249F69 SWAP1 PUSH2 0x38F SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3BA JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x247 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x3F9 DUP3 PUSH2 0x170F JUMP JUMPDEST SWAP1 POP PUSH32 0x935847FA00000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND ADD PUSH2 0x47C JUMPI PUSH1 0x0 PUSH2 0x45E DUP4 PUSH1 0x4 DUP1 DUP7 MLOAD PUSH2 0x459 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x471 SWAP2 SWAP1 PUSH2 0x1776 JUMP JUMPDEST SWAP4 POP PUSH2 0x247 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420696E6974436F646500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x507 PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xEE21942300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xEE219423 SWAP1 PUSH2 0x55D SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x17FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x588 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xC34 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x5C7 DUP3 PUSH2 0x170F JUMP JUMPDEST SWAP1 POP PUSH32 0x1F300FA100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND ADD PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x62B DUP7 PUSH1 0x4 DUP1 DUP10 MLOAD PUSH2 0x459 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x63E SWAP2 SWAP1 PUSH2 0x1A3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x10 PUSH1 0xC0 DUP3 ADD SWAP1 DUP2 MSTORE PUSH32 0x56616C69646174696F6E526573756C7400000000000000000000000000000000 PUSH1 0xE0 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP2 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x4 SLOAD DUP2 MSTORE PUSH1 0x5 SLOAD DUP2 DUP6 ADD MSTORE DUP2 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 DUP2 ADD DUP5 MSTORE PUSH1 0x18 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP3 MSTORE PUSH1 0x19 SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1A DUP1 SLOAD SWAP9 SWAP13 POP SWAP7 SWAP11 POP SWAP5 SWAP9 POP SWAP3 SWAP7 POP SWAP2 SWAP5 SWAP2 SWAP4 DUP6 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0x714 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x740 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x78D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x762 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x78D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x770 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP2 POP SWAP8 POP SWAP8 POP POP POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH32 0x5134B1C00000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND ADD PUSH2 0x953 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x80B DUP8 PUSH1 0x4 DUP1 DUP11 MLOAD PUSH2 0x459 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x81E SWAP2 SWAP1 PUSH2 0x1B01 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x1F PUSH1 0xC0 DUP3 ADD SWAP1 DUP2 MSTORE PUSH32 0x56616C69646174696F6E526573756C74576974684167677265676174696F6E00 PUSH1 0xE0 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE DUP2 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD SWAP1 DUP2 ADD DUP5 MSTORE PUSH1 0x18 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP3 MSTORE PUSH1 0x19 SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1A DUP1 SLOAD SWAP10 SWAP15 POP SWAP8 SWAP13 POP SWAP6 SWAP11 POP SWAP4 SWAP9 POP SWAP2 SWAP7 POP SWAP2 SWAP5 SWAP1 SWAP4 DUP6 SWAP3 DUP5 ADD SWAP2 PUSH2 0x8BF SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8EB SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x938 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x90D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x938 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x91B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP2 POP SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH32 0xDDFD994A00000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND ADD PUSH2 0xC31 JUMPI PUSH1 0x0 DUP1 PUSH2 0x9B2 DUP5 PUSH1 0x4 DUP1 DUP8 MLOAD PUSH2 0x459 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9C5 SWAP2 SWAP1 PUSH2 0x1BD8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0xA DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0xA05 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA31 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA7E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA53 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA7E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA61 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 DUP5 ADD DUP1 SLOAD DUP3 MSTORE PUSH1 0x2 DUP6 ADD SLOAD PUSH1 0x20 DUP4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP7 ADD SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH2 0x100 DUP6 DIV DUP2 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH8 0x100000000000000 SWAP1 SWAP5 DIV SWAP1 SWAP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x4 DUP6 ADD DUP1 SLOAD SWAP4 SWAP1 SWAP5 ADD SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xA0 DUP5 ADD SWAP2 PUSH2 0xAFC SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB28 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB75 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB4A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB75 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB58 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP POP DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x5 DUP5 ADD SLOAD DUP2 MSTORE PUSH1 0x6 DUP5 ADD SLOAD PUSH1 0x20 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x7 DUP6 ADD SLOAD DUP2 MSTORE PUSH1 0x8 DUP6 ADD SLOAD DUP2 DUP4 ADD MSTORE DUP3 DUP5 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x9 DUP6 ADD SLOAD DUP2 MSTORE PUSH1 0xA DUP6 ADD SLOAD DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0xB DUP6 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0xC DUP6 ADD SLOAD DUP4 MSTORE PUSH1 0xD SWAP1 SWAP5 ADD SLOAD DUP3 DUP3 ADD MSTORE DUP4 ADD MSTORE PUSH1 0x80 ADD MSTORE SWAP2 SWAP10 SWAP2 SWAP9 POP SWAP1 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0xC47 DUP2 PUSH1 0x1F PUSH2 0x1C33 JUMP JUMPDEST LT ISZERO PUSH2 0xCAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F766572666C6F77000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4DA JUMP JUMPDEST PUSH2 0xCB9 DUP3 DUP5 PUSH2 0x1C33 JUMP JUMPDEST DUP5 MLOAD LT ISZERO PUSH2 0xD23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F75744F66426F756E6473000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4DA JUMP JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD8C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0xD7B JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xD63 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x60 DUP1 DUP4 MSTORE DUP4 MLOAD SWAP2 DUP3 ADD DUP5 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP5 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 SWAP2 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDF8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE1A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE49 PUSH2 0xE4E JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE49 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF0B JUMPI PUSH2 0xF0B PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF0B JUMPI PUSH2 0xF0B PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF0B JUMPI PUSH2 0xF0B PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF80 JUMPI PUSH2 0xF80 PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xFA2 JUMPI PUSH2 0xFA2 PUSH2 0xEB8 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFB7 DUP2 PUSH2 0xE93 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xFD6 JUMPI PUSH2 0xFD6 PUSH2 0xEB8 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1008 PUSH2 0x1003 DUP3 PUSH2 0xFBC JUMP JUMPDEST PUSH2 0xF57 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x101D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x104D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1058 DUP2 PUSH2 0xE93 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x108A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1098 PUSH2 0x1003 DUP3 PUSH2 0xF88 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP10 DUP4 GT ISZERO PUSH2 0x10B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11E8 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x10D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH2 0x160 DUP2 DUP14 SUB PUSH1 0x1F NOT ADD SLT ISZERO PUSH2 0x10E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10F1 PUSH2 0xEE7 JUMP JUMPDEST PUSH2 0x10FC DUP10 DUP4 ADD PUSH2 0xFAC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP10 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD DUP8 DUP2 GT ISZERO PUSH2 0x1119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1127 DUP15 DUP12 DUP4 DUP7 ADD ADD PUSH2 0xFE4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x80 DUP3 ADD CALLDATALOAD DUP8 DUP2 GT ISZERO PUSH2 0x113F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114D DUP15 DUP12 DUP4 DUP7 ADD ADD PUSH2 0xFE4 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x120 DUP3 ADD CALLDATALOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD DUP9 DUP2 GT ISZERO PUSH2 0x119C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11AA DUP16 DUP13 DUP4 DUP8 ADD ADD PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x120 DUP5 ADD MSTORE POP PUSH2 0x160 DUP4 ADD CALLDATALOAD DUP9 DUP2 GT ISZERO PUSH2 0x11C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11D2 DUP16 DUP13 DUP4 DUP8 ADD ADD PUSH2 0xFE4 JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x10BB JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1231 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1215 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1286 PUSH2 0x1003 DUP3 PUSH2 0xF88 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0x12A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x12CC JUMPI DUP4 CALLDATALOAD PUSH2 0x12BD DUP2 PUSH2 0xE93 JUMP JUMPDEST DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x12AA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x135B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH2 0x160 DUP2 DUP6 SUB SLT ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13A0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1388 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x13AF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x13CD DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1385 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 MSTORE DUP5 MLOAD ISZERO ISZERO DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP1 DUP7 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE DUP2 DUP7 ADD MLOAD PUSH1 0x60 PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x1413 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x13B5 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 SUB DUP3 DUP7 ADD MSTORE PUSH2 0x160 DUP7 MLOAD DUP2 DUP4 MSTORE PUSH2 0x1430 DUP3 DUP5 ADD DUP3 PUSH2 0x13B5 JUMP JUMPDEST SWAP2 POP POP DUP3 DUP8 ADD MLOAD DUP3 DUP3 SUB DUP5 DUP5 ADD MSTORE DUP1 MLOAD DUP3 MSTORE DUP4 DUP2 ADD MLOAD DUP5 DUP4 ADD MSTORE DUP5 DUP2 ADD MLOAD ISZERO ISZERO DUP6 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD SWAP4 POP PUSH6 0xFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x60 DUP5 ADD MSTORE DUP1 PUSH1 0x80 DUP4 ADD MLOAD AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH1 0xA0 DUP2 ADD MLOAD SWAP4 POP POP PUSH1 0xC0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1493 PUSH1 0xC0 DUP3 ADD DUP5 PUSH2 0x13B5 JUMP JUMPDEST SWAP3 POP POP DUP3 DUP7 ADD MLOAD PUSH2 0x14B0 DUP5 DUP4 ADD DUP3 DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD DUP1 MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP3 POP PUSH1 0x80 DUP7 ADD MLOAD DUP1 MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE SWAP3 POP PUSH1 0xA0 DUP7 ADD MLOAD SWAP3 POP PUSH2 0x1521 PUSH2 0x100 DUP3 ADD DUP5 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD MLOAD DUP1 MLOAD DUP3 DUP5 ADD MSTORE ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH2 0x1581 PUSH1 0x20 DUP3 ADD DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x160 DUP1 PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x15A9 PUSH2 0x180 DUP6 ADD DUP4 PUSH2 0x13B5 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x1F NOT DUP1 DUP7 DUP6 SUB ADD PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x15C7 DUP5 DUP4 PUSH2 0x13B5 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 DUP8 ADD MSTORE PUSH1 0xE0 DUP8 ADD MLOAD SWAP2 POP PUSH2 0x100 DUP3 DUP2 DUP9 ADD MSTORE DUP1 DUP9 ADD MLOAD SWAP3 POP POP PUSH2 0x120 DUP3 DUP2 DUP9 ADD MSTORE DUP1 DUP9 ADD MLOAD SWAP3 POP POP PUSH2 0x140 DUP2 DUP8 DUP7 SUB ADD DUP2 DUP9 ADD MSTORE PUSH2 0x1622 DUP6 DUP5 PUSH2 0x13B5 JUMP JUMPDEST SWAP1 DUP9 ADD MLOAD DUP8 DUP3 SUB SWAP1 SWAP3 ADD DUP5 DUP9 ADD MSTORE SWAP4 POP SWAP1 POP PUSH2 0x163E DUP4 DUP3 PUSH2 0x13B5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x165A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x16C1 JUMPI PUSH2 0x16C1 PUSH2 0x1661 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1707 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x16C8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 AND SWAP4 POP PUSH1 0x4 DUP4 LT ISZERO PUSH2 0x1757 JUMPI DUP1 DUP2 DUP5 PUSH1 0x4 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1771 JUMPI PUSH2 0x1771 PUSH2 0x1661 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1788 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD90 DUP2 PUSH2 0xE93 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x17C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x17F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH2 0x182C PUSH1 0x20 DUP3 ADD PUSH2 0x1812 DUP5 PUSH2 0xFAC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1845 PUSH1 0x40 DUP5 ADD DUP5 PUSH2 0x1793 JUMP JUMPDEST PUSH2 0x160 DUP1 PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x185D PUSH2 0x180 DUP7 ADD DUP4 DUP6 PUSH2 0x16C8 JUMP JUMPDEST SWAP3 POP PUSH2 0x186C PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x1793 JUMP JUMPDEST SWAP3 POP PUSH1 0x1F NOT DUP1 DUP8 DUP7 SUB ADD PUSH1 0x80 DUP9 ADD MSTORE PUSH2 0x1886 DUP6 DUP6 DUP5 PUSH2 0x16C8 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0xC0 DUP9 ADD CALLDATALOAD PUSH1 0xE0 DUP9 ADD MSTORE PUSH2 0x100 SWAP4 POP PUSH1 0xE0 DUP9 ADD CALLDATALOAD DUP5 DUP9 ADD MSTORE PUSH2 0x120 SWAP2 POP DUP4 DUP9 ADD CALLDATALOAD DUP3 DUP9 ADD MSTORE PUSH2 0x18CD DUP3 DUP10 ADD DUP10 PUSH2 0x1793 JUMP JUMPDEST SWAP5 POP SWAP2 POP PUSH2 0x140 DUP2 DUP9 DUP8 SUB ADD DUP2 DUP10 ADD MSTORE PUSH2 0x18E8 DUP7 DUP7 DUP6 PUSH2 0x16C8 JUMP JUMPDEST SWAP6 POP PUSH2 0x18F6 DUP2 DUP11 ADD DUP11 PUSH2 0x1793 JUMP JUMPDEST SWAP6 POP SWAP3 POP POP DUP1 DUP8 DUP7 SUB ADD DUP4 DUP9 ADD MSTORE POP PUSH2 0x12CC DUP5 DUP5 DUP4 PUSH2 0x16C8 JUMP JUMPDEST DUP1 MLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xFB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1934 PUSH2 0x1003 DUP5 PUSH2 0xFBC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1948 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD90 DUP4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1385 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD90 DUP4 DUP4 MLOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1926 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1988 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1990 PUSH2 0xF11 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x19B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x19C4 PUSH1 0x60 DUP4 ADD PUSH2 0x1910 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x19D5 PUSH1 0x80 DUP4 ADD PUSH2 0x1910 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A00 DUP5 DUP3 DUP6 ADD PUSH2 0x1956 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A26 PUSH2 0xF34 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1A52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A75 DUP8 DUP3 DUP9 ADD PUSH2 0x1976 JUMP JUMPDEST SWAP5 POP POP PUSH2 0x1A85 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP3 POP PUSH2 0x1A94 DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP2 POP PUSH2 0x1AA3 DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1AC2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1AFB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP8 SUB PUSH2 0x140 DUP2 SLT ISZERO PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B3E DUP10 DUP3 DUP11 ADD PUSH2 0x1976 JUMP JUMPDEST SWAP7 POP POP PUSH2 0x1B4E DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP5 POP PUSH2 0x1B5D DUP9 PUSH1 0x60 DUP10 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP4 POP PUSH2 0x1B6C DUP9 PUSH1 0xA0 DUP10 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP3 POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF20 DUP3 ADD SLT ISZERO PUSH2 0x1B9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA7 PUSH2 0xF34 JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x1BB5 DUP2 PUSH2 0xE93 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1BC5 DUP9 PUSH2 0x100 DUP10 ADD PUSH2 0x1A0C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1C1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C29 DUP6 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1926 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1C46 JUMPI PUSH2 0x1C46 PUSH2 0x1661 JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP11 SHR PUSH19 0x52E82E84056F2A73F6C8F87A6651303771A673 INVALID DUP13 0xEB 0xE2 0xDB 0xE5 CHAINID PUSH28 0x390664736F6C634300080F0033000000000000000000000000000000 ","sourceMap":":::-:0;189:9776:0;3858:15;;;;;;;3823:50;;;;;;;;3858:15;3929:47;;;;;;;;;;;;;3879:97;;;-1:-1:-1;;;;;;3879:97:0;;;;;;;;;;;3929:47;4019:43;;;;;;;;;;;;;;;;;;;;4049:12;;;;-1:-1:-1;4049:12:0;4019:43;;;;3982:80;;;;;;;;;;;;-1:-1:-1;;;;;;3982:80:0;;;3929:47;;3982:80;;;;;;;:::i;:::-;-1:-1:-1;;4101:98:0;;;;;;;;-1:-1:-1;4101:98:0;;;;;;;;;;;;;;;;;4114:15;4101:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4101:98:0;;;;;;;;-1:-1:-1;4101:98:0;;;;;;4114:15;;4101:98;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4101:98:0;;;;-1:-1:-1;;;4101:98:0;;;;;;;;;;4131:14;4101:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4179:19;4101:98;-1:-1:-1;;;;;4101:98:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4068:131;;;;;;;;;;:::i;:::-;-1:-1:-1;4068:131:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4068:131:0;;;;;;-1:-1:-1;;4068:131:0;;;;;;;;;;;;-1:-1:-1;;;;4068:131:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;4068:131:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4068:131:0;-1:-1:-1;;;;;4068:131:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4244:28;;;;;;;-1:-1:-1;4244:28:0;;;;;;;;;;;;;;;;;;;;;;;;;4205:67;;;;;-1:-1:-1;;4205:67:0;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;4279:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4326:10;:24;;-1:-1:-1;;;;;;4326:24:0;-1:-1:-1;;;;;4326:24:0;;;;;;;;;;189:9776;;14:127:7;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;656:544::-;757:2;752:3;749:11;746:448;;;793:1;818:5;814:2;807:17;863:4;859:2;849:19;933:2;921:10;917:19;914:1;910:27;904:4;900:38;969:4;957:10;954:20;951:47;;;-1:-1:-1;992:4:7;951:47;1047:2;1042:3;1038:12;1035:1;1031:20;1025:4;1021:31;1011:41;;1102:82;1120:2;1113:5;1110:13;1102:82;;;1165:17;;;1146:1;1135:13;1102:82;;;1106:3;;;746:448;656:544;;;:::o;1376:1348::-;1494:10;;-1:-1:-1;;;;;1516:30:7;;1513:56;;;1549:18;;:::i;:::-;1578:96;1667:6;1627:38;1659:4;1653:11;1627:38;:::i;:::-;1621:4;1578:96;:::i;:::-;1729:4;;1793:2;1782:14;;1810:1;1805:662;;;;2511:1;2528:6;2525:89;;;-1:-1:-1;2580:19:7;;;2574:26;2525:89;-1:-1:-1;;1333:1:7;1329:11;;;1325:24;1321:29;1311:40;1357:1;1353:11;;;1308:57;2627:81;;1775:943;;1805:662;603:1;596:14;;;640:4;627:18;;-1:-1:-1;;1841:20:7;;;1958:236;1972:7;1969:1;1966:14;1958:236;;;2061:19;;;2055:26;2040:42;;2153:27;;;;2121:1;2109:14;;;;1988:19;;1958:236;;;1962:3;2222:6;2213:7;2210:19;2207:201;;;2283:19;;;2277:26;-1:-1:-1;;2366:1:7;2362:14;;;2378:3;2358:24;2354:37;2350:42;2335:58;2320:74;;2207:201;-1:-1:-1;;;;;2454:1:7;2438:14;;;2434:22;2421:36;;-1:-1:-1;1376:1348:7:o;4084:309::-;4173:6;4226:2;4214:9;4205:7;4201:23;4197:32;4194:52;;;4242:1;4239;4232:12;4194:52;4268:16;;-1:-1:-1;;;;;4313:31:7;;4303:42;;4293:70;;4359:1;4356;4349:12;4293:70;4382:5;4084:309;-1:-1:-1;;;4084:309:7:o;:::-;189:9776:0;;;;;;"},"deployedBytecode":{"functionDebugData":{"@entryPoint_99":{"entryPoint":null,"id":99,"parameterSlots":0,"returnSlots":0},"@getCodeHashes_464":{"entryPoint":589,"id":464,"parameterSlots":1,"returnSlots":1},"@getSenderAddress_521":{"entryPoint":822,"id":521,"parameterSlots":2,"returnSlots":1},"@getUserOpHashes_409":{"entryPoint":303,"id":409,"parameterSlots":2,"returnSlots":1},"@simulateValidation_323":{"entryPoint":1251,"id":323,"parameterSlots":1,"returnSlots":2},"@slice_360":{"entryPoint":3129,"id":360,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4012,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_available_length_bytes_fromMemory":{"entryPoint":6438,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_bytes":{"entryPoint":4068,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_fromMemory":{"entryPoint":6486,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_ReturnInfo_fromMemory":{"entryPoint":6518,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_struct_StakeInfo_fromMemory":{"entryPoint":6668,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable_fromMemory":{"entryPoint":6006,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":4669,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":5704,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":4823,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_contract$_IEntryPoint_$998t_array$_t_struct$_UserOperation_$1149_memory_ptr_$dyn_memory_ptr":{"entryPoint":4154,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_struct$_ReturnInfo_$15_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptr_fromMemory":{"entryPoint":6716,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_struct$_ReturnInfo_$15_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_AggregatorStakeInfo_$26_memory_ptr_fromMemory":{"entryPoint":6913,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_struct$_UserOperation_$1149_calldata_ptr":{"entryPoint":4937,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_string_memory_ptr_fromMemory":{"entryPoint":7128,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_uint48_fromMemory":{"entryPoint":6416,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_bytes_calldata":{"entryPoint":5832,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":5045,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_AggregatorStakeInfo":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_struct_StakeInfo":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":4601,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5875,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IEntryPoint_$998__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41358789453c2b61b04d9046ed6bd1617530e1f3f5c8b4843a7b086398036cc8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_FailedOpStatus_$33_memory_ptr_t_struct$_Response_$51_memory_ptr__to_t_struct$_FailedOpStatus_$33_memory_ptr_t_struct$_Response_$51_memory_ptr__fromStack_reversed":{"entryPoint":5089,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_struct$_UserOperation_$1149_calldata_ptr__to_t_struct$_UserOperation_$1149_memory_ptr__fromStack_reversed":{"entryPoint":6142,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_UserOperation_$1149_memory_ptr__to_t_struct$_UserOperation_$1149_memory_ptr__fromStack_reversed":{"entryPoint":5466,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":3927,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_3428":{"entryPoint":3815,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_3429":{"entryPoint":3857,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_memory_3430":{"entryPoint":3892,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_struct_UserOperation_dyn":{"entryPoint":3976,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":4028,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_access_bytes_calldata":{"entryPoint":6035,"id":null,"parameterSlots":2,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":7219,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5983,"id":null,"parameterSlots":2,"returnSlots":1},"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes4":{"entryPoint":5903,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":4997,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6830,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":5776,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5729,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5419,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3768,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_contract_IEntryPoint":{"entryPoint":3731,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23875:7","statements":[{"nodeType":"YulBlock","src":"6:3:7","statements":[]},{"body":{"nodeType":"YulBlock","src":"72:109:7","statements":[{"body":{"nodeType":"YulBlock","src":"159:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"168:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"171:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"161:6:7"},"nodeType":"YulFunctionCall","src":"161:12:7"},"nodeType":"YulExpressionStatement","src":"161:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"95:5:7"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"106:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"113:42:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"102:3:7"},"nodeType":"YulFunctionCall","src":"102:54:7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"92:2:7"},"nodeType":"YulFunctionCall","src":"92:65:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"85:6:7"},"nodeType":"YulFunctionCall","src":"85:73:7"},"nodeType":"YulIf","src":"82:93:7"}]},"name":"validator_revert_contract_IEntryPoint","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"61:5:7","type":""}],"src":"14:167:7"},{"body":{"nodeType":"YulBlock","src":"218:152:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"235:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"238:77:7","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"228:6:7"},"nodeType":"YulFunctionCall","src":"228:88:7"},"nodeType":"YulExpressionStatement","src":"228:88:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"332:1:7","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"335:4:7","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"325:6:7"},"nodeType":"YulFunctionCall","src":"325:15:7"},"nodeType":"YulExpressionStatement","src":"325:15:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"356:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"359:4:7","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"349:6:7"},"nodeType":"YulFunctionCall","src":"349:15:7"},"nodeType":"YulExpressionStatement","src":"349:15:7"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"186:184:7"},{"body":{"nodeType":"YulBlock","src":"421:209:7","statements":[{"nodeType":"YulAssignment","src":"431:19:7","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"447:2:7","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"441:5:7"},"nodeType":"YulFunctionCall","src":"441:9:7"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"431:6:7"}]},{"nodeType":"YulVariableDeclaration","src":"459:37:7","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"481:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"489:6:7","type":"","value":"0x0160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"477:3:7"},"nodeType":"YulFunctionCall","src":"477:19:7"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"463:10:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"571:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"573:16:7"},"nodeType":"YulFunctionCall","src":"573:18:7"},"nodeType":"YulExpressionStatement","src":"573:18:7"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"514:10:7"},{"kind":"number","nodeType":"YulLiteral","src":"526:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"511:2:7"},"nodeType":"YulFunctionCall","src":"511:34:7"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"550:10:7"},{"name":"memPtr","nodeType":"YulIdentifier","src":"562:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"547:2:7"},"nodeType":"YulFunctionCall","src":"547:22:7"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"508:2:7"},"nodeType":"YulFunctionCall","src":"508:62:7"},"nodeType":"YulIf","src":"505:88:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"609:2:7","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"613:10:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"602:6:7"},"nodeType":"YulFunctionCall","src":"602:22:7"},"nodeType":"YulExpressionStatement","src":"602:22:7"}]},"name":"allocate_memory_3428","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"410:6:7","type":""}],"src":"375:255:7"},{"body":{"nodeType":"YulBlock","src":"681:207:7","statements":[{"nodeType":"YulAssignment","src":"691:19:7","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"707:2:7","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"701:5:7"},"nodeType":"YulFunctionCall","src":"701:9:7"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"691:6:7"}]},{"nodeType":"YulVariableDeclaration","src":"719:35:7","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"741:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"749:4:7","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"737:3:7"},"nodeType":"YulFunctionCall","src":"737:17:7"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"723:10:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"829:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"831:16:7"},"nodeType":"YulFunctionCall","src":"831:18:7"},"nodeType":"YulExpressionStatement","src":"831:18:7"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"772:10:7"},{"kind":"number","nodeType":"YulLiteral","src":"784:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"769:2:7"},"nodeType":"YulFunctionCall","src":"769:34:7"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"808:10:7"},{"name":"memPtr","nodeType":"YulIdentifier","src":"820:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"805:2:7"},"nodeType":"YulFunctionCall","src":"805:22:7"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"766:2:7"},"nodeType":"YulFunctionCall","src":"766:62:7"},"nodeType":"YulIf","src":"763:88:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"867:2:7","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"871:10:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"860:6:7"},"nodeType":"YulFunctionCall","src":"860:22:7"},"nodeType":"YulExpressionStatement","src":"860:22:7"}]},"name":"allocate_memory_3429","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"670:6:7","type":""}],"src":"635:253:7"},{"body":{"nodeType":"YulBlock","src":"939:211:7","statements":[{"nodeType":"YulAssignment","src":"949:21:7","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"965:4:7","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"959:5:7"},"nodeType":"YulFunctionCall","src":"959:11:7"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:7"}]},{"nodeType":"YulVariableDeclaration","src":"979:35:7","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1001:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"1009:4:7","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"997:3:7"},"nodeType":"YulFunctionCall","src":"997:17:7"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"983:10:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"1089:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1091:16:7"},"nodeType":"YulFunctionCall","src":"1091:18:7"},"nodeType":"YulExpressionStatement","src":"1091:18:7"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1032:10:7"},{"kind":"number","nodeType":"YulLiteral","src":"1044:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1029:2:7"},"nodeType":"YulFunctionCall","src":"1029:34:7"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1068:10:7"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1080:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1065:2:7"},"nodeType":"YulFunctionCall","src":"1065:22:7"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1026:2:7"},"nodeType":"YulFunctionCall","src":"1026:62:7"},"nodeType":"YulIf","src":"1023:88:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1127:4:7","type":"","value":"0x40"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1133:10:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1120:6:7"},"nodeType":"YulFunctionCall","src":"1120:24:7"},"nodeType":"YulExpressionStatement","src":"1120:24:7"}]},"name":"allocate_memory_3430","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"928:6:7","type":""}],"src":"893:257:7"},{"body":{"nodeType":"YulBlock","src":"1200:289:7","statements":[{"nodeType":"YulAssignment","src":"1210:19:7","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1226:2:7","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1220:5:7"},"nodeType":"YulFunctionCall","src":"1220:9:7"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1210:6:7"}]},{"nodeType":"YulVariableDeclaration","src":"1238:117:7","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1260:6:7"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1276:4:7"},{"kind":"number","nodeType":"YulLiteral","src":"1282:2:7","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1272:3:7"},"nodeType":"YulFunctionCall","src":"1272:13:7"},{"kind":"number","nodeType":"YulLiteral","src":"1287:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1268:3:7"},"nodeType":"YulFunctionCall","src":"1268:86:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1256:3:7"},"nodeType":"YulFunctionCall","src":"1256:99:7"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1242:10:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"1430:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1432:16:7"},"nodeType":"YulFunctionCall","src":"1432:18:7"},"nodeType":"YulExpressionStatement","src":"1432:18:7"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1373:10:7"},{"kind":"number","nodeType":"YulLiteral","src":"1385:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1370:2:7"},"nodeType":"YulFunctionCall","src":"1370:34:7"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1409:10:7"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1421:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1406:2:7"},"nodeType":"YulFunctionCall","src":"1406:22:7"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1367:2:7"},"nodeType":"YulFunctionCall","src":"1367:62:7"},"nodeType":"YulIf","src":"1364:88:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1468:2:7","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1472:10:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1461:6:7"},"nodeType":"YulFunctionCall","src":"1461:22:7"},"nodeType":"YulExpressionStatement","src":"1461:22:7"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1180:4:7","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1189:6:7","type":""}],"src":"1155:334:7"},{"body":{"nodeType":"YulBlock","src":"1576:114:7","statements":[{"body":{"nodeType":"YulBlock","src":"1620:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1622:16:7"},"nodeType":"YulFunctionCall","src":"1622:18:7"},"nodeType":"YulExpressionStatement","src":"1622:18:7"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1592:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"1600:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1589:2:7"},"nodeType":"YulFunctionCall","src":"1589:30:7"},"nodeType":"YulIf","src":"1586:56:7"},{"nodeType":"YulAssignment","src":"1651:33:7","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1667:1:7","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"1670:6:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1663:3:7"},"nodeType":"YulFunctionCall","src":"1663:14:7"},{"kind":"number","nodeType":"YulLiteral","src":"1679:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1659:3:7"},"nodeType":"YulFunctionCall","src":"1659:25:7"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1651:4:7"}]}]},"name":"array_allocation_size_array_struct_UserOperation_dyn","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1556:6:7","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1567:4:7","type":""}],"src":"1494:196:7"},{"body":{"nodeType":"YulBlock","src":"1744:98:7","statements":[{"nodeType":"YulAssignment","src":"1754:29:7","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1776:6:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1763:12:7"},"nodeType":"YulFunctionCall","src":"1763:20:7"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1754:5:7"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1830:5:7"}],"functionName":{"name":"validator_revert_contract_IEntryPoint","nodeType":"YulIdentifier","src":"1792:37:7"},"nodeType":"YulFunctionCall","src":"1792:44:7"},"nodeType":"YulExpressionStatement","src":"1792:44:7"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1723:6:7","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1734:5:7","type":""}],"src":"1695:147:7"},{"body":{"nodeType":"YulBlock","src":"1904:188:7","statements":[{"body":{"nodeType":"YulBlock","src":"1948:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1950:16:7"},"nodeType":"YulFunctionCall","src":"1950:18:7"},"nodeType":"YulExpressionStatement","src":"1950:18:7"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1920:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"1928:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1917:2:7"},"nodeType":"YulFunctionCall","src":"1917:30:7"},"nodeType":"YulIf","src":"1914:56:7"},{"nodeType":"YulAssignment","src":"1979:107:7","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1999:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"2007:2:7","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1995:3:7"},"nodeType":"YulFunctionCall","src":"1995:15:7"},{"kind":"number","nodeType":"YulLiteral","src":"2012:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1991:3:7"},"nodeType":"YulFunctionCall","src":"1991:88:7"},{"kind":"number","nodeType":"YulLiteral","src":"2081:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1987:3:7"},"nodeType":"YulFunctionCall","src":"1987:99:7"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1979:4:7"}]}]},"name":"array_allocation_size_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1884:6:7","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1895:4:7","type":""}],"src":"1847:245:7"},{"body":{"nodeType":"YulBlock","src":"2149:410:7","statements":[{"body":{"nodeType":"YulBlock","src":"2198:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2207:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2210:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2200:6:7"},"nodeType":"YulFunctionCall","src":"2200:12:7"},"nodeType":"YulExpressionStatement","src":"2200:12:7"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2177:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"2185:4:7","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2173:3:7"},"nodeType":"YulFunctionCall","src":"2173:17:7"},{"name":"end","nodeType":"YulIdentifier","src":"2192:3:7"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2169:3:7"},"nodeType":"YulFunctionCall","src":"2169:27:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2162:6:7"},"nodeType":"YulFunctionCall","src":"2162:35:7"},"nodeType":"YulIf","src":"2159:55:7"},{"nodeType":"YulVariableDeclaration","src":"2223:30:7","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2246:6:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2233:12:7"},"nodeType":"YulFunctionCall","src":"2233:20:7"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2227:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2262:63:7","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2321:2:7"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"2293:27:7"},"nodeType":"YulFunctionCall","src":"2293:31:7"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2277:15:7"},"nodeType":"YulFunctionCall","src":"2277:48:7"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"2266:7:7","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2341:7:7"},{"name":"_1","nodeType":"YulIdentifier","src":"2350:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2334:6:7"},"nodeType":"YulFunctionCall","src":"2334:19:7"},"nodeType":"YulExpressionStatement","src":"2334:19:7"},{"body":{"nodeType":"YulBlock","src":"2401:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2410:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2413:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2403:6:7"},"nodeType":"YulFunctionCall","src":"2403:12:7"},"nodeType":"YulExpressionStatement","src":"2403:12:7"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2376:6:7"},{"name":"_1","nodeType":"YulIdentifier","src":"2384:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2372:3:7"},"nodeType":"YulFunctionCall","src":"2372:15:7"},{"kind":"number","nodeType":"YulLiteral","src":"2389:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2368:3:7"},"nodeType":"YulFunctionCall","src":"2368:26:7"},{"name":"end","nodeType":"YulIdentifier","src":"2396:3:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2365:2:7"},"nodeType":"YulFunctionCall","src":"2365:35:7"},"nodeType":"YulIf","src":"2362:55:7"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2443:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"2452:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2439:3:7"},"nodeType":"YulFunctionCall","src":"2439:18:7"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2463:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"2471:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2459:3:7"},"nodeType":"YulFunctionCall","src":"2459:17:7"},{"name":"_1","nodeType":"YulIdentifier","src":"2478:2:7"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2426:12:7"},"nodeType":"YulFunctionCall","src":"2426:55:7"},"nodeType":"YulExpressionStatement","src":"2426:55:7"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"2505:7:7"},{"name":"_1","nodeType":"YulIdentifier","src":"2514:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2501:3:7"},"nodeType":"YulFunctionCall","src":"2501:16:7"},{"kind":"number","nodeType":"YulLiteral","src":"2519:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2497:3:7"},"nodeType":"YulFunctionCall","src":"2497:27:7"},{"kind":"number","nodeType":"YulLiteral","src":"2526:1:7","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2490:6:7"},"nodeType":"YulFunctionCall","src":"2490:38:7"},"nodeType":"YulExpressionStatement","src":"2490:38:7"},{"nodeType":"YulAssignment","src":"2537:16:7","value":{"name":"array_1","nodeType":"YulIdentifier","src":"2546:7:7"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2537:5:7"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2123:6:7","type":""},{"name":"end","nodeType":"YulTypedName","src":"2131:3:7","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2139:5:7","type":""}],"src":"2097:462:7"},{"body":{"nodeType":"YulBlock","src":"2726:2547:7","statements":[{"body":{"nodeType":"YulBlock","src":"2772:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2781:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2784:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2774:6:7"},"nodeType":"YulFunctionCall","src":"2774:12:7"},"nodeType":"YulExpressionStatement","src":"2774:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2747:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"2756:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2743:3:7"},"nodeType":"YulFunctionCall","src":"2743:23:7"},{"kind":"number","nodeType":"YulLiteral","src":"2768:2:7","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2739:3:7"},"nodeType":"YulFunctionCall","src":"2739:32:7"},"nodeType":"YulIf","src":"2736:52:7"},{"nodeType":"YulVariableDeclaration","src":"2797:36:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2823:9:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2810:12:7"},"nodeType":"YulFunctionCall","src":"2810:23:7"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2801:5:7","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2880:5:7"}],"functionName":{"name":"validator_revert_contract_IEntryPoint","nodeType":"YulIdentifier","src":"2842:37:7"},"nodeType":"YulFunctionCall","src":"2842:44:7"},"nodeType":"YulExpressionStatement","src":"2842:44:7"},{"nodeType":"YulAssignment","src":"2895:15:7","value":{"name":"value","nodeType":"YulIdentifier","src":"2905:5:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2895:6:7"}]},{"nodeType":"YulVariableDeclaration","src":"2919:12:7","value":{"kind":"number","nodeType":"YulLiteral","src":"2929:2:7","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2923:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2940:46:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2971:9:7"},{"name":"_1","nodeType":"YulIdentifier","src":"2982:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2967:3:7"},"nodeType":"YulFunctionCall","src":"2967:18:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2954:12:7"},"nodeType":"YulFunctionCall","src":"2954:32:7"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2944:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2995:28:7","value":{"kind":"number","nodeType":"YulLiteral","src":"3005:18:7","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2999:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"3050:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3059:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3062:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3052:6:7"},"nodeType":"YulFunctionCall","src":"3052:12:7"},"nodeType":"YulExpressionStatement","src":"3052:12:7"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3038:6:7"},{"name":"_2","nodeType":"YulIdentifier","src":"3046:2:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3035:2:7"},"nodeType":"YulFunctionCall","src":"3035:14:7"},"nodeType":"YulIf","src":"3032:34:7"},{"nodeType":"YulVariableDeclaration","src":"3075:32:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3089:9:7"},{"name":"offset","nodeType":"YulIdentifier","src":"3100:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3085:3:7"},"nodeType":"YulFunctionCall","src":"3085:22:7"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3079:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"3155:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3164:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3167:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3157:6:7"},"nodeType":"YulFunctionCall","src":"3157:12:7"},"nodeType":"YulExpressionStatement","src":"3157:12:7"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3134:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"3138:4:7","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3130:3:7"},"nodeType":"YulFunctionCall","src":"3130:13:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3145:7:7"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3126:3:7"},"nodeType":"YulFunctionCall","src":"3126:27:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3119:6:7"},"nodeType":"YulFunctionCall","src":"3119:35:7"},"nodeType":"YulIf","src":"3116:55:7"},{"nodeType":"YulVariableDeclaration","src":"3180:26:7","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3203:2:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3190:12:7"},"nodeType":"YulFunctionCall","src":"3190:16:7"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"3184:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3215:84:7","value":{"arguments":[{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"3295:2:7"}],"functionName":{"name":"array_allocation_size_array_struct_UserOperation_dyn","nodeType":"YulIdentifier","src":"3242:52:7"},"nodeType":"YulFunctionCall","src":"3242:56:7"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3226:15:7"},"nodeType":"YulFunctionCall","src":"3226:73:7"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3219:3:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3308:16:7","value":{"name":"dst","nodeType":"YulIdentifier","src":"3321:3:7"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"3312:5:7","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3340:3:7"},{"name":"_4","nodeType":"YulIdentifier","src":"3345:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3333:6:7"},"nodeType":"YulFunctionCall","src":"3333:15:7"},"nodeType":"YulExpressionStatement","src":"3333:15:7"},{"nodeType":"YulAssignment","src":"3357:19:7","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3368:3:7"},{"name":"_1","nodeType":"YulIdentifier","src":"3373:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3364:3:7"},"nodeType":"YulFunctionCall","src":"3364:12:7"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3357:3:7"}]},{"nodeType":"YulVariableDeclaration","src":"3385:42:7","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3407:2:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3415:1:7","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"3418:2:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3411:3:7"},"nodeType":"YulFunctionCall","src":"3411:10:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3403:3:7"},"nodeType":"YulFunctionCall","src":"3403:19:7"},{"name":"_1","nodeType":"YulIdentifier","src":"3424:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3399:3:7"},"nodeType":"YulFunctionCall","src":"3399:28:7"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3389:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"3459:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3468:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3471:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3461:6:7"},"nodeType":"YulFunctionCall","src":"3461:12:7"},"nodeType":"YulExpressionStatement","src":"3461:12:7"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3442:6:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3450:7:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3439:2:7"},"nodeType":"YulFunctionCall","src":"3439:19:7"},"nodeType":"YulIf","src":"3436:39:7"},{"nodeType":"YulVariableDeclaration","src":"3484:22:7","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3499:2:7"},{"name":"_1","nodeType":"YulIdentifier","src":"3503:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3495:3:7"},"nodeType":"YulFunctionCall","src":"3495:11:7"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3488:3:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"3571:1672:7","statements":[{"nodeType":"YulVariableDeclaration","src":"3585:36:7","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3617:3:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3604:12:7"},"nodeType":"YulFunctionCall","src":"3604:17:7"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"3589:11:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"3657:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3666:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3669:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3659:6:7"},"nodeType":"YulFunctionCall","src":"3659:12:7"},"nodeType":"YulExpressionStatement","src":"3659:12:7"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"3640:11:7"},{"name":"_2","nodeType":"YulIdentifier","src":"3653:2:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3637:2:7"},"nodeType":"YulFunctionCall","src":"3637:19:7"},"nodeType":"YulIf","src":"3634:39:7"},{"nodeType":"YulVariableDeclaration","src":"3686:30:7","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"3700:2:7"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"3704:11:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3696:3:7"},"nodeType":"YulFunctionCall","src":"3696:20:7"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"3690:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"3835:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3844:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3847:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3837:6:7"},"nodeType":"YulFunctionCall","src":"3837:12:7"},"nodeType":"YulExpressionStatement","src":"3837:12:7"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3744:7:7"},{"name":"_5","nodeType":"YulIdentifier","src":"3753:2:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3740:3:7"},"nodeType":"YulFunctionCall","src":"3740:16:7"},{"kind":"number","nodeType":"YulLiteral","src":"3758:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3736:3:7"},"nodeType":"YulFunctionCall","src":"3736:89:7"},{"kind":"number","nodeType":"YulLiteral","src":"3827:6:7","type":"","value":"0x0160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3732:3:7"},"nodeType":"YulFunctionCall","src":"3732:102:7"},"nodeType":"YulIf","src":"3729:122:7"},{"nodeType":"YulVariableDeclaration","src":"3864:37:7","value":{"arguments":[],"functionName":{"name":"allocate_memory_3428","nodeType":"YulIdentifier","src":"3879:20:7"},"nodeType":"YulFunctionCall","src":"3879:22:7"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"3868:7:7","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3921:7:7"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"3953:2:7"},{"name":"_1","nodeType":"YulIdentifier","src":"3957:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3949:3:7"},"nodeType":"YulFunctionCall","src":"3949:11:7"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3930:18:7"},"nodeType":"YulFunctionCall","src":"3930:31:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3914:6:7"},"nodeType":"YulFunctionCall","src":"3914:48:7"},"nodeType":"YulExpressionStatement","src":"3914:48:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"3986:7:7"},{"name":"_1","nodeType":"YulIdentifier","src":"3995:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3982:3:7"},"nodeType":"YulFunctionCall","src":"3982:16:7"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4017:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"4021:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4013:3:7"},"nodeType":"YulFunctionCall","src":"4013:11:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4000:12:7"},"nodeType":"YulFunctionCall","src":"4000:25:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3975:6:7"},"nodeType":"YulFunctionCall","src":"3975:51:7"},"nodeType":"YulExpressionStatement","src":"3975:51:7"},{"nodeType":"YulVariableDeclaration","src":"4039:41:7","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4072:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"4076:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4068:3:7"},"nodeType":"YulFunctionCall","src":"4068:11:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4055:12:7"},"nodeType":"YulFunctionCall","src":"4055:25:7"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4043:8:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"4113:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4122:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4125:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4115:6:7"},"nodeType":"YulFunctionCall","src":"4115:12:7"},"nodeType":"YulExpressionStatement","src":"4115:12:7"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4099:8:7"},{"name":"_2","nodeType":"YulIdentifier","src":"4109:2:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4096:2:7"},"nodeType":"YulFunctionCall","src":"4096:16:7"},"nodeType":"YulIf","src":"4093:36:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4153:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"4162:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4149:3:7"},"nodeType":"YulFunctionCall","src":"4149:16:7"},{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4192:2:7"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4196:8:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4188:3:7"},"nodeType":"YulFunctionCall","src":"4188:17:7"},{"name":"_1","nodeType":"YulIdentifier","src":"4207:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4184:3:7"},"nodeType":"YulFunctionCall","src":"4184:26:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4212:7:7"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4167:16:7"},"nodeType":"YulFunctionCall","src":"4167:53:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4142:6:7"},"nodeType":"YulFunctionCall","src":"4142:79:7"},"nodeType":"YulExpressionStatement","src":"4142:79:7"},{"nodeType":"YulVariableDeclaration","src":"4234:42:7","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4267:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"4271:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4263:3:7"},"nodeType":"YulFunctionCall","src":"4263:12:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4250:12:7"},"nodeType":"YulFunctionCall","src":"4250:26:7"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4238:8:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"4309:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4318:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4321:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4311:6:7"},"nodeType":"YulFunctionCall","src":"4311:12:7"},"nodeType":"YulExpressionStatement","src":"4311:12:7"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4295:8:7"},{"name":"_2","nodeType":"YulIdentifier","src":"4305:2:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4292:2:7"},"nodeType":"YulFunctionCall","src":"4292:16:7"},"nodeType":"YulIf","src":"4289:36:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4349:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"4358:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4345:3:7"},"nodeType":"YulFunctionCall","src":"4345:16:7"},{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4388:2:7"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4392:8:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4384:3:7"},"nodeType":"YulFunctionCall","src":"4384:17:7"},{"name":"_1","nodeType":"YulIdentifier","src":"4403:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4380:3:7"},"nodeType":"YulFunctionCall","src":"4380:26:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4408:7:7"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4363:16:7"},"nodeType":"YulFunctionCall","src":"4363:53:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4338:6:7"},"nodeType":"YulFunctionCall","src":"4338:79:7"},"nodeType":"YulExpressionStatement","src":"4338:79:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4441:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"4450:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4437:3:7"},"nodeType":"YulFunctionCall","src":"4437:17:7"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4473:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"4477:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4469:3:7"},"nodeType":"YulFunctionCall","src":"4469:12:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4456:12:7"},"nodeType":"YulFunctionCall","src":"4456:26:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4430:6:7"},"nodeType":"YulFunctionCall","src":"4430:53:7"},"nodeType":"YulExpressionStatement","src":"4430:53:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4507:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"4516:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4503:3:7"},"nodeType":"YulFunctionCall","src":"4503:17:7"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4539:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"4543:3:7","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4535:3:7"},"nodeType":"YulFunctionCall","src":"4535:12:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4522:12:7"},"nodeType":"YulFunctionCall","src":"4522:26:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4496:6:7"},"nodeType":"YulFunctionCall","src":"4496:53:7"},"nodeType":"YulExpressionStatement","src":"4496:53:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4573:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"4582:3:7","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4569:3:7"},"nodeType":"YulFunctionCall","src":"4569:17:7"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4605:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"4609:3:7","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4601:3:7"},"nodeType":"YulFunctionCall","src":"4601:12:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4588:12:7"},"nodeType":"YulFunctionCall","src":"4588:26:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4562:6:7"},"nodeType":"YulFunctionCall","src":"4562:53:7"},"nodeType":"YulExpressionStatement","src":"4562:53:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4639:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"4648:3:7","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4635:3:7"},"nodeType":"YulFunctionCall","src":"4635:17:7"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4671:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"4675:3:7","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4667:3:7"},"nodeType":"YulFunctionCall","src":"4667:12:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4654:12:7"},"nodeType":"YulFunctionCall","src":"4654:26:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4628:6:7"},"nodeType":"YulFunctionCall","src":"4628:53:7"},"nodeType":"YulExpressionStatement","src":"4628:53:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4705:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"4714:3:7","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4701:3:7"},"nodeType":"YulFunctionCall","src":"4701:17:7"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4737:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"4741:3:7","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4733:3:7"},"nodeType":"YulFunctionCall","src":"4733:12:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4720:12:7"},"nodeType":"YulFunctionCall","src":"4720:26:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4694:6:7"},"nodeType":"YulFunctionCall","src":"4694:53:7"},"nodeType":"YulExpressionStatement","src":"4694:53:7"},{"nodeType":"YulVariableDeclaration","src":"4760:13:7","value":{"kind":"number","nodeType":"YulLiteral","src":"4770:3:7","type":"","value":"320"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"4764:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4786:41:7","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4819:2:7"},{"name":"_6","nodeType":"YulIdentifier","src":"4823:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4815:3:7"},"nodeType":"YulFunctionCall","src":"4815:11:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4802:12:7"},"nodeType":"YulFunctionCall","src":"4802:25:7"},"variables":[{"name":"offset_3","nodeType":"YulTypedName","src":"4790:8:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"4860:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4869:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4872:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4862:6:7"},"nodeType":"YulFunctionCall","src":"4862:12:7"},"nodeType":"YulExpressionStatement","src":"4862:12:7"}]},"condition":{"arguments":[{"name":"offset_3","nodeType":"YulIdentifier","src":"4846:8:7"},{"name":"_2","nodeType":"YulIdentifier","src":"4856:2:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4843:2:7"},"nodeType":"YulFunctionCall","src":"4843:16:7"},"nodeType":"YulIf","src":"4840:36:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4900:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"4909:3:7","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4896:3:7"},"nodeType":"YulFunctionCall","src":"4896:17:7"},{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"4940:2:7"},{"name":"offset_3","nodeType":"YulIdentifier","src":"4944:8:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4936:3:7"},"nodeType":"YulFunctionCall","src":"4936:17:7"},{"name":"_1","nodeType":"YulIdentifier","src":"4955:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4932:3:7"},"nodeType":"YulFunctionCall","src":"4932:26:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4960:7:7"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"4915:16:7"},"nodeType":"YulFunctionCall","src":"4915:53:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4889:6:7"},"nodeType":"YulFunctionCall","src":"4889:80:7"},"nodeType":"YulExpressionStatement","src":"4889:80:7"},{"nodeType":"YulVariableDeclaration","src":"4982:45:7","value":{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"5015:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"5019:6:7","type":"","value":"0x0160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5011:3:7"},"nodeType":"YulFunctionCall","src":"5011:15:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4998:12:7"},"nodeType":"YulFunctionCall","src":"4998:29:7"},"variables":[{"name":"offset_4","nodeType":"YulTypedName","src":"4986:8:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"5060:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5069:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5072:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5062:6:7"},"nodeType":"YulFunctionCall","src":"5062:12:7"},"nodeType":"YulExpressionStatement","src":"5062:12:7"}]},"condition":{"arguments":[{"name":"offset_4","nodeType":"YulIdentifier","src":"5046:8:7"},{"name":"_2","nodeType":"YulIdentifier","src":"5056:2:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5043:2:7"},"nodeType":"YulFunctionCall","src":"5043:16:7"},"nodeType":"YulIf","src":"5040:36:7"},{"expression":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5100:7:7"},{"name":"_6","nodeType":"YulIdentifier","src":"5109:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5096:3:7"},"nodeType":"YulFunctionCall","src":"5096:16:7"},{"arguments":[{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"5139:2:7"},{"name":"offset_4","nodeType":"YulIdentifier","src":"5143:8:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5135:3:7"},"nodeType":"YulFunctionCall","src":"5135:17:7"},{"name":"_1","nodeType":"YulIdentifier","src":"5154:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5131:3:7"},"nodeType":"YulFunctionCall","src":"5131:26:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5159:7:7"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"5114:16:7"},"nodeType":"YulFunctionCall","src":"5114:53:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5089:6:7"},"nodeType":"YulFunctionCall","src":"5089:79:7"},"nodeType":"YulExpressionStatement","src":"5089:79:7"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5188:3:7"},{"name":"value_1","nodeType":"YulIdentifier","src":"5193:7:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5181:6:7"},"nodeType":"YulFunctionCall","src":"5181:20:7"},"nodeType":"YulExpressionStatement","src":"5181:20:7"},{"nodeType":"YulAssignment","src":"5214:19:7","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5225:3:7"},{"name":"_1","nodeType":"YulIdentifier","src":"5230:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5221:3:7"},"nodeType":"YulFunctionCall","src":"5221:12:7"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5214:3:7"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3526:3:7"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3531:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3523:2:7"},"nodeType":"YulFunctionCall","src":"3523:15:7"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3539:23:7","statements":[{"nodeType":"YulAssignment","src":"3541:19:7","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3552:3:7"},{"name":"_1","nodeType":"YulIdentifier","src":"3557:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3548:3:7"},"nodeType":"YulFunctionCall","src":"3548:12:7"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3541:3:7"}]}]},"pre":{"nodeType":"YulBlock","src":"3519:3:7","statements":[]},"src":"3515:1728:7"},{"nodeType":"YulAssignment","src":"5252:15:7","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"5262:5:7"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5252:6:7"}]}]},"name":"abi_decode_tuple_t_contract$_IEntryPoint_$998t_array$_t_struct$_UserOperation_$1149_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2684:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2695:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2707:6:7","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2715:6:7","type":""}],"src":"2564:2709:7"},{"body":{"nodeType":"YulBlock","src":"5429:481:7","statements":[{"nodeType":"YulVariableDeclaration","src":"5439:12:7","value":{"kind":"number","nodeType":"YulLiteral","src":"5449:2:7","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5443:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5460:32:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5478:9:7"},{"name":"_1","nodeType":"YulIdentifier","src":"5489:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5474:3:7"},"nodeType":"YulFunctionCall","src":"5474:18:7"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"5464:6:7","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5508:9:7"},{"name":"_1","nodeType":"YulIdentifier","src":"5519:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5501:6:7"},"nodeType":"YulFunctionCall","src":"5501:21:7"},"nodeType":"YulExpressionStatement","src":"5501:21:7"},{"nodeType":"YulVariableDeclaration","src":"5531:17:7","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"5542:6:7"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"5535:3:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5557:27:7","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5577:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5571:5:7"},"nodeType":"YulFunctionCall","src":"5571:13:7"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5561:6:7","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"5600:6:7"},{"name":"length","nodeType":"YulIdentifier","src":"5608:6:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5593:6:7"},"nodeType":"YulFunctionCall","src":"5593:22:7"},"nodeType":"YulExpressionStatement","src":"5593:22:7"},{"nodeType":"YulAssignment","src":"5624:25:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5635:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"5646:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5631:3:7"},"nodeType":"YulFunctionCall","src":"5631:18:7"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5624:3:7"}]},{"nodeType":"YulVariableDeclaration","src":"5658:29:7","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5676:6:7"},{"name":"_1","nodeType":"YulIdentifier","src":"5684:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5672:3:7"},"nodeType":"YulFunctionCall","src":"5672:15:7"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"5662:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5696:10:7","value":{"kind":"number","nodeType":"YulLiteral","src":"5705:1:7","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5700:1:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"5764:120:7","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5785:3:7"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5796:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5790:5:7"},"nodeType":"YulFunctionCall","src":"5790:13:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5778:6:7"},"nodeType":"YulFunctionCall","src":"5778:26:7"},"nodeType":"YulExpressionStatement","src":"5778:26:7"},{"nodeType":"YulAssignment","src":"5817:19:7","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5828:3:7"},{"name":"_1","nodeType":"YulIdentifier","src":"5833:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5824:3:7"},"nodeType":"YulFunctionCall","src":"5824:12:7"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5817:3:7"}]},{"nodeType":"YulAssignment","src":"5849:25:7","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5863:6:7"},{"name":"_1","nodeType":"YulIdentifier","src":"5871:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5859:3:7"},"nodeType":"YulFunctionCall","src":"5859:15:7"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5849:6:7"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5726:1:7"},{"name":"length","nodeType":"YulIdentifier","src":"5729:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5723:2:7"},"nodeType":"YulFunctionCall","src":"5723:13:7"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5737:18:7","statements":[{"nodeType":"YulAssignment","src":"5739:14:7","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5748:1:7"},{"kind":"number","nodeType":"YulLiteral","src":"5751:1:7","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5744:3:7"},"nodeType":"YulFunctionCall","src":"5744:9:7"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5739:1:7"}]}]},"pre":{"nodeType":"YulBlock","src":"5719:3:7","statements":[]},"src":"5715:169:7"},{"nodeType":"YulAssignment","src":"5893:11:7","value":{"name":"pos","nodeType":"YulIdentifier","src":"5901:3:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5893:4:7"}]}]},"name":"abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5398:9:7","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5409:6:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5420:4:7","type":""}],"src":"5278:632:7"},{"body":{"nodeType":"YulBlock","src":"6010:897:7","statements":[{"nodeType":"YulVariableDeclaration","src":"6020:12:7","value":{"kind":"number","nodeType":"YulLiteral","src":"6030:2:7","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6024:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"6077:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6086:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6089:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6079:6:7"},"nodeType":"YulFunctionCall","src":"6079:12:7"},"nodeType":"YulExpressionStatement","src":"6079:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6052:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"6061:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6048:3:7"},"nodeType":"YulFunctionCall","src":"6048:23:7"},{"name":"_1","nodeType":"YulIdentifier","src":"6073:2:7"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6044:3:7"},"nodeType":"YulFunctionCall","src":"6044:32:7"},"nodeType":"YulIf","src":"6041:52:7"},{"nodeType":"YulVariableDeclaration","src":"6102:37:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6129:9:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6116:12:7"},"nodeType":"YulFunctionCall","src":"6116:23:7"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6106:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"6182:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6191:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6194:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6184:6:7"},"nodeType":"YulFunctionCall","src":"6184:12:7"},"nodeType":"YulExpressionStatement","src":"6184:12:7"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6154:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"6162:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6151:2:7"},"nodeType":"YulFunctionCall","src":"6151:30:7"},"nodeType":"YulIf","src":"6148:50:7"},{"nodeType":"YulVariableDeclaration","src":"6207:32:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6221:9:7"},{"name":"offset","nodeType":"YulIdentifier","src":"6232:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6217:3:7"},"nodeType":"YulFunctionCall","src":"6217:22:7"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"6211:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"6287:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6296:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6299:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6289:6:7"},"nodeType":"YulFunctionCall","src":"6289:12:7"},"nodeType":"YulExpressionStatement","src":"6289:12:7"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6266:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"6270:4:7","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6262:3:7"},"nodeType":"YulFunctionCall","src":"6262:13:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6277:7:7"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6258:3:7"},"nodeType":"YulFunctionCall","src":"6258:27:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6251:6:7"},"nodeType":"YulFunctionCall","src":"6251:35:7"},"nodeType":"YulIf","src":"6248:55:7"},{"nodeType":"YulVariableDeclaration","src":"6312:26:7","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6335:2:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6322:12:7"},"nodeType":"YulFunctionCall","src":"6322:16:7"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"6316:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6347:84:7","value":{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"6427:2:7"}],"functionName":{"name":"array_allocation_size_array_struct_UserOperation_dyn","nodeType":"YulIdentifier","src":"6374:52:7"},"nodeType":"YulFunctionCall","src":"6374:56:7"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6358:15:7"},"nodeType":"YulFunctionCall","src":"6358:73:7"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6351:3:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6440:16:7","value":{"name":"dst","nodeType":"YulIdentifier","src":"6453:3:7"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"6444:5:7","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6472:3:7"},{"name":"_3","nodeType":"YulIdentifier","src":"6477:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6465:6:7"},"nodeType":"YulFunctionCall","src":"6465:15:7"},"nodeType":"YulExpressionStatement","src":"6465:15:7"},{"nodeType":"YulAssignment","src":"6489:19:7","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6500:3:7"},{"name":"_1","nodeType":"YulIdentifier","src":"6505:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6496:3:7"},"nodeType":"YulFunctionCall","src":"6496:12:7"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6489:3:7"}]},{"nodeType":"YulVariableDeclaration","src":"6517:42:7","value":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6539:2:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6547:1:7","type":"","value":"5"},{"name":"_3","nodeType":"YulIdentifier","src":"6550:2:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6543:3:7"},"nodeType":"YulFunctionCall","src":"6543:10:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6535:3:7"},"nodeType":"YulFunctionCall","src":"6535:19:7"},{"name":"_1","nodeType":"YulIdentifier","src":"6556:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6531:3:7"},"nodeType":"YulFunctionCall","src":"6531:28:7"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6521:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"6591:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6600:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6603:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6593:6:7"},"nodeType":"YulFunctionCall","src":"6593:12:7"},"nodeType":"YulExpressionStatement","src":"6593:12:7"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"6574:6:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6582:7:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6571:2:7"},"nodeType":"YulFunctionCall","src":"6571:19:7"},"nodeType":"YulIf","src":"6568:39:7"},{"nodeType":"YulVariableDeclaration","src":"6616:22:7","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"6631:2:7"},{"name":"_1","nodeType":"YulIdentifier","src":"6635:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6627:3:7"},"nodeType":"YulFunctionCall","src":"6627:11:7"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"6620:3:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"6703:174:7","statements":[{"nodeType":"YulVariableDeclaration","src":"6717:30:7","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6743:3:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6730:12:7"},"nodeType":"YulFunctionCall","src":"6730:17:7"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6721:5:7","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6798:5:7"}],"functionName":{"name":"validator_revert_contract_IEntryPoint","nodeType":"YulIdentifier","src":"6760:37:7"},"nodeType":"YulFunctionCall","src":"6760:44:7"},"nodeType":"YulExpressionStatement","src":"6760:44:7"},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6824:3:7"},{"name":"value","nodeType":"YulIdentifier","src":"6829:5:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6817:6:7"},"nodeType":"YulFunctionCall","src":"6817:18:7"},"nodeType":"YulExpressionStatement","src":"6817:18:7"},{"nodeType":"YulAssignment","src":"6848:19:7","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6859:3:7"},{"name":"_1","nodeType":"YulIdentifier","src":"6864:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6855:3:7"},"nodeType":"YulFunctionCall","src":"6855:12:7"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6848:3:7"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6658:3:7"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6663:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6655:2:7"},"nodeType":"YulFunctionCall","src":"6655:15:7"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6671:23:7","statements":[{"nodeType":"YulAssignment","src":"6673:19:7","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6684:3:7"},{"name":"_1","nodeType":"YulIdentifier","src":"6689:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6680:3:7"},"nodeType":"YulFunctionCall","src":"6680:12:7"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"6673:3:7"}]}]},"pre":{"nodeType":"YulBlock","src":"6651:3:7","statements":[]},"src":"6647:230:7"},{"nodeType":"YulAssignment","src":"6886:15:7","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"6896:5:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6886:6:7"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5976:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5987:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5999:6:7","type":""}],"src":"5915:992:7"},{"body":{"nodeType":"YulBlock","src":"7013:76:7","statements":[{"nodeType":"YulAssignment","src":"7023:26:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7035:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"7046:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7031:3:7"},"nodeType":"YulFunctionCall","src":"7031:18:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7023:4:7"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7065:9:7"},{"name":"value0","nodeType":"YulIdentifier","src":"7076:6:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7058:6:7"},"nodeType":"YulFunctionCall","src":"7058:25:7"},"nodeType":"YulExpressionStatement","src":"7058:25:7"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6982:9:7","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6993:6:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7004:4:7","type":""}],"src":"6912:177:7"},{"body":{"nodeType":"YulBlock","src":"7183:502:7","statements":[{"body":{"nodeType":"YulBlock","src":"7229:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7238:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7241:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7231:6:7"},"nodeType":"YulFunctionCall","src":"7231:12:7"},"nodeType":"YulExpressionStatement","src":"7231:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7204:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"7213:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7200:3:7"},"nodeType":"YulFunctionCall","src":"7200:23:7"},{"kind":"number","nodeType":"YulLiteral","src":"7225:2:7","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7196:3:7"},"nodeType":"YulFunctionCall","src":"7196:32:7"},"nodeType":"YulIf","src":"7193:52:7"},{"nodeType":"YulVariableDeclaration","src":"7254:37:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7281:9:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7268:12:7"},"nodeType":"YulFunctionCall","src":"7268:23:7"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7258:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7300:28:7","value":{"kind":"number","nodeType":"YulLiteral","src":"7310:18:7","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7304:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"7355:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7364:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7367:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7357:6:7"},"nodeType":"YulFunctionCall","src":"7357:12:7"},"nodeType":"YulExpressionStatement","src":"7357:12:7"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7343:6:7"},{"name":"_1","nodeType":"YulIdentifier","src":"7351:2:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7340:2:7"},"nodeType":"YulFunctionCall","src":"7340:14:7"},"nodeType":"YulIf","src":"7337:34:7"},{"nodeType":"YulVariableDeclaration","src":"7380:32:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7394:9:7"},{"name":"offset","nodeType":"YulIdentifier","src":"7405:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7390:3:7"},"nodeType":"YulFunctionCall","src":"7390:22:7"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7384:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"7460:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7469:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7472:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7462:6:7"},"nodeType":"YulFunctionCall","src":"7462:12:7"},"nodeType":"YulExpressionStatement","src":"7462:12:7"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7439:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"7443:4:7","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7435:3:7"},"nodeType":"YulFunctionCall","src":"7435:13:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7450:7:7"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7431:3:7"},"nodeType":"YulFunctionCall","src":"7431:27:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7424:6:7"},"nodeType":"YulFunctionCall","src":"7424:35:7"},"nodeType":"YulIf","src":"7421:55:7"},{"nodeType":"YulVariableDeclaration","src":"7485:30:7","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7512:2:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7499:12:7"},"nodeType":"YulFunctionCall","src":"7499:16:7"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7489:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"7542:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7551:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7554:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7544:6:7"},"nodeType":"YulFunctionCall","src":"7544:12:7"},"nodeType":"YulExpressionStatement","src":"7544:12:7"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7530:6:7"},{"name":"_1","nodeType":"YulIdentifier","src":"7538:2:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7527:2:7"},"nodeType":"YulFunctionCall","src":"7527:14:7"},"nodeType":"YulIf","src":"7524:34:7"},{"body":{"nodeType":"YulBlock","src":"7608:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7617:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7620:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7610:6:7"},"nodeType":"YulFunctionCall","src":"7610:12:7"},"nodeType":"YulExpressionStatement","src":"7610:12:7"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7581:2:7"},{"name":"length","nodeType":"YulIdentifier","src":"7585:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7577:3:7"},"nodeType":"YulFunctionCall","src":"7577:15:7"},{"kind":"number","nodeType":"YulLiteral","src":"7594:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7573:3:7"},"nodeType":"YulFunctionCall","src":"7573:24:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7599:7:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7570:2:7"},"nodeType":"YulFunctionCall","src":"7570:37:7"},"nodeType":"YulIf","src":"7567:57:7"},{"nodeType":"YulAssignment","src":"7633:21:7","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"7647:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"7651:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7643:3:7"},"nodeType":"YulFunctionCall","src":"7643:11:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7633:6:7"}]},{"nodeType":"YulAssignment","src":"7663:16:7","value":{"name":"length","nodeType":"YulIdentifier","src":"7673:6:7"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7663:6:7"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7141:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7152:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7164:6:7","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7172:6:7","type":""}],"src":"7094:591:7"},{"body":{"nodeType":"YulBlock","src":"7734:83:7","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7751:3:7"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7760:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"7767:42:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7756:3:7"},"nodeType":"YulFunctionCall","src":"7756:54:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7744:6:7"},"nodeType":"YulFunctionCall","src":"7744:67:7"},"nodeType":"YulExpressionStatement","src":"7744:67:7"}]},"name":"abi_encode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7718:5:7","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7725:3:7","type":""}],"src":"7690:127:7"},{"body":{"nodeType":"YulBlock","src":"7923:125:7","statements":[{"nodeType":"YulAssignment","src":"7933:26:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7945:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"7956:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7941:3:7"},"nodeType":"YulFunctionCall","src":"7941:18:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7933:4:7"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7975:9:7"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7990:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"7998:42:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7986:3:7"},"nodeType":"YulFunctionCall","src":"7986:55:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7968:6:7"},"nodeType":"YulFunctionCall","src":"7968:74:7"},"nodeType":"YulExpressionStatement","src":"7968:74:7"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7892:9:7","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7903:6:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7914:4:7","type":""}],"src":"7822:226:7"},{"body":{"nodeType":"YulBlock","src":"8173:125:7","statements":[{"nodeType":"YulAssignment","src":"8183:26:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8195:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"8206:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8191:3:7"},"nodeType":"YulFunctionCall","src":"8191:18:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8183:4:7"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8225:9:7"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8240:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"8248:42:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8236:3:7"},"nodeType":"YulFunctionCall","src":"8236:55:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8218:6:7"},"nodeType":"YulFunctionCall","src":"8218:74:7"},"nodeType":"YulExpressionStatement","src":"8218:74:7"}]},"name":"abi_encode_tuple_t_contract$_IEntryPoint_$998__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8142:9:7","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8153:6:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8164:4:7","type":""}],"src":"8053:245:7"},{"body":{"nodeType":"YulBlock","src":"8406:290:7","statements":[{"body":{"nodeType":"YulBlock","src":"8452:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8461:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8464:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8454:6:7"},"nodeType":"YulFunctionCall","src":"8454:12:7"},"nodeType":"YulExpressionStatement","src":"8454:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8427:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"8436:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8423:3:7"},"nodeType":"YulFunctionCall","src":"8423:23:7"},{"kind":"number","nodeType":"YulLiteral","src":"8448:2:7","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8419:3:7"},"nodeType":"YulFunctionCall","src":"8419:32:7"},"nodeType":"YulIf","src":"8416:52:7"},{"nodeType":"YulVariableDeclaration","src":"8477:37:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8504:9:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8491:12:7"},"nodeType":"YulFunctionCall","src":"8491:23:7"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8481:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"8557:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8566:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8569:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8559:6:7"},"nodeType":"YulFunctionCall","src":"8559:12:7"},"nodeType":"YulExpressionStatement","src":"8559:12:7"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8529:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"8537:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8526:2:7"},"nodeType":"YulFunctionCall","src":"8526:30:7"},"nodeType":"YulIf","src":"8523:50:7"},{"nodeType":"YulVariableDeclaration","src":"8582:32:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8596:9:7"},{"name":"offset","nodeType":"YulIdentifier","src":"8607:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8592:3:7"},"nodeType":"YulFunctionCall","src":"8592:22:7"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8586:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"8653:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8662:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8665:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8655:6:7"},"nodeType":"YulFunctionCall","src":"8655:12:7"},"nodeType":"YulExpressionStatement","src":"8655:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8634:7:7"},{"name":"_1","nodeType":"YulIdentifier","src":"8643:2:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8630:3:7"},"nodeType":"YulFunctionCall","src":"8630:16:7"},{"kind":"number","nodeType":"YulLiteral","src":"8648:3:7","type":"","value":"352"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8626:3:7"},"nodeType":"YulFunctionCall","src":"8626:26:7"},"nodeType":"YulIf","src":"8623:46:7"},{"nodeType":"YulAssignment","src":"8678:12:7","value":{"name":"_1","nodeType":"YulIdentifier","src":"8688:2:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8678:6:7"}]}]},"name":"abi_decode_tuple_t_struct$_UserOperation_$1149_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8372:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8383:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8395:6:7","type":""}],"src":"8303:393:7"},{"body":{"nodeType":"YulBlock","src":"8754:205:7","statements":[{"nodeType":"YulVariableDeclaration","src":"8764:10:7","value":{"kind":"number","nodeType":"YulLiteral","src":"8773:1:7","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8768:1:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"8833:63:7","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8858:3:7"},{"name":"i","nodeType":"YulIdentifier","src":"8863:1:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8854:3:7"},"nodeType":"YulFunctionCall","src":"8854:11:7"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8877:3:7"},{"name":"i","nodeType":"YulIdentifier","src":"8882:1:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8873:3:7"},"nodeType":"YulFunctionCall","src":"8873:11:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8867:5:7"},"nodeType":"YulFunctionCall","src":"8867:18:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8847:6:7"},"nodeType":"YulFunctionCall","src":"8847:39:7"},"nodeType":"YulExpressionStatement","src":"8847:39:7"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8794:1:7"},{"name":"length","nodeType":"YulIdentifier","src":"8797:6:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8791:2:7"},"nodeType":"YulFunctionCall","src":"8791:13:7"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8805:19:7","statements":[{"nodeType":"YulAssignment","src":"8807:15:7","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8816:1:7"},{"kind":"number","nodeType":"YulLiteral","src":"8819:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8812:3:7"},"nodeType":"YulFunctionCall","src":"8812:10:7"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8807:1:7"}]}]},"pre":{"nodeType":"YulBlock","src":"8787:3:7","statements":[]},"src":"8783:113:7"},{"body":{"nodeType":"YulBlock","src":"8922:31:7","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8935:3:7"},{"name":"length","nodeType":"YulIdentifier","src":"8940:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8931:3:7"},"nodeType":"YulFunctionCall","src":"8931:16:7"},{"kind":"number","nodeType":"YulLiteral","src":"8949:1:7","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8924:6:7"},"nodeType":"YulFunctionCall","src":"8924:27:7"},"nodeType":"YulExpressionStatement","src":"8924:27:7"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8911:1:7"},{"name":"length","nodeType":"YulIdentifier","src":"8914:6:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8908:2:7"},"nodeType":"YulFunctionCall","src":"8908:13:7"},"nodeType":"YulIf","src":"8905:48:7"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8732:3:7","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8737:3:7","type":""},{"name":"length","nodeType":"YulTypedName","src":"8742:6:7","type":""}],"src":"8701:258:7"},{"body":{"nodeType":"YulBlock","src":"9014:267:7","statements":[{"nodeType":"YulVariableDeclaration","src":"9024:26:7","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9044:5:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9038:5:7"},"nodeType":"YulFunctionCall","src":"9038:12:7"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9028:6:7","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9066:3:7"},{"name":"length","nodeType":"YulIdentifier","src":"9071:6:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9059:6:7"},"nodeType":"YulFunctionCall","src":"9059:19:7"},"nodeType":"YulExpressionStatement","src":"9059:19:7"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9113:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"9120:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9109:3:7"},"nodeType":"YulFunctionCall","src":"9109:16:7"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9131:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"9136:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9127:3:7"},"nodeType":"YulFunctionCall","src":"9127:14:7"},{"name":"length","nodeType":"YulIdentifier","src":"9143:6:7"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9087:21:7"},"nodeType":"YulFunctionCall","src":"9087:63:7"},"nodeType":"YulExpressionStatement","src":"9087:63:7"},{"nodeType":"YulAssignment","src":"9159:116:7","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9174:3:7"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9187:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"9195:2:7","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9183:3:7"},"nodeType":"YulFunctionCall","src":"9183:15:7"},{"kind":"number","nodeType":"YulLiteral","src":"9200:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9179:3:7"},"nodeType":"YulFunctionCall","src":"9179:88:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9170:3:7"},"nodeType":"YulFunctionCall","src":"9170:98:7"},{"kind":"number","nodeType":"YulLiteral","src":"9270:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9166:3:7"},"nodeType":"YulFunctionCall","src":"9166:109:7"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9159:3:7"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8991:5:7","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8998:3:7","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9006:3:7","type":""}],"src":"8964:317:7"},{"body":{"nodeType":"YulBlock","src":"9339:97:7","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9356:3:7"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9367:5:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9361:5:7"},"nodeType":"YulFunctionCall","src":"9361:12:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9349:6:7"},"nodeType":"YulFunctionCall","src":"9349:25:7"},"nodeType":"YulExpressionStatement","src":"9349:25:7"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9394:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"9399:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9390:3:7"},"nodeType":"YulFunctionCall","src":"9390:14:7"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9416:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"9423:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9412:3:7"},"nodeType":"YulFunctionCall","src":"9412:16:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9406:5:7"},"nodeType":"YulFunctionCall","src":"9406:23:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9383:6:7"},"nodeType":"YulFunctionCall","src":"9383:47:7"},"nodeType":"YulExpressionStatement","src":"9383:47:7"}]},"name":"abi_encode_struct_StakeInfo","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9323:5:7","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9330:3:7","type":""}],"src":"9286:150:7"},{"body":{"nodeType":"YulBlock","src":"9504:208:7","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9521:3:7"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9536:5:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9530:5:7"},"nodeType":"YulFunctionCall","src":"9530:12:7"},{"kind":"number","nodeType":"YulLiteral","src":"9544:42:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9526:3:7"},"nodeType":"YulFunctionCall","src":"9526:61:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9514:6:7"},"nodeType":"YulFunctionCall","src":"9514:74:7"},"nodeType":"YulExpressionStatement","src":"9514:74:7"},{"nodeType":"YulVariableDeclaration","src":"9597:43:7","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9627:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"9634:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9623:3:7"},"nodeType":"YulFunctionCall","src":"9623:16:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9617:5:7"},"nodeType":"YulFunctionCall","src":"9617:23:7"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"9601:12:7","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"9677:12:7"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9695:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"9700:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9691:3:7"},"nodeType":"YulFunctionCall","src":"9691:14:7"}],"functionName":{"name":"abi_encode_struct_StakeInfo","nodeType":"YulIdentifier","src":"9649:27:7"},"nodeType":"YulFunctionCall","src":"9649:57:7"},"nodeType":"YulExpressionStatement","src":"9649:57:7"}]},"name":"abi_encode_struct_AggregatorStakeInfo","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9488:5:7","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9495:3:7","type":""}],"src":"9441:271:7"},{"body":{"nodeType":"YulBlock","src":"9954:1806:7","statements":[{"nodeType":"YulVariableDeclaration","src":"9964:12:7","value":{"kind":"number","nodeType":"YulLiteral","src":"9974:2:7","type":"","value":"64"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9968:2:7","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9992:9:7"},{"name":"_1","nodeType":"YulIdentifier","src":"10003:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9985:6:7"},"nodeType":"YulFunctionCall","src":"9985:21:7"},"nodeType":"YulExpressionStatement","src":"9985:21:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10026:9:7"},{"name":"_1","nodeType":"YulIdentifier","src":"10037:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10022:3:7"},"nodeType":"YulFunctionCall","src":"10022:18:7"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10062:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10056:5:7"},"nodeType":"YulFunctionCall","src":"10056:13:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10049:6:7"},"nodeType":"YulFunctionCall","src":"10049:21:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10042:6:7"},"nodeType":"YulFunctionCall","src":"10042:29:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10015:6:7"},"nodeType":"YulFunctionCall","src":"10015:57:7"},"nodeType":"YulExpressionStatement","src":"10015:57:7"},{"nodeType":"YulVariableDeclaration","src":"10081:14:7","value":{"kind":"number","nodeType":"YulLiteral","src":"10091:4:7","type":"","value":"0x20"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"10085:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10115:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"10126:4:7","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10111:3:7"},"nodeType":"YulFunctionCall","src":"10111:20:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10143:6:7"},{"name":"_2","nodeType":"YulIdentifier","src":"10151:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10139:3:7"},"nodeType":"YulFunctionCall","src":"10139:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10133:5:7"},"nodeType":"YulFunctionCall","src":"10133:22:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10104:6:7"},"nodeType":"YulFunctionCall","src":"10104:52:7"},"nodeType":"YulExpressionStatement","src":"10104:52:7"},{"nodeType":"YulVariableDeclaration","src":"10165:42:7","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10195:6:7"},{"name":"_1","nodeType":"YulIdentifier","src":"10203:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10191:3:7"},"nodeType":"YulFunctionCall","src":"10191:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10185:5:7"},"nodeType":"YulFunctionCall","src":"10185:22:7"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"10169:12:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10227:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"10238:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10223:3:7"},"nodeType":"YulFunctionCall","src":"10223:19:7"},{"kind":"number","nodeType":"YulLiteral","src":"10244:4:7","type":"","value":"0x60"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10216:6:7"},"nodeType":"YulFunctionCall","src":"10216:33:7"},"nodeType":"YulExpressionStatement","src":"10216:33:7"},{"nodeType":"YulVariableDeclaration","src":"10258:63:7","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"10287:12:7"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10305:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"10316:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10301:3:7"},"nodeType":"YulFunctionCall","src":"10301:19:7"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10269:17:7"},"nodeType":"YulFunctionCall","src":"10269:52:7"},"variables":[{"name":"end","nodeType":"YulTypedName","src":"10262:3:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10341:9:7"},{"name":"_2","nodeType":"YulIdentifier","src":"10352:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10337:3:7"},"nodeType":"YulFunctionCall","src":"10337:18:7"},{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"10361:3:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"10366:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10357:3:7"},"nodeType":"YulFunctionCall","src":"10357:19:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10330:6:7"},"nodeType":"YulFunctionCall","src":"10330:47:7"},"nodeType":"YulExpressionStatement","src":"10330:47:7"},{"nodeType":"YulVariableDeclaration","src":"10386:16:7","value":{"kind":"number","nodeType":"YulLiteral","src":"10396:6:7","type":"","value":"0x0160"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"10390:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10411:35:7","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10439:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10433:5:7"},"nodeType":"YulFunctionCall","src":"10433:13:7"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"10415:14:7","type":""}]},{"expression":{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"10462:3:7"},{"name":"_3","nodeType":"YulIdentifier","src":"10467:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10455:6:7"},"nodeType":"YulFunctionCall","src":"10455:15:7"},"nodeType":"YulExpressionStatement","src":"10455:15:7"},{"nodeType":"YulVariableDeclaration","src":"10479:61:7","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"10511:14:7"},{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"10531:3:7"},{"name":"_3","nodeType":"YulIdentifier","src":"10536:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10527:3:7"},"nodeType":"YulFunctionCall","src":"10527:12:7"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"10493:17:7"},"nodeType":"YulFunctionCall","src":"10493:47:7"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"10483:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10549:44:7","value":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10581:6:7"},{"name":"_2","nodeType":"YulIdentifier","src":"10589:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10577:3:7"},"nodeType":"YulFunctionCall","src":"10577:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10571:5:7"},"nodeType":"YulFunctionCall","src":"10571:22:7"},"variables":[{"name":"memberValue0_2","nodeType":"YulTypedName","src":"10553:14:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"10613:3:7"},{"name":"_2","nodeType":"YulIdentifier","src":"10618:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10609:3:7"},"nodeType":"YulFunctionCall","src":"10609:12:7"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"10627:6:7"},{"name":"end","nodeType":"YulIdentifier","src":"10635:3:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10623:3:7"},"nodeType":"YulFunctionCall","src":"10623:16:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10602:6:7"},"nodeType":"YulFunctionCall","src":"10602:38:7"},"nodeType":"YulExpressionStatement","src":"10602:38:7"},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"10656:6:7"},{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"10670:14:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10664:5:7"},"nodeType":"YulFunctionCall","src":"10664:21:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10649:6:7"},"nodeType":"YulFunctionCall","src":"10649:37:7"},"nodeType":"YulExpressionStatement","src":"10649:37:7"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"10706:6:7"},{"name":"_2","nodeType":"YulIdentifier","src":"10714:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10702:3:7"},"nodeType":"YulFunctionCall","src":"10702:15:7"},{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"10729:14:7"},{"name":"_2","nodeType":"YulIdentifier","src":"10745:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10725:3:7"},"nodeType":"YulFunctionCall","src":"10725:23:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10719:5:7"},"nodeType":"YulFunctionCall","src":"10719:30:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10695:6:7"},"nodeType":"YulFunctionCall","src":"10695:55:7"},"nodeType":"YulExpressionStatement","src":"10695:55:7"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"10770:6:7"},{"name":"_1","nodeType":"YulIdentifier","src":"10778:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10766:3:7"},"nodeType":"YulFunctionCall","src":"10766:15:7"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"10807:14:7"},{"name":"_1","nodeType":"YulIdentifier","src":"10823:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10803:3:7"},"nodeType":"YulFunctionCall","src":"10803:23:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10797:5:7"},"nodeType":"YulFunctionCall","src":"10797:30:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10790:6:7"},"nodeType":"YulFunctionCall","src":"10790:38:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10783:6:7"},"nodeType":"YulFunctionCall","src":"10783:46:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10759:6:7"},"nodeType":"YulFunctionCall","src":"10759:71:7"},"nodeType":"YulExpressionStatement","src":"10759:71:7"},{"nodeType":"YulVariableDeclaration","src":"10839:54:7","value":{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"10871:14:7"},{"kind":"number","nodeType":"YulLiteral","src":"10887:4:7","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10867:3:7"},"nodeType":"YulFunctionCall","src":"10867:25:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10861:5:7"},"nodeType":"YulFunctionCall","src":"10861:32:7"},"variables":[{"name":"memberValue0_3","nodeType":"YulTypedName","src":"10843:14:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10902:24:7","value":{"kind":"number","nodeType":"YulLiteral","src":"10912:14:7","type":"","value":"0xffffffffffff"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"10906:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"10946:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"10954:4:7","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10942:3:7"},"nodeType":"YulFunctionCall","src":"10942:17:7"},{"arguments":[{"name":"memberValue0_3","nodeType":"YulIdentifier","src":"10965:14:7"},{"name":"_4","nodeType":"YulIdentifier","src":"10981:2:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10961:3:7"},"nodeType":"YulFunctionCall","src":"10961:23:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10935:6:7"},"nodeType":"YulFunctionCall","src":"10935:50:7"},"nodeType":"YulExpressionStatement","src":"10935:50:7"},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"11005:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"11013:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11001:3:7"},"nodeType":"YulFunctionCall","src":"11001:16:7"},{"arguments":[{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"11033:14:7"},{"kind":"number","nodeType":"YulLiteral","src":"11049:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11029:3:7"},"nodeType":"YulFunctionCall","src":"11029:24:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11023:5:7"},"nodeType":"YulFunctionCall","src":"11023:31:7"},{"name":"_4","nodeType":"YulIdentifier","src":"11056:2:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11019:3:7"},"nodeType":"YulFunctionCall","src":"11019:40:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10994:6:7"},"nodeType":"YulFunctionCall","src":"10994:66:7"},"nodeType":"YulExpressionStatement","src":"10994:66:7"},{"nodeType":"YulVariableDeclaration","src":"11069:53:7","value":{"arguments":[{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"11101:14:7"},{"kind":"number","nodeType":"YulLiteral","src":"11117:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11097:3:7"},"nodeType":"YulFunctionCall","src":"11097:24:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11091:5:7"},"nodeType":"YulFunctionCall","src":"11091:31:7"},"variables":[{"name":"memberValue0_4","nodeType":"YulTypedName","src":"11073:14:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"11142:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"11150:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11138:3:7"},"nodeType":"YulFunctionCall","src":"11138:16:7"},{"kind":"number","nodeType":"YulLiteral","src":"11156:4:7","type":"","value":"0xc0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11131:6:7"},"nodeType":"YulFunctionCall","src":"11131:30:7"},"nodeType":"YulExpressionStatement","src":"11131:30:7"},{"nodeType":"YulVariableDeclaration","src":"11170:65:7","value":{"arguments":[{"name":"memberValue0_4","nodeType":"YulIdentifier","src":"11201:14:7"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"11221:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"11229:4:7","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11217:3:7"},"nodeType":"YulFunctionCall","src":"11217:17:7"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"11183:17:7"},"nodeType":"YulFunctionCall","src":"11183:52:7"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"11174:5:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11244:44:7","value":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11276:6:7"},{"name":"_1","nodeType":"YulIdentifier","src":"11284:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11272:3:7"},"nodeType":"YulFunctionCall","src":"11272:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11266:5:7"},"nodeType":"YulFunctionCall","src":"11266:22:7"},"variables":[{"name":"memberValue0_5","nodeType":"YulTypedName","src":"11248:14:7","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_5","nodeType":"YulIdentifier","src":"11325:14:7"},{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"11345:3:7"},{"name":"_1","nodeType":"YulIdentifier","src":"11350:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11341:3:7"},"nodeType":"YulFunctionCall","src":"11341:12:7"}],"functionName":{"name":"abi_encode_struct_StakeInfo","nodeType":"YulIdentifier","src":"11297:27:7"},"nodeType":"YulFunctionCall","src":"11297:57:7"},"nodeType":"YulExpressionStatement","src":"11297:57:7"},{"nodeType":"YulVariableDeclaration","src":"11363:46:7","value":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11395:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"11403:4:7","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11391:3:7"},"nodeType":"YulFunctionCall","src":"11391:17:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11385:5:7"},"nodeType":"YulFunctionCall","src":"11385:24:7"},"variables":[{"name":"memberValue0_6","nodeType":"YulTypedName","src":"11367:14:7","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_6","nodeType":"YulIdentifier","src":"11446:14:7"},{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"11466:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"11471:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11462:3:7"},"nodeType":"YulFunctionCall","src":"11462:13:7"}],"functionName":{"name":"abi_encode_struct_StakeInfo","nodeType":"YulIdentifier","src":"11418:27:7"},"nodeType":"YulFunctionCall","src":"11418:58:7"},"nodeType":"YulExpressionStatement","src":"11418:58:7"},{"nodeType":"YulVariableDeclaration","src":"11485:45:7","value":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11517:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"11525:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11513:3:7"},"nodeType":"YulFunctionCall","src":"11513:16:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11507:5:7"},"nodeType":"YulFunctionCall","src":"11507:23:7"},"variables":[{"name":"memberValue0_7","nodeType":"YulTypedName","src":"11489:14:7","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_7","nodeType":"YulIdentifier","src":"11567:14:7"},{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"11587:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"11592:4:7","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11583:3:7"},"nodeType":"YulFunctionCall","src":"11583:14:7"}],"functionName":{"name":"abi_encode_struct_StakeInfo","nodeType":"YulIdentifier","src":"11539:27:7"},"nodeType":"YulFunctionCall","src":"11539:59:7"},"nodeType":"YulExpressionStatement","src":"11539:59:7"},{"nodeType":"YulVariableDeclaration","src":"11607:45:7","value":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11639:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"11647:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11635:3:7"},"nodeType":"YulFunctionCall","src":"11635:16:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11629:5:7"},"nodeType":"YulFunctionCall","src":"11629:23:7"},"variables":[{"name":"memberValue0_8","nodeType":"YulTypedName","src":"11611:14:7","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_8","nodeType":"YulIdentifier","src":"11699:14:7"},{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"11719:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"11724:6:7","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11715:3:7"},"nodeType":"YulFunctionCall","src":"11715:16:7"}],"functionName":{"name":"abi_encode_struct_AggregatorStakeInfo","nodeType":"YulIdentifier","src":"11661:37:7"},"nodeType":"YulFunctionCall","src":"11661:71:7"},"nodeType":"YulExpressionStatement","src":"11661:71:7"},{"nodeType":"YulAssignment","src":"11741:13:7","value":{"name":"end_1","nodeType":"YulIdentifier","src":"11749:5:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11741:4:7"}]}]},"name":"abi_encode_tuple_t_struct$_FailedOpStatus_$33_memory_ptr_t_struct$_Response_$51_memory_ptr__to_t_struct$_FailedOpStatus_$33_memory_ptr_t_struct$_Response_$51_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9915:9:7","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9926:6:7","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9934:6:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9945:4:7","type":""}],"src":"9717:2043:7"},{"body":{"nodeType":"YulBlock","src":"11797:152:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11814:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11817:77:7","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11807:6:7"},"nodeType":"YulFunctionCall","src":"11807:88:7"},"nodeType":"YulExpressionStatement","src":"11807:88:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11911:1:7","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11914:4:7","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11904:6:7"},"nodeType":"YulFunctionCall","src":"11904:15:7"},"nodeType":"YulExpressionStatement","src":"11904:15:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11935:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11938:4:7","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11928:6:7"},"nodeType":"YulFunctionCall","src":"11928:15:7"},"nodeType":"YulExpressionStatement","src":"11928:15:7"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"11765:184:7"},{"body":{"nodeType":"YulBlock","src":"12117:1393:7","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12134:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"12145:2:7","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12127:6:7"},"nodeType":"YulFunctionCall","src":"12127:21:7"},"nodeType":"YulExpressionStatement","src":"12127:21:7"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12182:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12176:5:7"},"nodeType":"YulFunctionCall","src":"12176:13:7"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12195:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"12206:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12191:3:7"},"nodeType":"YulFunctionCall","src":"12191:18:7"}],"functionName":{"name":"abi_encode_address","nodeType":"YulIdentifier","src":"12157:18:7"},"nodeType":"YulFunctionCall","src":"12157:53:7"},"nodeType":"YulExpressionStatement","src":"12157:53:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12230:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"12241:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12226:3:7"},"nodeType":"YulFunctionCall","src":"12226:18:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12256:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"12264:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12252:3:7"},"nodeType":"YulFunctionCall","src":"12252:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12246:5:7"},"nodeType":"YulFunctionCall","src":"12246:22:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12219:6:7"},"nodeType":"YulFunctionCall","src":"12219:50:7"},"nodeType":"YulExpressionStatement","src":"12219:50:7"},{"nodeType":"YulVariableDeclaration","src":"12278:42:7","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12308:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"12316:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12304:3:7"},"nodeType":"YulFunctionCall","src":"12304:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12298:5:7"},"nodeType":"YulFunctionCall","src":"12298:22:7"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"12282:12:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12329:16:7","value":{"kind":"number","nodeType":"YulLiteral","src":"12339:6:7","type":"","value":"0x0160"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12333:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12365:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"12376:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12361:3:7"},"nodeType":"YulFunctionCall","src":"12361:18:7"},{"name":"_1","nodeType":"YulIdentifier","src":"12381:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12354:6:7"},"nodeType":"YulFunctionCall","src":"12354:30:7"},"nodeType":"YulExpressionStatement","src":"12354:30:7"},{"nodeType":"YulVariableDeclaration","src":"12393:66:7","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"12425:12:7"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12443:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"12454:3:7","type":"","value":"384"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12439:3:7"},"nodeType":"YulFunctionCall","src":"12439:19:7"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"12407:17:7"},"nodeType":"YulFunctionCall","src":"12407:52:7"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"12397:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12468:44:7","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12500:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"12508:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12496:3:7"},"nodeType":"YulFunctionCall","src":"12496:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12490:5:7"},"nodeType":"YulFunctionCall","src":"12490:22:7"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"12472:14:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12521:76:7","value":{"kind":"number","nodeType":"YulLiteral","src":"12531:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"12525:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12617:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"12628:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12613:3:7"},"nodeType":"YulFunctionCall","src":"12613:19:7"},{"arguments":[{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"12642:6:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"12650:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12638:3:7"},"nodeType":"YulFunctionCall","src":"12638:22:7"},{"name":"_2","nodeType":"YulIdentifier","src":"12662:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12634:3:7"},"nodeType":"YulFunctionCall","src":"12634:31:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12606:6:7"},"nodeType":"YulFunctionCall","src":"12606:60:7"},"nodeType":"YulExpressionStatement","src":"12606:60:7"},{"nodeType":"YulVariableDeclaration","src":"12675:55:7","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"12707:14:7"},{"name":"tail_1","nodeType":"YulIdentifier","src":"12723:6:7"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"12689:17:7"},"nodeType":"YulFunctionCall","src":"12689:41:7"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"12679:6:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12750:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"12761:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12746:3:7"},"nodeType":"YulFunctionCall","src":"12746:19:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12777:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"12785:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12773:3:7"},"nodeType":"YulFunctionCall","src":"12773:16:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12767:5:7"},"nodeType":"YulFunctionCall","src":"12767:23:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12739:6:7"},"nodeType":"YulFunctionCall","src":"12739:52:7"},"nodeType":"YulExpressionStatement","src":"12739:52:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12811:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"12822:3:7","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12807:3:7"},"nodeType":"YulFunctionCall","src":"12807:19:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12838:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"12846:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12834:3:7"},"nodeType":"YulFunctionCall","src":"12834:16:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12828:5:7"},"nodeType":"YulFunctionCall","src":"12828:23:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12800:6:7"},"nodeType":"YulFunctionCall","src":"12800:52:7"},"nodeType":"YulExpressionStatement","src":"12800:52:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12872:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"12883:3:7","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12868:3:7"},"nodeType":"YulFunctionCall","src":"12868:19:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12899:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"12907:3:7","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12895:3:7"},"nodeType":"YulFunctionCall","src":"12895:16:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12889:5:7"},"nodeType":"YulFunctionCall","src":"12889:23:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12861:6:7"},"nodeType":"YulFunctionCall","src":"12861:52:7"},"nodeType":"YulExpressionStatement","src":"12861:52:7"},{"nodeType":"YulVariableDeclaration","src":"12922:33:7","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12942:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"12950:3:7","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12938:3:7"},"nodeType":"YulFunctionCall","src":"12938:16:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12932:5:7"},"nodeType":"YulFunctionCall","src":"12932:23:7"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"12926:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12964:13:7","value":{"kind":"number","nodeType":"YulLiteral","src":"12974:3:7","type":"","value":"256"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"12968:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12997:9:7"},{"name":"_4","nodeType":"YulIdentifier","src":"13008:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12993:3:7"},"nodeType":"YulFunctionCall","src":"12993:18:7"},{"name":"_3","nodeType":"YulIdentifier","src":"13013:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12986:6:7"},"nodeType":"YulFunctionCall","src":"12986:30:7"},"nodeType":"YulExpressionStatement","src":"12986:30:7"},{"nodeType":"YulVariableDeclaration","src":"13025:32:7","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13045:6:7"},{"name":"_4","nodeType":"YulIdentifier","src":"13053:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13041:3:7"},"nodeType":"YulFunctionCall","src":"13041:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13035:5:7"},"nodeType":"YulFunctionCall","src":"13035:22:7"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"13029:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13066:13:7","value":{"kind":"number","nodeType":"YulLiteral","src":"13076:3:7","type":"","value":"288"},"variables":[{"name":"_6","nodeType":"YulTypedName","src":"13070:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13099:9:7"},{"name":"_6","nodeType":"YulIdentifier","src":"13110:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13095:3:7"},"nodeType":"YulFunctionCall","src":"13095:18:7"},{"name":"_5","nodeType":"YulIdentifier","src":"13115:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13088:6:7"},"nodeType":"YulFunctionCall","src":"13088:30:7"},"nodeType":"YulExpressionStatement","src":"13088:30:7"},{"nodeType":"YulVariableDeclaration","src":"13127:44:7","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13159:6:7"},{"name":"_6","nodeType":"YulIdentifier","src":"13167:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13155:3:7"},"nodeType":"YulFunctionCall","src":"13155:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13149:5:7"},"nodeType":"YulFunctionCall","src":"13149:22:7"},"variables":[{"name":"memberValue0_2","nodeType":"YulTypedName","src":"13131:14:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13180:13:7","value":{"kind":"number","nodeType":"YulLiteral","src":"13190:3:7","type":"","value":"320"},"variables":[{"name":"_7","nodeType":"YulTypedName","src":"13184:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13213:9:7"},{"name":"_7","nodeType":"YulIdentifier","src":"13224:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13209:3:7"},"nodeType":"YulFunctionCall","src":"13209:18:7"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"13237:6:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"13245:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13233:3:7"},"nodeType":"YulFunctionCall","src":"13233:22:7"},{"name":"_2","nodeType":"YulIdentifier","src":"13257:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13229:3:7"},"nodeType":"YulFunctionCall","src":"13229:31:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13202:6:7"},"nodeType":"YulFunctionCall","src":"13202:59:7"},"nodeType":"YulExpressionStatement","src":"13202:59:7"},{"nodeType":"YulVariableDeclaration","src":"13270:55:7","value":{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"13302:14:7"},{"name":"tail_2","nodeType":"YulIdentifier","src":"13318:6:7"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"13284:17:7"},"nodeType":"YulFunctionCall","src":"13284:41:7"},"variables":[{"name":"tail_3","nodeType":"YulTypedName","src":"13274:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13334:44:7","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13366:6:7"},{"name":"_7","nodeType":"YulIdentifier","src":"13374:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13362:3:7"},"nodeType":"YulFunctionCall","src":"13362:15:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13356:5:7"},"nodeType":"YulFunctionCall","src":"13356:22:7"},"variables":[{"name":"memberValue0_3","nodeType":"YulTypedName","src":"13338:14:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13398:9:7"},{"name":"_1","nodeType":"YulIdentifier","src":"13409:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13394:3:7"},"nodeType":"YulFunctionCall","src":"13394:18:7"},{"arguments":[{"arguments":[{"name":"tail_3","nodeType":"YulIdentifier","src":"13422:6:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"13430:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13418:3:7"},"nodeType":"YulFunctionCall","src":"13418:22:7"},{"name":"_2","nodeType":"YulIdentifier","src":"13442:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13414:3:7"},"nodeType":"YulFunctionCall","src":"13414:31:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13387:6:7"},"nodeType":"YulFunctionCall","src":"13387:59:7"},"nodeType":"YulExpressionStatement","src":"13387:59:7"},{"nodeType":"YulAssignment","src":"13455:49:7","value":{"arguments":[{"name":"memberValue0_3","nodeType":"YulIdentifier","src":"13481:14:7"},{"name":"tail_3","nodeType":"YulIdentifier","src":"13497:6:7"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"13463:17:7"},"nodeType":"YulFunctionCall","src":"13463:41:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13455:4:7"}]}]},"name":"abi_encode_tuple_t_struct$_UserOperation_$1149_memory_ptr__to_t_struct$_UserOperation_$1149_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12086:9:7","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12097:6:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12108:4:7","type":""}],"src":"11954:1556:7"},{"body":{"nodeType":"YulBlock","src":"13596:103:7","statements":[{"body":{"nodeType":"YulBlock","src":"13642:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13651:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13654:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13644:6:7"},"nodeType":"YulFunctionCall","src":"13644:12:7"},"nodeType":"YulExpressionStatement","src":"13644:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13617:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"13626:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13613:3:7"},"nodeType":"YulFunctionCall","src":"13613:23:7"},{"kind":"number","nodeType":"YulLiteral","src":"13638:2:7","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13609:3:7"},"nodeType":"YulFunctionCall","src":"13609:32:7"},"nodeType":"YulIf","src":"13606:52:7"},{"nodeType":"YulAssignment","src":"13667:26:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13683:9:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13677:5:7"},"nodeType":"YulFunctionCall","src":"13677:16:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13667:6:7"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13562:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13573:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13585:6:7","type":""}],"src":"13515:184:7"},{"body":{"nodeType":"YulBlock","src":"13736:152:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13753:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13756:77:7","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13746:6:7"},"nodeType":"YulFunctionCall","src":"13746:88:7"},"nodeType":"YulExpressionStatement","src":"13746:88:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13850:1:7","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13853:4:7","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13843:6:7"},"nodeType":"YulFunctionCall","src":"13843:15:7"},"nodeType":"YulExpressionStatement","src":"13843:15:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13874:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13877:4:7","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13867:6:7"},"nodeType":"YulFunctionCall","src":"13867:15:7"},"nodeType":"YulExpressionStatement","src":"13867:15:7"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"13704:184:7"},{"body":{"nodeType":"YulBlock","src":"13940:148:7","statements":[{"body":{"nodeType":"YulBlock","src":"14031:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14033:16:7"},"nodeType":"YulFunctionCall","src":"14033:18:7"},"nodeType":"YulExpressionStatement","src":"14033:18:7"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13956:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"13963:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13953:2:7"},"nodeType":"YulFunctionCall","src":"13953:77:7"},"nodeType":"YulIf","src":"13950:103:7"},{"nodeType":"YulAssignment","src":"14062:20:7","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14073:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"14080:1:7","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14069:3:7"},"nodeType":"YulFunctionCall","src":"14069:13:7"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"14062:3:7"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13922:5:7","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13932:3:7","type":""}],"src":"13893:195:7"},{"body":{"nodeType":"YulBlock","src":"14159:259:7","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14176:3:7"},{"name":"length","nodeType":"YulIdentifier","src":"14181:6:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14169:6:7"},"nodeType":"YulFunctionCall","src":"14169:19:7"},"nodeType":"YulExpressionStatement","src":"14169:19:7"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14214:3:7"},{"kind":"number","nodeType":"YulLiteral","src":"14219:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14210:3:7"},"nodeType":"YulFunctionCall","src":"14210:14:7"},{"name":"start","nodeType":"YulIdentifier","src":"14226:5:7"},{"name":"length","nodeType":"YulIdentifier","src":"14233:6:7"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"14197:12:7"},"nodeType":"YulFunctionCall","src":"14197:43:7"},"nodeType":"YulExpressionStatement","src":"14197:43:7"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14264:3:7"},{"name":"length","nodeType":"YulIdentifier","src":"14269:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14260:3:7"},"nodeType":"YulFunctionCall","src":"14260:16:7"},{"kind":"number","nodeType":"YulLiteral","src":"14278:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14256:3:7"},"nodeType":"YulFunctionCall","src":"14256:27:7"},{"kind":"number","nodeType":"YulLiteral","src":"14285:1:7","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14249:6:7"},"nodeType":"YulFunctionCall","src":"14249:38:7"},"nodeType":"YulExpressionStatement","src":"14249:38:7"},{"nodeType":"YulAssignment","src":"14296:116:7","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14311:3:7"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14324:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"14332:2:7","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14320:3:7"},"nodeType":"YulFunctionCall","src":"14320:15:7"},{"kind":"number","nodeType":"YulLiteral","src":"14337:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14316:3:7"},"nodeType":"YulFunctionCall","src":"14316:88:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14307:3:7"},"nodeType":"YulFunctionCall","src":"14307:98:7"},{"kind":"number","nodeType":"YulLiteral","src":"14407:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14303:3:7"},"nodeType":"YulFunctionCall","src":"14303:109:7"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14296:3:7"}]}]},"name":"abi_encode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"14128:5:7","type":""},{"name":"length","nodeType":"YulTypedName","src":"14135:6:7","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14143:3:7","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14151:3:7","type":""}],"src":"14093:325:7"},{"body":{"nodeType":"YulBlock","src":"14552:115:7","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14569:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"14580:2:7","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14562:6:7"},"nodeType":"YulFunctionCall","src":"14562:21:7"},"nodeType":"YulExpressionStatement","src":"14562:21:7"},{"nodeType":"YulAssignment","src":"14592:69:7","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14626:6:7"},{"name":"value1","nodeType":"YulIdentifier","src":"14634:6:7"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14646:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"14657:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14642:3:7"},"nodeType":"YulFunctionCall","src":"14642:18:7"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"14600:25:7"},"nodeType":"YulFunctionCall","src":"14600:61:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14592:4:7"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14513:9:7","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14524:6:7","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14532:6:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14543:4:7","type":""}],"src":"14423:244:7"},{"body":{"nodeType":"YulBlock","src":"14765:314:7","statements":[{"nodeType":"YulVariableDeclaration","src":"14775:26:7","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14795:5:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14789:5:7"},"nodeType":"YulFunctionCall","src":"14789:12:7"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14779:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14810:33:7","value":{"arguments":[{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14830:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"14837:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14826:3:7"},"nodeType":"YulFunctionCall","src":"14826:16:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14820:5:7"},"nodeType":"YulFunctionCall","src":"14820:23:7"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14814:2:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14852:76:7","value":{"kind":"number","nodeType":"YulLiteral","src":"14862:66:7","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"14856:2:7","type":""}]},{"nodeType":"YulAssignment","src":"14937:20:7","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"14950:2:7"},{"name":"_2","nodeType":"YulIdentifier","src":"14954:2:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14946:3:7"},"nodeType":"YulFunctionCall","src":"14946:11:7"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"14937:5:7"}]},{"body":{"nodeType":"YulBlock","src":"14991:82:7","statements":[{"nodeType":"YulAssignment","src":"15005:58:7","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"15022:2:7"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15034:1:7","type":"","value":"3"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15041:1:7","type":"","value":"4"},{"name":"length","nodeType":"YulIdentifier","src":"15044:6:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15037:3:7"},"nodeType":"YulFunctionCall","src":"15037:14:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15030:3:7"},"nodeType":"YulFunctionCall","src":"15030:22:7"},{"name":"_2","nodeType":"YulIdentifier","src":"15054:2:7"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15026:3:7"},"nodeType":"YulFunctionCall","src":"15026:31:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15018:3:7"},"nodeType":"YulFunctionCall","src":"15018:40:7"},{"name":"_2","nodeType":"YulIdentifier","src":"15060:2:7"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15014:3:7"},"nodeType":"YulFunctionCall","src":"15014:49:7"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"15005:5:7"}]}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14972:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"14980:1:7","type":"","value":"4"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14969:2:7"},"nodeType":"YulFunctionCall","src":"14969:13:7"},"nodeType":"YulIf","src":"14966:107:7"}]},"name":"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"14745:5:7","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"14755:5:7","type":""}],"src":"14672:407:7"},{"body":{"nodeType":"YulBlock","src":"15133:76:7","statements":[{"body":{"nodeType":"YulBlock","src":"15155:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"15157:16:7"},"nodeType":"YulFunctionCall","src":"15157:18:7"},"nodeType":"YulExpressionStatement","src":"15157:18:7"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15149:1:7"},{"name":"y","nodeType":"YulIdentifier","src":"15152:1:7"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15146:2:7"},"nodeType":"YulFunctionCall","src":"15146:8:7"},"nodeType":"YulIf","src":"15143:34:7"},{"nodeType":"YulAssignment","src":"15186:17:7","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"15198:1:7"},{"name":"y","nodeType":"YulIdentifier","src":"15201:1:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15194:3:7"},"nodeType":"YulFunctionCall","src":"15194:9:7"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"15186:4:7"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"15115:1:7","type":""},{"name":"y","nodeType":"YulTypedName","src":"15118:1:7","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"15124:4:7","type":""}],"src":"15084:125:7"},{"body":{"nodeType":"YulBlock","src":"15303:183:7","statements":[{"body":{"nodeType":"YulBlock","src":"15349:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15358:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15361:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15351:6:7"},"nodeType":"YulFunctionCall","src":"15351:12:7"},"nodeType":"YulExpressionStatement","src":"15351:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15324:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"15333:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15320:3:7"},"nodeType":"YulFunctionCall","src":"15320:23:7"},{"kind":"number","nodeType":"YulLiteral","src":"15345:2:7","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15316:3:7"},"nodeType":"YulFunctionCall","src":"15316:32:7"},"nodeType":"YulIf","src":"15313:52:7"},{"nodeType":"YulVariableDeclaration","src":"15374:29:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15393:9:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15387:5:7"},"nodeType":"YulFunctionCall","src":"15387:16:7"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15378:5:7","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15450:5:7"}],"functionName":{"name":"validator_revert_contract_IEntryPoint","nodeType":"YulIdentifier","src":"15412:37:7"},"nodeType":"YulFunctionCall","src":"15412:44:7"},"nodeType":"YulExpressionStatement","src":"15412:44:7"},{"nodeType":"YulAssignment","src":"15465:15:7","value":{"name":"value","nodeType":"YulIdentifier","src":"15475:5:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15465:6:7"}]}]},"name":"abi_decode_tuple_t_address_payable_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15269:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15280:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15292:6:7","type":""}],"src":"15214:272:7"},{"body":{"nodeType":"YulBlock","src":"15665:166:7","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15682:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"15693:2:7","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15675:6:7"},"nodeType":"YulFunctionCall","src":"15675:21:7"},"nodeType":"YulExpressionStatement","src":"15675:21:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15716:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"15727:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15712:3:7"},"nodeType":"YulFunctionCall","src":"15712:18:7"},{"kind":"number","nodeType":"YulLiteral","src":"15732:2:7","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15705:6:7"},"nodeType":"YulFunctionCall","src":"15705:30:7"},"nodeType":"YulExpressionStatement","src":"15705:30:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15755:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"15766:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15751:3:7"},"nodeType":"YulFunctionCall","src":"15751:18:7"},{"hexValue":"496e76616c696420696e6974436f6465","kind":"string","nodeType":"YulLiteral","src":"15771:18:7","type":"","value":"Invalid initCode"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15744:6:7"},"nodeType":"YulFunctionCall","src":"15744:46:7"},"nodeType":"YulExpressionStatement","src":"15744:46:7"},{"nodeType":"YulAssignment","src":"15799:26:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15811:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"15822:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15807:3:7"},"nodeType":"YulFunctionCall","src":"15807:18:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15799:4:7"}]}]},"name":"abi_encode_tuple_t_stringliteral_41358789453c2b61b04d9046ed6bd1617530e1f3f5c8b4843a7b086398036cc8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15642:9:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15656:4:7","type":""}],"src":"15491:340:7"},{"body":{"nodeType":"YulBlock","src":"15912:483:7","statements":[{"nodeType":"YulVariableDeclaration","src":"15922:43:7","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"15961:3:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15948:12:7"},"nodeType":"YulFunctionCall","src":"15948:17:7"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"15926:18:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"16113:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16122:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16125:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16115:6:7"},"nodeType":"YulFunctionCall","src":"16115:12:7"},"nodeType":"YulExpressionStatement","src":"16115:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"15988:18:7"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"16016:12:7"},"nodeType":"YulFunctionCall","src":"16016:14:7"},{"name":"base_ref","nodeType":"YulIdentifier","src":"16032:8:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16012:3:7"},"nodeType":"YulFunctionCall","src":"16012:29:7"},{"kind":"number","nodeType":"YulLiteral","src":"16043:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16008:3:7"},"nodeType":"YulFunctionCall","src":"16008:102:7"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15984:3:7"},"nodeType":"YulFunctionCall","src":"15984:127:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15977:6:7"},"nodeType":"YulFunctionCall","src":"15977:135:7"},"nodeType":"YulIf","src":"15974:155:7"},{"nodeType":"YulVariableDeclaration","src":"16138:48:7","value":{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"16157:18:7"},{"name":"base_ref","nodeType":"YulIdentifier","src":"16177:8:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16153:3:7"},"nodeType":"YulFunctionCall","src":"16153:33:7"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"16142:7:7","type":""}]},{"nodeType":"YulAssignment","src":"16195:31:7","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"16218:7:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16205:12:7"},"nodeType":"YulFunctionCall","src":"16205:21:7"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16195:6:7"}]},{"nodeType":"YulAssignment","src":"16235:27:7","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"16248:7:7"},{"kind":"number","nodeType":"YulLiteral","src":"16257:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16244:3:7"},"nodeType":"YulFunctionCall","src":"16244:18:7"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16235:5:7"}]},{"body":{"nodeType":"YulBlock","src":"16305:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16314:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16317:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16307:6:7"},"nodeType":"YulFunctionCall","src":"16307:12:7"},"nodeType":"YulExpressionStatement","src":"16307:12:7"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16277:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"16285:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16274:2:7"},"nodeType":"YulFunctionCall","src":"16274:30:7"},"nodeType":"YulIf","src":"16271:50:7"},{"body":{"nodeType":"YulBlock","src":"16373:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16382:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16385:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16375:6:7"},"nodeType":"YulFunctionCall","src":"16375:12:7"},"nodeType":"YulExpressionStatement","src":"16375:12:7"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16337:5:7"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"16348:12:7"},"nodeType":"YulFunctionCall","src":"16348:14:7"},{"name":"length","nodeType":"YulIdentifier","src":"16364:6:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16344:3:7"},"nodeType":"YulFunctionCall","src":"16344:27:7"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"16333:3:7"},"nodeType":"YulFunctionCall","src":"16333:39:7"},"nodeType":"YulIf","src":"16330:59:7"}]},"name":"calldata_access_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"15876:8:7","type":""},{"name":"ptr","nodeType":"YulTypedName","src":"15886:3:7","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"15894:5:7","type":""},{"name":"length","nodeType":"YulTypedName","src":"15901:6:7","type":""}],"src":"15836:559:7"},{"body":{"nodeType":"YulBlock","src":"16565:1694:7","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16582:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"16593:2:7","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16575:6:7"},"nodeType":"YulFunctionCall","src":"16575:21:7"},"nodeType":"YulExpressionStatement","src":"16575:21:7"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16643:6:7"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"16624:18:7"},"nodeType":"YulFunctionCall","src":"16624:26:7"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16656:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"16667:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16652:3:7"},"nodeType":"YulFunctionCall","src":"16652:18:7"}],"functionName":{"name":"abi_encode_address","nodeType":"YulIdentifier","src":"16605:18:7"},"nodeType":"YulFunctionCall","src":"16605:66:7"},"nodeType":"YulExpressionStatement","src":"16605:66:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16691:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"16702:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16687:3:7"},"nodeType":"YulFunctionCall","src":"16687:18:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16724:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"16732:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16720:3:7"},"nodeType":"YulFunctionCall","src":"16720:15:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16707:12:7"},"nodeType":"YulFunctionCall","src":"16707:29:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16680:6:7"},"nodeType":"YulFunctionCall","src":"16680:57:7"},"nodeType":"YulExpressionStatement","src":"16680:57:7"},{"nodeType":"YulVariableDeclaration","src":"16746:89:7","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16811:6:7"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16823:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"16831:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16819:3:7"},"nodeType":"YulFunctionCall","src":"16819:15:7"}],"functionName":{"name":"calldata_access_bytes_calldata","nodeType":"YulIdentifier","src":"16780:30:7"},"nodeType":"YulFunctionCall","src":"16780:55:7"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16750:12:7","type":""},{"name":"memberValue1","nodeType":"YulTypedName","src":"16764:12:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16844:16:7","value":{"kind":"number","nodeType":"YulLiteral","src":"16854:6:7","type":"","value":"0x0160"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16848:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16880:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"16891:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16876:3:7"},"nodeType":"YulFunctionCall","src":"16876:18:7"},{"name":"_1","nodeType":"YulIdentifier","src":"16896:2:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16869:6:7"},"nodeType":"YulFunctionCall","src":"16869:30:7"},"nodeType":"YulExpressionStatement","src":"16869:30:7"},{"nodeType":"YulVariableDeclaration","src":"16908:88:7","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16948:12:7"},{"name":"memberValue1","nodeType":"YulIdentifier","src":"16962:12:7"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16980:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"16991:3:7","type":"","value":"384"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16976:3:7"},"nodeType":"YulFunctionCall","src":"16976:19:7"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"16922:25:7"},"nodeType":"YulFunctionCall","src":"16922:74:7"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"16912:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17005:93:7","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17074:6:7"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17086:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"17094:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17082:3:7"},"nodeType":"YulFunctionCall","src":"17082:15:7"}],"functionName":{"name":"calldata_access_bytes_calldata","nodeType":"YulIdentifier","src":"17043:30:7"},"nodeType":"YulFunctionCall","src":"17043:55:7"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"17009:14:7","type":""},{"name":"memberValue1_1","nodeType":"YulTypedName","src":"17025:14:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17107:76:7","value":{"kind":"number","nodeType":"YulLiteral","src":"17117:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"17111:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17203:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"17214:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17199:3:7"},"nodeType":"YulFunctionCall","src":"17199:19:7"},{"arguments":[{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"17228:6:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"17236:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17224:3:7"},"nodeType":"YulFunctionCall","src":"17224:22:7"},{"name":"_2","nodeType":"YulIdentifier","src":"17248:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17220:3:7"},"nodeType":"YulFunctionCall","src":"17220:31:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17192:6:7"},"nodeType":"YulFunctionCall","src":"17192:60:7"},"nodeType":"YulExpressionStatement","src":"17192:60:7"},{"nodeType":"YulVariableDeclaration","src":"17261:79:7","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"17301:14:7"},{"name":"memberValue1_1","nodeType":"YulIdentifier","src":"17317:14:7"},{"name":"tail_1","nodeType":"YulIdentifier","src":"17333:6:7"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"17275:25:7"},"nodeType":"YulFunctionCall","src":"17275:65:7"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"17265:6:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17360:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"17371:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17356:3:7"},"nodeType":"YulFunctionCall","src":"17356:19:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17394:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"17402:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17390:3:7"},"nodeType":"YulFunctionCall","src":"17390:16:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17377:12:7"},"nodeType":"YulFunctionCall","src":"17377:30:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17349:6:7"},"nodeType":"YulFunctionCall","src":"17349:59:7"},"nodeType":"YulExpressionStatement","src":"17349:59:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17428:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"17439:3:7","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17424:3:7"},"nodeType":"YulFunctionCall","src":"17424:19:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17462:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"17470:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17458:3:7"},"nodeType":"YulFunctionCall","src":"17458:16:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17445:12:7"},"nodeType":"YulFunctionCall","src":"17445:30:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17417:6:7"},"nodeType":"YulFunctionCall","src":"17417:59:7"},"nodeType":"YulExpressionStatement","src":"17417:59:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17496:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"17507:3:7","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17492:3:7"},"nodeType":"YulFunctionCall","src":"17492:19:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17530:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"17538:3:7","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17526:3:7"},"nodeType":"YulFunctionCall","src":"17526:16:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17513:12:7"},"nodeType":"YulFunctionCall","src":"17513:30:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17485:6:7"},"nodeType":"YulFunctionCall","src":"17485:59:7"},"nodeType":"YulExpressionStatement","src":"17485:59:7"},{"nodeType":"YulVariableDeclaration","src":"17553:13:7","value":{"kind":"number","nodeType":"YulLiteral","src":"17563:3:7","type":"","value":"256"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"17557:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17586:9:7"},{"name":"_3","nodeType":"YulIdentifier","src":"17597:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17582:3:7"},"nodeType":"YulFunctionCall","src":"17582:18:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17619:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"17627:3:7","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17615:3:7"},"nodeType":"YulFunctionCall","src":"17615:16:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17602:12:7"},"nodeType":"YulFunctionCall","src":"17602:30:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17575:6:7"},"nodeType":"YulFunctionCall","src":"17575:58:7"},"nodeType":"YulExpressionStatement","src":"17575:58:7"},{"nodeType":"YulVariableDeclaration","src":"17642:13:7","value":{"kind":"number","nodeType":"YulLiteral","src":"17652:3:7","type":"","value":"288"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"17646:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17675:9:7"},{"name":"_4","nodeType":"YulIdentifier","src":"17686:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17671:3:7"},"nodeType":"YulFunctionCall","src":"17671:18:7"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17708:6:7"},{"name":"_3","nodeType":"YulIdentifier","src":"17716:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17704:3:7"},"nodeType":"YulFunctionCall","src":"17704:15:7"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17691:12:7"},"nodeType":"YulFunctionCall","src":"17691:29:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17664:6:7"},"nodeType":"YulFunctionCall","src":"17664:57:7"},"nodeType":"YulExpressionStatement","src":"17664:57:7"},{"nodeType":"YulVariableDeclaration","src":"17730:93:7","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17799:6:7"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17811:6:7"},{"name":"_4","nodeType":"YulIdentifier","src":"17819:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17807:3:7"},"nodeType":"YulFunctionCall","src":"17807:15:7"}],"functionName":{"name":"calldata_access_bytes_calldata","nodeType":"YulIdentifier","src":"17768:30:7"},"nodeType":"YulFunctionCall","src":"17768:55:7"},"variables":[{"name":"memberValue0_2","nodeType":"YulTypedName","src":"17734:14:7","type":""},{"name":"memberValue1_2","nodeType":"YulTypedName","src":"17750:14:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17832:13:7","value":{"kind":"number","nodeType":"YulLiteral","src":"17842:3:7","type":"","value":"320"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"17836:2:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17865:9:7"},{"name":"_5","nodeType":"YulIdentifier","src":"17876:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17861:3:7"},"nodeType":"YulFunctionCall","src":"17861:18:7"},{"arguments":[{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"17889:6:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"17897:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17885:3:7"},"nodeType":"YulFunctionCall","src":"17885:22:7"},{"name":"_2","nodeType":"YulIdentifier","src":"17909:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17881:3:7"},"nodeType":"YulFunctionCall","src":"17881:31:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17854:6:7"},"nodeType":"YulFunctionCall","src":"17854:59:7"},"nodeType":"YulExpressionStatement","src":"17854:59:7"},{"nodeType":"YulVariableDeclaration","src":"17922:79:7","value":{"arguments":[{"name":"memberValue0_2","nodeType":"YulIdentifier","src":"17962:14:7"},{"name":"memberValue1_2","nodeType":"YulIdentifier","src":"17978:14:7"},{"name":"tail_2","nodeType":"YulIdentifier","src":"17994:6:7"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"17936:25:7"},"nodeType":"YulFunctionCall","src":"17936:65:7"},"variables":[{"name":"tail_3","nodeType":"YulTypedName","src":"17926:6:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18010:93:7","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18079:6:7"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18091:6:7"},{"name":"_5","nodeType":"YulIdentifier","src":"18099:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18087:3:7"},"nodeType":"YulFunctionCall","src":"18087:15:7"}],"functionName":{"name":"calldata_access_bytes_calldata","nodeType":"YulIdentifier","src":"18048:30:7"},"nodeType":"YulFunctionCall","src":"18048:55:7"},"variables":[{"name":"memberValue0_3","nodeType":"YulTypedName","src":"18014:14:7","type":""},{"name":"memberValue1_3","nodeType":"YulTypedName","src":"18030:14:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18123:9:7"},{"name":"_1","nodeType":"YulIdentifier","src":"18134:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18119:3:7"},"nodeType":"YulFunctionCall","src":"18119:18:7"},{"arguments":[{"arguments":[{"name":"tail_3","nodeType":"YulIdentifier","src":"18147:6:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"18155:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18143:3:7"},"nodeType":"YulFunctionCall","src":"18143:22:7"},{"name":"_2","nodeType":"YulIdentifier","src":"18167:2:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18139:3:7"},"nodeType":"YulFunctionCall","src":"18139:31:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18112:6:7"},"nodeType":"YulFunctionCall","src":"18112:59:7"},"nodeType":"YulExpressionStatement","src":"18112:59:7"},{"nodeType":"YulAssignment","src":"18180:73:7","value":{"arguments":[{"name":"memberValue0_3","nodeType":"YulIdentifier","src":"18214:14:7"},{"name":"memberValue1_3","nodeType":"YulIdentifier","src":"18230:14:7"},{"name":"tail_3","nodeType":"YulIdentifier","src":"18246:6:7"}],"functionName":{"name":"abi_encode_bytes_calldata","nodeType":"YulIdentifier","src":"18188:25:7"},"nodeType":"YulFunctionCall","src":"18188:65:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18180:4:7"}]}]},"name":"abi_encode_tuple_t_struct$_UserOperation_$1149_calldata_ptr__to_t_struct$_UserOperation_$1149_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16534:9:7","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16545:6:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16556:4:7","type":""}],"src":"16400:1859:7"},{"body":{"nodeType":"YulBlock","src":"18323:112:7","statements":[{"nodeType":"YulAssignment","src":"18333:22:7","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18348:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18342:5:7"},"nodeType":"YulFunctionCall","src":"18342:13:7"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18333:5:7"}]},{"body":{"nodeType":"YulBlock","src":"18413:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18422:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18425:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18415:6:7"},"nodeType":"YulFunctionCall","src":"18415:12:7"},"nodeType":"YulExpressionStatement","src":"18415:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18377:5:7"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18388:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"18395:14:7","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18384:3:7"},"nodeType":"YulFunctionCall","src":"18384:26:7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18374:2:7"},"nodeType":"YulFunctionCall","src":"18374:37:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18367:6:7"},"nodeType":"YulFunctionCall","src":"18367:45:7"},"nodeType":"YulIf","src":"18364:65:7"}]},"name":"abi_decode_uint48_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"18302:6:7","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"18313:5:7","type":""}],"src":"18264:171:7"},{"body":{"nodeType":"YulBlock","src":"18525:222:7","statements":[{"nodeType":"YulAssignment","src":"18535:61:7","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"18588:6:7"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"18560:27:7"},"nodeType":"YulFunctionCall","src":"18560:35:7"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"18544:15:7"},"nodeType":"YulFunctionCall","src":"18544:52:7"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"18535:5:7"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"18612:5:7"},{"name":"length","nodeType":"YulIdentifier","src":"18619:6:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18605:6:7"},"nodeType":"YulFunctionCall","src":"18605:21:7"},"nodeType":"YulExpressionStatement","src":"18605:21:7"},{"body":{"nodeType":"YulBlock","src":"18664:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18673:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18676:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18666:6:7"},"nodeType":"YulFunctionCall","src":"18666:12:7"},"nodeType":"YulExpressionStatement","src":"18666:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18645:3:7"},{"name":"length","nodeType":"YulIdentifier","src":"18650:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18641:3:7"},"nodeType":"YulFunctionCall","src":"18641:16:7"},{"name":"end","nodeType":"YulIdentifier","src":"18659:3:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18638:2:7"},"nodeType":"YulFunctionCall","src":"18638:25:7"},"nodeType":"YulIf","src":"18635:45:7"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18711:3:7"},{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"18720:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"18727:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18716:3:7"},"nodeType":"YulFunctionCall","src":"18716:16:7"},{"name":"length","nodeType":"YulIdentifier","src":"18734:6:7"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"18689:21:7"},"nodeType":"YulFunctionCall","src":"18689:52:7"},"nodeType":"YulExpressionStatement","src":"18689:52:7"}]},"name":"abi_decode_available_length_bytes_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"18494:3:7","type":""},{"name":"length","nodeType":"YulTypedName","src":"18499:6:7","type":""},{"name":"end","nodeType":"YulTypedName","src":"18507:3:7","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"18515:5:7","type":""}],"src":"18440:307:7"},{"body":{"nodeType":"YulBlock","src":"18815:172:7","statements":[{"body":{"nodeType":"YulBlock","src":"18864:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18873:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18876:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18866:6:7"},"nodeType":"YulFunctionCall","src":"18866:12:7"},"nodeType":"YulExpressionStatement","src":"18866:12:7"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18843:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"18851:4:7","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18839:3:7"},"nodeType":"YulFunctionCall","src":"18839:17:7"},{"name":"end","nodeType":"YulIdentifier","src":"18858:3:7"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18835:3:7"},"nodeType":"YulFunctionCall","src":"18835:27:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18828:6:7"},"nodeType":"YulFunctionCall","src":"18828:35:7"},"nodeType":"YulIf","src":"18825:55:7"},{"nodeType":"YulAssignment","src":"18889:92:7","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18947:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"18955:4:7","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18943:3:7"},"nodeType":"YulFunctionCall","src":"18943:17:7"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18968:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18962:5:7"},"nodeType":"YulFunctionCall","src":"18962:13:7"},{"name":"end","nodeType":"YulIdentifier","src":"18977:3:7"}],"functionName":{"name":"abi_decode_available_length_bytes_fromMemory","nodeType":"YulIdentifier","src":"18898:44:7"},"nodeType":"YulFunctionCall","src":"18898:83:7"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"18889:5:7"}]}]},"name":"abi_decode_bytes_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"18789:6:7","type":""},{"name":"end","nodeType":"YulTypedName","src":"18797:3:7","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"18805:5:7","type":""}],"src":"18752:235:7"},{"body":{"nodeType":"YulBlock","src":"19070:728:7","statements":[{"body":{"nodeType":"YulBlock","src":"19114:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19123:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19126:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19116:6:7"},"nodeType":"YulFunctionCall","src":"19116:12:7"},"nodeType":"YulExpressionStatement","src":"19116:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"19091:3:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"19096:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19087:3:7"},"nodeType":"YulFunctionCall","src":"19087:19:7"},{"kind":"number","nodeType":"YulLiteral","src":"19108:4:7","type":"","value":"0xc0"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19083:3:7"},"nodeType":"YulFunctionCall","src":"19083:30:7"},"nodeType":"YulIf","src":"19080:50:7"},{"nodeType":"YulAssignment","src":"19139:31:7","value":{"arguments":[],"functionName":{"name":"allocate_memory_3429","nodeType":"YulIdentifier","src":"19148:20:7"},"nodeType":"YulFunctionCall","src":"19148:22:7"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19139:5:7"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19186:5:7"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19199:9:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19193:5:7"},"nodeType":"YulFunctionCall","src":"19193:16:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19179:6:7"},"nodeType":"YulFunctionCall","src":"19179:31:7"},"nodeType":"YulExpressionStatement","src":"19179:31:7"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19230:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"19237:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19226:3:7"},"nodeType":"YulFunctionCall","src":"19226:14:7"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19252:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"19263:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19248:3:7"},"nodeType":"YulFunctionCall","src":"19248:18:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19242:5:7"},"nodeType":"YulFunctionCall","src":"19242:25:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19219:6:7"},"nodeType":"YulFunctionCall","src":"19219:49:7"},"nodeType":"YulExpressionStatement","src":"19219:49:7"},{"nodeType":"YulVariableDeclaration","src":"19277:40:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19302:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"19313:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19298:3:7"},"nodeType":"YulFunctionCall","src":"19298:18:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19292:5:7"},"nodeType":"YulFunctionCall","src":"19292:25:7"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"19281:7:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"19374:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19383:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19386:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19376:6:7"},"nodeType":"YulFunctionCall","src":"19376:12:7"},"nodeType":"YulExpressionStatement","src":"19376:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"19339:7:7"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"19362:7:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19355:6:7"},"nodeType":"YulFunctionCall","src":"19355:15:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19348:6:7"},"nodeType":"YulFunctionCall","src":"19348:23:7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"19336:2:7"},"nodeType":"YulFunctionCall","src":"19336:36:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19329:6:7"},"nodeType":"YulFunctionCall","src":"19329:44:7"},"nodeType":"YulIf","src":"19326:64:7"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19410:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"19417:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19406:3:7"},"nodeType":"YulFunctionCall","src":"19406:14:7"},{"name":"value_1","nodeType":"YulIdentifier","src":"19422:7:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19399:6:7"},"nodeType":"YulFunctionCall","src":"19399:31:7"},"nodeType":"YulExpressionStatement","src":"19399:31:7"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19450:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"19457:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19446:3:7"},"nodeType":"YulFunctionCall","src":"19446:14:7"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19495:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"19506:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19491:3:7"},"nodeType":"YulFunctionCall","src":"19491:18:7"}],"functionName":{"name":"abi_decode_uint48_fromMemory","nodeType":"YulIdentifier","src":"19462:28:7"},"nodeType":"YulFunctionCall","src":"19462:48:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19439:6:7"},"nodeType":"YulFunctionCall","src":"19439:72:7"},"nodeType":"YulExpressionStatement","src":"19439:72:7"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19531:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"19538:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19527:3:7"},"nodeType":"YulFunctionCall","src":"19527:15:7"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19577:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"19588:3:7","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19573:3:7"},"nodeType":"YulFunctionCall","src":"19573:19:7"}],"functionName":{"name":"abi_decode_uint48_fromMemory","nodeType":"YulIdentifier","src":"19544:28:7"},"nodeType":"YulFunctionCall","src":"19544:49:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19520:6:7"},"nodeType":"YulFunctionCall","src":"19520:74:7"},"nodeType":"YulExpressionStatement","src":"19520:74:7"},{"nodeType":"YulVariableDeclaration","src":"19603:40:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19627:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"19638:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19623:3:7"},"nodeType":"YulFunctionCall","src":"19623:19:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19617:5:7"},"nodeType":"YulFunctionCall","src":"19617:26:7"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19607:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"19686:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19695:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19698:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19688:6:7"},"nodeType":"YulFunctionCall","src":"19688:12:7"},"nodeType":"YulExpressionStatement","src":"19688:12:7"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19658:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"19666:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19655:2:7"},"nodeType":"YulFunctionCall","src":"19655:30:7"},"nodeType":"YulIf","src":"19652:50:7"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19722:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"19729:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19718:3:7"},"nodeType":"YulFunctionCall","src":"19718:15:7"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19767:9:7"},{"name":"offset","nodeType":"YulIdentifier","src":"19778:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19763:3:7"},"nodeType":"YulFunctionCall","src":"19763:22:7"},{"name":"end","nodeType":"YulIdentifier","src":"19787:3:7"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"19735:27:7"},"nodeType":"YulFunctionCall","src":"19735:56:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19711:6:7"},"nodeType":"YulFunctionCall","src":"19711:81:7"},"nodeType":"YulExpressionStatement","src":"19711:81:7"}]},"name":"abi_decode_struct_ReturnInfo_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19041:9:7","type":""},{"name":"end","nodeType":"YulTypedName","src":"19052:3:7","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"19060:5:7","type":""}],"src":"18992:806:7"},{"body":{"nodeType":"YulBlock","src":"19880:204:7","statements":[{"body":{"nodeType":"YulBlock","src":"19924:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19933:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19936:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19926:6:7"},"nodeType":"YulFunctionCall","src":"19926:12:7"},"nodeType":"YulExpressionStatement","src":"19926:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"19901:3:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"19906:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19897:3:7"},"nodeType":"YulFunctionCall","src":"19897:19:7"},{"kind":"number","nodeType":"YulLiteral","src":"19918:4:7","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19893:3:7"},"nodeType":"YulFunctionCall","src":"19893:30:7"},"nodeType":"YulIf","src":"19890:50:7"},{"nodeType":"YulAssignment","src":"19949:31:7","value":{"arguments":[],"functionName":{"name":"allocate_memory_3430","nodeType":"YulIdentifier","src":"19958:20:7"},"nodeType":"YulFunctionCall","src":"19958:22:7"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19949:5:7"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19996:5:7"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20009:9:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20003:5:7"},"nodeType":"YulFunctionCall","src":"20003:16:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19989:6:7"},"nodeType":"YulFunctionCall","src":"19989:31:7"},"nodeType":"YulExpressionStatement","src":"19989:31:7"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20040:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"20047:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20036:3:7"},"nodeType":"YulFunctionCall","src":"20036:14:7"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20062:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"20073:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20058:3:7"},"nodeType":"YulFunctionCall","src":"20058:18:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20052:5:7"},"nodeType":"YulFunctionCall","src":"20052:25:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20029:6:7"},"nodeType":"YulFunctionCall","src":"20029:49:7"},"nodeType":"YulExpressionStatement","src":"20029:49:7"}]},"name":"abi_decode_struct_StakeInfo_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19851:9:7","type":""},{"name":"end","nodeType":"YulTypedName","src":"19862:3:7","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"19870:5:7","type":""}],"src":"19803:281:7"},{"body":{"nodeType":"YulBlock","src":"20322:517:7","statements":[{"body":{"nodeType":"YulBlock","src":"20369:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20378:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20381:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20371:6:7"},"nodeType":"YulFunctionCall","src":"20371:12:7"},"nodeType":"YulExpressionStatement","src":"20371:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20343:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"20352:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20339:3:7"},"nodeType":"YulFunctionCall","src":"20339:23:7"},{"kind":"number","nodeType":"YulLiteral","src":"20364:3:7","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20335:3:7"},"nodeType":"YulFunctionCall","src":"20335:33:7"},"nodeType":"YulIf","src":"20332:53:7"},{"nodeType":"YulVariableDeclaration","src":"20394:30:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20414:9:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20408:5:7"},"nodeType":"YulFunctionCall","src":"20408:16:7"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20398:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"20467:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20476:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20479:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"20469:6:7"},"nodeType":"YulFunctionCall","src":"20469:12:7"},"nodeType":"YulExpressionStatement","src":"20469:12:7"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20439:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"20447:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20436:2:7"},"nodeType":"YulFunctionCall","src":"20436:30:7"},"nodeType":"YulIf","src":"20433:50:7"},{"nodeType":"YulAssignment","src":"20492:82:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20546:9:7"},{"name":"offset","nodeType":"YulIdentifier","src":"20557:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20542:3:7"},"nodeType":"YulFunctionCall","src":"20542:22:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20566:7:7"}],"functionName":{"name":"abi_decode_struct_ReturnInfo_fromMemory","nodeType":"YulIdentifier","src":"20502:39:7"},"nodeType":"YulFunctionCall","src":"20502:72:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20492:6:7"}]},{"nodeType":"YulAssignment","src":"20583:77:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20636:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"20647:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20632:3:7"},"nodeType":"YulFunctionCall","src":"20632:18:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20652:7:7"}],"functionName":{"name":"abi_decode_struct_StakeInfo_fromMemory","nodeType":"YulIdentifier","src":"20593:38:7"},"nodeType":"YulFunctionCall","src":"20593:67:7"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20583:6:7"}]},{"nodeType":"YulAssignment","src":"20669:77:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20722:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"20733:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20718:3:7"},"nodeType":"YulFunctionCall","src":"20718:18:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20738:7:7"}],"functionName":{"name":"abi_decode_struct_StakeInfo_fromMemory","nodeType":"YulIdentifier","src":"20679:38:7"},"nodeType":"YulFunctionCall","src":"20679:67:7"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"20669:6:7"}]},{"nodeType":"YulAssignment","src":"20755:78:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20808:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"20819:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20804:3:7"},"nodeType":"YulFunctionCall","src":"20804:19:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20825:7:7"}],"functionName":{"name":"abi_decode_struct_StakeInfo_fromMemory","nodeType":"YulIdentifier","src":"20765:38:7"},"nodeType":"YulFunctionCall","src":"20765:68:7"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"20755:6:7"}]}]},"name":"abi_decode_tuple_t_struct$_ReturnInfo_$15_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20264:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20275:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20287:6:7","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20295:6:7","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20303:6:7","type":""},{"name":"value3","nodeType":"YulTypedName","src":"20311:6:7","type":""}],"src":"20089:750:7"},{"body":{"nodeType":"YulBlock","src":"20899:382:7","statements":[{"nodeType":"YulAssignment","src":"20909:22:7","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20923:1:7","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"20926:4:7"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"20919:3:7"},"nodeType":"YulFunctionCall","src":"20919:12:7"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"20909:6:7"}]},{"nodeType":"YulVariableDeclaration","src":"20940:38:7","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"20970:4:7"},{"kind":"number","nodeType":"YulLiteral","src":"20976:1:7","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20966:3:7"},"nodeType":"YulFunctionCall","src":"20966:12:7"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"20944:18:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"21017:31:7","statements":[{"nodeType":"YulAssignment","src":"21019:27:7","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"21033:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"21041:4:7","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21029:3:7"},"nodeType":"YulFunctionCall","src":"21029:17:7"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"21019:6:7"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"20997:18:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20990:6:7"},"nodeType":"YulFunctionCall","src":"20990:26:7"},"nodeType":"YulIf","src":"20987:61:7"},{"body":{"nodeType":"YulBlock","src":"21107:168:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21128:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21131:77:7","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21121:6:7"},"nodeType":"YulFunctionCall","src":"21121:88:7"},"nodeType":"YulExpressionStatement","src":"21121:88:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21229:1:7","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21232:4:7","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21222:6:7"},"nodeType":"YulFunctionCall","src":"21222:15:7"},"nodeType":"YulExpressionStatement","src":"21222:15:7"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21257:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21260:4:7","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21250:6:7"},"nodeType":"YulFunctionCall","src":"21250:15:7"},"nodeType":"YulExpressionStatement","src":"21250:15:7"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"21063:18:7"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"21086:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"21094:2:7","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"21083:2:7"},"nodeType":"YulFunctionCall","src":"21083:14:7"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"21060:2:7"},"nodeType":"YulFunctionCall","src":"21060:38:7"},"nodeType":"YulIf","src":"21057:218:7"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"20879:4:7","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"20888:6:7","type":""}],"src":"20844:437:7"},{"body":{"nodeType":"YulBlock","src":"21571:956:7","statements":[{"nodeType":"YulVariableDeclaration","src":"21581:33:7","value":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21595:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"21604:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21591:3:7"},"nodeType":"YulFunctionCall","src":"21591:23:7"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"21585:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"21639:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21648:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21651:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21641:6:7"},"nodeType":"YulFunctionCall","src":"21641:12:7"},"nodeType":"YulExpressionStatement","src":"21641:12:7"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"21630:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"21634:3:7","type":"","value":"320"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21626:3:7"},"nodeType":"YulFunctionCall","src":"21626:12:7"},"nodeType":"YulIf","src":"21623:32:7"},{"nodeType":"YulVariableDeclaration","src":"21664:30:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21684:9:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21678:5:7"},"nodeType":"YulFunctionCall","src":"21678:16:7"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21668:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"21737:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21746:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21749:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21739:6:7"},"nodeType":"YulFunctionCall","src":"21739:12:7"},"nodeType":"YulExpressionStatement","src":"21739:12:7"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"21709:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"21717:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21706:2:7"},"nodeType":"YulFunctionCall","src":"21706:30:7"},"nodeType":"YulIf","src":"21703:50:7"},{"nodeType":"YulAssignment","src":"21762:82:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21816:9:7"},{"name":"offset","nodeType":"YulIdentifier","src":"21827:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21812:3:7"},"nodeType":"YulFunctionCall","src":"21812:22:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21836:7:7"}],"functionName":{"name":"abi_decode_struct_ReturnInfo_fromMemory","nodeType":"YulIdentifier","src":"21772:39:7"},"nodeType":"YulFunctionCall","src":"21772:72:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21762:6:7"}]},{"nodeType":"YulAssignment","src":"21853:77:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21906:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"21917:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21902:3:7"},"nodeType":"YulFunctionCall","src":"21902:18:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21922:7:7"}],"functionName":{"name":"abi_decode_struct_StakeInfo_fromMemory","nodeType":"YulIdentifier","src":"21863:38:7"},"nodeType":"YulFunctionCall","src":"21863:67:7"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"21853:6:7"}]},{"nodeType":"YulAssignment","src":"21939:77:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21992:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"22003:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21988:3:7"},"nodeType":"YulFunctionCall","src":"21988:18:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22008:7:7"}],"functionName":{"name":"abi_decode_struct_StakeInfo_fromMemory","nodeType":"YulIdentifier","src":"21949:38:7"},"nodeType":"YulFunctionCall","src":"21949:67:7"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"21939:6:7"}]},{"nodeType":"YulAssignment","src":"22025:78:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22078:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"22089:3:7","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22074:3:7"},"nodeType":"YulFunctionCall","src":"22074:19:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22095:7:7"}],"functionName":{"name":"abi_decode_struct_StakeInfo_fromMemory","nodeType":"YulIdentifier","src":"22035:38:7"},"nodeType":"YulFunctionCall","src":"22035:68:7"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"22025:6:7"}]},{"body":{"nodeType":"YulBlock","src":"22200:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22209:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22212:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22202:6:7"},"nodeType":"YulFunctionCall","src":"22202:12:7"},"nodeType":"YulExpressionStatement","src":"22202:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"22123:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"22127:66:7","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22119:3:7"},"nodeType":"YulFunctionCall","src":"22119:75:7"},{"kind":"number","nodeType":"YulLiteral","src":"22196:2:7","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22115:3:7"},"nodeType":"YulFunctionCall","src":"22115:84:7"},"nodeType":"YulIf","src":"22112:104:7"},{"nodeType":"YulVariableDeclaration","src":"22225:35:7","value":{"arguments":[],"functionName":{"name":"allocate_memory_3430","nodeType":"YulIdentifier","src":"22238:20:7"},"nodeType":"YulFunctionCall","src":"22238:22:7"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"22229:5:7","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22269:41:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22294:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"22305:3:7","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22290:3:7"},"nodeType":"YulFunctionCall","src":"22290:19:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22284:5:7"},"nodeType":"YulFunctionCall","src":"22284:26:7"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"22273:7:7","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"22357:7:7"}],"functionName":{"name":"validator_revert_contract_IEntryPoint","nodeType":"YulIdentifier","src":"22319:37:7"},"nodeType":"YulFunctionCall","src":"22319:46:7"},"nodeType":"YulExpressionStatement","src":"22319:46:7"},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22381:5:7"},{"name":"value_1","nodeType":"YulIdentifier","src":"22388:7:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22374:6:7"},"nodeType":"YulFunctionCall","src":"22374:22:7"},"nodeType":"YulExpressionStatement","src":"22374:22:7"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22416:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"22423:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22412:3:7"},"nodeType":"YulFunctionCall","src":"22412:14:7"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22471:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"22482:3:7","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22467:3:7"},"nodeType":"YulFunctionCall","src":"22467:19:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22488:7:7"}],"functionName":{"name":"abi_decode_struct_StakeInfo_fromMemory","nodeType":"YulIdentifier","src":"22428:38:7"},"nodeType":"YulFunctionCall","src":"22428:68:7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22405:6:7"},"nodeType":"YulFunctionCall","src":"22405:92:7"},"nodeType":"YulExpressionStatement","src":"22405:92:7"},{"nodeType":"YulAssignment","src":"22506:15:7","value":{"name":"value","nodeType":"YulIdentifier","src":"22516:5:7"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"22506:6:7"}]}]},"name":"abi_decode_tuple_t_struct$_ReturnInfo_$15_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_AggregatorStakeInfo_$26_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21505:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21516:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21528:6:7","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21536:6:7","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21544:6:7","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21552:6:7","type":""},{"name":"value4","nodeType":"YulTypedName","src":"21560:6:7","type":""}],"src":"21286:1241:7"},{"body":{"nodeType":"YulBlock","src":"22640:411:7","statements":[{"body":{"nodeType":"YulBlock","src":"22686:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22695:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22698:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22688:6:7"},"nodeType":"YulFunctionCall","src":"22688:12:7"},"nodeType":"YulExpressionStatement","src":"22688:12:7"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22661:7:7"},{"name":"headStart","nodeType":"YulIdentifier","src":"22670:9:7"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22657:3:7"},"nodeType":"YulFunctionCall","src":"22657:23:7"},{"kind":"number","nodeType":"YulLiteral","src":"22682:2:7","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22653:3:7"},"nodeType":"YulFunctionCall","src":"22653:32:7"},"nodeType":"YulIf","src":"22650:52:7"},{"nodeType":"YulAssignment","src":"22711:26:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22727:9:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22721:5:7"},"nodeType":"YulFunctionCall","src":"22721:16:7"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22711:6:7"}]},{"nodeType":"YulVariableDeclaration","src":"22746:39:7","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22770:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"22781:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22766:3:7"},"nodeType":"YulFunctionCall","src":"22766:18:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22760:5:7"},"nodeType":"YulFunctionCall","src":"22760:25:7"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22750:6:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"22828:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22837:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22840:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22830:6:7"},"nodeType":"YulFunctionCall","src":"22830:12:7"},"nodeType":"YulExpressionStatement","src":"22830:12:7"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22800:6:7"},{"kind":"number","nodeType":"YulLiteral","src":"22808:18:7","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22797:2:7"},"nodeType":"YulFunctionCall","src":"22797:30:7"},"nodeType":"YulIf","src":"22794:50:7"},{"nodeType":"YulVariableDeclaration","src":"22853:32:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22867:9:7"},{"name":"offset","nodeType":"YulIdentifier","src":"22878:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22863:3:7"},"nodeType":"YulFunctionCall","src":"22863:22:7"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"22857:2:7","type":""}]},{"body":{"nodeType":"YulBlock","src":"22933:16:7","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22942:1:7","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22945:1:7","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22935:6:7"},"nodeType":"YulFunctionCall","src":"22935:12:7"},"nodeType":"YulExpressionStatement","src":"22935:12:7"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"22912:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"22916:4:7","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22908:3:7"},"nodeType":"YulFunctionCall","src":"22908:13:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22923:7:7"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22904:3:7"},"nodeType":"YulFunctionCall","src":"22904:27:7"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22897:6:7"},"nodeType":"YulFunctionCall","src":"22897:35:7"},"nodeType":"YulIf","src":"22894:55:7"},{"nodeType":"YulAssignment","src":"22958:87:7","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23017:2:7"},{"kind":"number","nodeType":"YulLiteral","src":"23021:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23013:3:7"},"nodeType":"YulFunctionCall","src":"23013:11:7"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"23032:2:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23026:5:7"},"nodeType":"YulFunctionCall","src":"23026:9:7"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23037:7:7"}],"functionName":{"name":"abi_decode_available_length_bytes_fromMemory","nodeType":"YulIdentifier","src":"22968:44:7"},"nodeType":"YulFunctionCall","src":"22968:77:7"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"22958:6:7"}]}]},"name":"abi_decode_tuple_t_uint256t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22598:9:7","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22609:7:7","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22621:6:7","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22629:6:7","type":""}],"src":"22532:519:7"},{"body":{"nodeType":"YulBlock","src":"23104:80:7","statements":[{"body":{"nodeType":"YulBlock","src":"23131:22:7","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23133:16:7"},"nodeType":"YulFunctionCall","src":"23133:18:7"},"nodeType":"YulExpressionStatement","src":"23133:18:7"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23120:1:7"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23127:1:7"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"23123:3:7"},"nodeType":"YulFunctionCall","src":"23123:6:7"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23117:2:7"},"nodeType":"YulFunctionCall","src":"23117:13:7"},"nodeType":"YulIf","src":"23114:39:7"},{"nodeType":"YulAssignment","src":"23162:16:7","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23173:1:7"},{"name":"y","nodeType":"YulIdentifier","src":"23176:1:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23169:3:7"},"nodeType":"YulFunctionCall","src":"23169:9:7"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"23162:3:7"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"23087:1:7","type":""},{"name":"y","nodeType":"YulTypedName","src":"23090:1:7","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"23096:3:7","type":""}],"src":"23056:128:7"},{"body":{"nodeType":"YulBlock","src":"23363:164:7","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23380:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"23391:2:7","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23373:6:7"},"nodeType":"YulFunctionCall","src":"23373:21:7"},"nodeType":"YulExpressionStatement","src":"23373:21:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23414:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"23425:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23410:3:7"},"nodeType":"YulFunctionCall","src":"23410:18:7"},{"kind":"number","nodeType":"YulLiteral","src":"23430:2:7","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23403:6:7"},"nodeType":"YulFunctionCall","src":"23403:30:7"},"nodeType":"YulExpressionStatement","src":"23403:30:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23453:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"23464:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23449:3:7"},"nodeType":"YulFunctionCall","src":"23449:18:7"},{"hexValue":"736c6963655f6f766572666c6f77","kind":"string","nodeType":"YulLiteral","src":"23469:16:7","type":"","value":"slice_overflow"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23442:6:7"},"nodeType":"YulFunctionCall","src":"23442:44:7"},"nodeType":"YulExpressionStatement","src":"23442:44:7"},{"nodeType":"YulAssignment","src":"23495:26:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23507:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"23518:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23503:3:7"},"nodeType":"YulFunctionCall","src":"23503:18:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23495:4:7"}]}]},"name":"abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23340:9:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23354:4:7","type":""}],"src":"23189:338:7"},{"body":{"nodeType":"YulBlock","src":"23706:167:7","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23723:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"23734:2:7","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23716:6:7"},"nodeType":"YulFunctionCall","src":"23716:21:7"},"nodeType":"YulExpressionStatement","src":"23716:21:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23757:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"23768:2:7","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23753:3:7"},"nodeType":"YulFunctionCall","src":"23753:18:7"},{"kind":"number","nodeType":"YulLiteral","src":"23773:2:7","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23746:6:7"},"nodeType":"YulFunctionCall","src":"23746:30:7"},"nodeType":"YulExpressionStatement","src":"23746:30:7"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23796:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"23807:2:7","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23792:3:7"},"nodeType":"YulFunctionCall","src":"23792:18:7"},{"hexValue":"736c6963655f6f75744f66426f756e6473","kind":"string","nodeType":"YulLiteral","src":"23812:19:7","type":"","value":"slice_outOfBounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23785:6:7"},"nodeType":"YulFunctionCall","src":"23785:47:7"},"nodeType":"YulExpressionStatement","src":"23785:47:7"},{"nodeType":"YulAssignment","src":"23841:26:7","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23853:9:7"},{"kind":"number","nodeType":"YulLiteral","src":"23864:2:7","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23849:3:7"},"nodeType":"YulFunctionCall","src":"23849:18:7"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23841:4:7"}]}]},"name":"abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23683:9:7","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23697:4:7","type":""}],"src":"23532:341:7"}]},"contents":"{\n    { }\n    function validator_revert_contract_IEntryPoint(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_3428() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x0160)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory_3429() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xc0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory_3430() -> memPtr\n    {\n        memPtr := mload(0x40)\n        let newFreePtr := add(memPtr, 0x40)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(0x40, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_array_struct_UserOperation_dyn(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(shl(5, length), 0x20)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_contract_IEntryPoint(value)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_contract$_IEntryPoint_$998t_array$_t_struct$_UserOperation_$1149_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_contract_IEntryPoint(value)\n        value0 := value\n        let _1 := 32\n        let offset := calldataload(add(headStart, _1))\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        let dst := allocate_memory(array_allocation_size_array_struct_UserOperation_dyn(_4))\n        let dst_1 := dst\n        mstore(dst, _4)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_3, shl(5, _4)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, _2) { revert(0, 0) }\n            let _5 := add(_3, innerOffset)\n            if slt(add(sub(dataEnd, _5), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x0160) { revert(0, 0) }\n            let value_1 := allocate_memory_3428()\n            mstore(value_1, abi_decode_address(add(_5, _1)))\n            mstore(add(value_1, _1), calldataload(add(_5, 64)))\n            let offset_1 := calldataload(add(_5, 96))\n            if gt(offset_1, _2) { revert(0, 0) }\n            mstore(add(value_1, 64), abi_decode_bytes(add(add(_5, offset_1), _1), dataEnd))\n            let offset_2 := calldataload(add(_5, 128))\n            if gt(offset_2, _2) { revert(0, 0) }\n            mstore(add(value_1, 96), abi_decode_bytes(add(add(_5, offset_2), _1), dataEnd))\n            mstore(add(value_1, 128), calldataload(add(_5, 160)))\n            mstore(add(value_1, 160), calldataload(add(_5, 192)))\n            mstore(add(value_1, 192), calldataload(add(_5, 224)))\n            mstore(add(value_1, 224), calldataload(add(_5, 256)))\n            mstore(add(value_1, 256), calldataload(add(_5, 288)))\n            let _6 := 320\n            let offset_3 := calldataload(add(_5, _6))\n            if gt(offset_3, _2) { revert(0, 0) }\n            mstore(add(value_1, 288), abi_decode_bytes(add(add(_5, offset_3), _1), dataEnd))\n            let offset_4 := calldataload(add(_5, 0x0160))\n            if gt(offset_4, _2) { revert(0, 0) }\n            mstore(add(value_1, _6), abi_decode_bytes(add(add(_5, offset_4), _1), dataEnd))\n            mstore(dst, value_1)\n            dst := add(dst, _1)\n        }\n        value1 := dst_1\n    }\n    function abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let dst := allocate_memory(array_allocation_size_array_struct_UserOperation_dyn(_3))\n        let dst_1 := dst\n        mstore(dst, _3)\n        dst := add(dst, _1)\n        let srcEnd := add(add(_2, shl(5, _3)), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            let value := calldataload(src)\n            validator_revert_contract_IEntryPoint(value)\n            mstore(dst, value)\n            dst := add(dst, _1)\n        }\n        value0 := dst_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_address(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IEntryPoint_$998__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_struct$_UserOperation_$1149_calldata_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 352) { revert(0, 0) }\n        value0 := _1\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_struct_StakeInfo(value, pos)\n    {\n        mstore(pos, mload(value))\n        mstore(add(pos, 0x20), mload(add(value, 0x20)))\n    }\n    function abi_encode_struct_AggregatorStakeInfo(value, pos)\n    {\n        mstore(pos, and(mload(value), 0xffffffffffffffffffffffffffffffffffffffff))\n        let memberValue0 := mload(add(value, 0x20))\n        abi_encode_struct_StakeInfo(memberValue0, add(pos, 0x20))\n    }\n    function abi_encode_tuple_t_struct$_FailedOpStatus_$33_memory_ptr_t_struct$_Response_$51_memory_ptr__to_t_struct$_FailedOpStatus_$33_memory_ptr_t_struct$_Response_$51_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        let _1 := 64\n        mstore(headStart, _1)\n        mstore(add(headStart, _1), iszero(iszero(mload(value0))))\n        let _2 := 0x20\n        mstore(add(headStart, 0x60), mload(add(value0, _2)))\n        let memberValue0 := mload(add(value0, _1))\n        mstore(add(headStart, 128), 0x60)\n        let end := abi_encode_string(memberValue0, add(headStart, 160))\n        mstore(add(headStart, _2), sub(end, headStart))\n        let _3 := 0x0160\n        let memberValue0_1 := mload(value1)\n        mstore(end, _3)\n        let tail_1 := abi_encode_string(memberValue0_1, add(end, _3))\n        let memberValue0_2 := mload(add(value1, _2))\n        mstore(add(end, _2), sub(tail_1, end))\n        mstore(tail_1, mload(memberValue0_2))\n        mstore(add(tail_1, _2), mload(add(memberValue0_2, _2)))\n        mstore(add(tail_1, _1), iszero(iszero(mload(add(memberValue0_2, _1)))))\n        let memberValue0_3 := mload(add(memberValue0_2, 0x60))\n        let _4 := 0xffffffffffff\n        mstore(add(tail_1, 0x60), and(memberValue0_3, _4))\n        mstore(add(tail_1, 128), and(mload(add(memberValue0_2, 128)), _4))\n        let memberValue0_4 := mload(add(memberValue0_2, 160))\n        mstore(add(tail_1, 160), 0xc0)\n        let end_1 := abi_encode_string(memberValue0_4, add(tail_1, 0xc0))\n        let memberValue0_5 := mload(add(value1, _1))\n        abi_encode_struct_StakeInfo(memberValue0_5, add(end, _1))\n        let memberValue0_6 := mload(add(value1, 0x60))\n        abi_encode_struct_StakeInfo(memberValue0_6, add(end, 128))\n        let memberValue0_7 := mload(add(value1, 128))\n        abi_encode_struct_StakeInfo(memberValue0_7, add(end, 0xc0))\n        let memberValue0_8 := mload(add(value1, 160))\n        abi_encode_struct_AggregatorStakeInfo(memberValue0_8, add(end, 0x0100))\n        tail := end_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_struct$_UserOperation_$1149_memory_ptr__to_t_struct$_UserOperation_$1149_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        abi_encode_address(mload(value0), add(headStart, 32))\n        mstore(add(headStart, 64), mload(add(value0, 32)))\n        let memberValue0 := mload(add(value0, 64))\n        let _1 := 0x0160\n        mstore(add(headStart, 96), _1)\n        let tail_1 := abi_encode_string(memberValue0, add(headStart, 384))\n        let memberValue0_1 := mload(add(value0, 96))\n        let _2 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        mstore(add(headStart, 128), add(sub(tail_1, headStart), _2))\n        let tail_2 := abi_encode_string(memberValue0_1, tail_1)\n        mstore(add(headStart, 160), mload(add(value0, 128)))\n        mstore(add(headStart, 192), mload(add(value0, 160)))\n        mstore(add(headStart, 224), mload(add(value0, 192)))\n        let _3 := mload(add(value0, 224))\n        let _4 := 256\n        mstore(add(headStart, _4), _3)\n        let _5 := mload(add(value0, _4))\n        let _6 := 288\n        mstore(add(headStart, _6), _5)\n        let memberValue0_2 := mload(add(value0, _6))\n        let _7 := 320\n        mstore(add(headStart, _7), add(sub(tail_2, headStart), _2))\n        let tail_3 := abi_encode_string(memberValue0_2, tail_2)\n        let memberValue0_3 := mload(add(value0, _7))\n        mstore(add(headStart, _1), add(sub(tail_3, headStart), _2))\n        tail := abi_encode_string(memberValue0_3, tail_3)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_bytes_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes_calldata(value0, value1, add(headStart, 32))\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes4(array) -> value\n    {\n        let length := mload(array)\n        let _1 := mload(add(array, 0x20))\n        let _2 := 0xffffffff00000000000000000000000000000000000000000000000000000000\n        value := and(_1, _2)\n        if lt(length, 4)\n        {\n            value := and(and(_1, shl(shl(3, sub(4, length)), _2)), _2)\n        }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_decode_tuple_t_address_payable_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IEntryPoint(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_41358789453c2b61b04d9046ed6bd1617530e1f3f5c8b4843a7b086398036cc8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Invalid initCode\")\n        tail := add(headStart, 96)\n    }\n    function calldata_access_bytes_calldata(base_ref, ptr) -> value, length\n    {\n        let rel_offset_of_tail := calldataload(ptr)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let value_1 := add(rel_offset_of_tail, base_ref)\n        length := calldataload(value_1)\n        value := add(value_1, 0x20)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_t_struct$_UserOperation_$1149_calldata_ptr__to_t_struct$_UserOperation_$1149_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        abi_encode_address(abi_decode_address(value0), add(headStart, 32))\n        mstore(add(headStart, 64), calldataload(add(value0, 32)))\n        let memberValue0, memberValue1 := calldata_access_bytes_calldata(value0, add(value0, 64))\n        let _1 := 0x0160\n        mstore(add(headStart, 96), _1)\n        let tail_1 := abi_encode_bytes_calldata(memberValue0, memberValue1, add(headStart, 384))\n        let memberValue0_1, memberValue1_1 := calldata_access_bytes_calldata(value0, add(value0, 96))\n        let _2 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        mstore(add(headStart, 128), add(sub(tail_1, headStart), _2))\n        let tail_2 := abi_encode_bytes_calldata(memberValue0_1, memberValue1_1, tail_1)\n        mstore(add(headStart, 160), calldataload(add(value0, 128)))\n        mstore(add(headStart, 192), calldataload(add(value0, 160)))\n        mstore(add(headStart, 224), calldataload(add(value0, 192)))\n        let _3 := 256\n        mstore(add(headStart, _3), calldataload(add(value0, 224)))\n        let _4 := 288\n        mstore(add(headStart, _4), calldataload(add(value0, _3)))\n        let memberValue0_2, memberValue1_2 := calldata_access_bytes_calldata(value0, add(value0, _4))\n        let _5 := 320\n        mstore(add(headStart, _5), add(sub(tail_2, headStart), _2))\n        let tail_3 := abi_encode_bytes_calldata(memberValue0_2, memberValue1_2, tail_2)\n        let memberValue0_3, memberValue1_3 := calldata_access_bytes_calldata(value0, add(value0, _5))\n        mstore(add(headStart, _1), add(sub(tail_3, headStart), _2))\n        tail := abi_encode_bytes_calldata(memberValue0_3, memberValue1_3, tail_3)\n    }\n    function abi_decode_uint48_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_available_length_bytes_fromMemory(src, length, end) -> array\n    {\n        array := allocate_memory(array_allocation_size_bytes(length))\n        mstore(array, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_memory_to_memory(src, add(array, 0x20), length)\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_bytes_fromMemory(add(offset, 0x20), mload(offset), end)\n    }\n    function abi_decode_struct_ReturnInfo_fromMemory(headStart, end) -> value\n    {\n        if slt(sub(end, headStart), 0xc0) { revert(0, 0) }\n        value := allocate_memory_3429()\n        mstore(value, mload(headStart))\n        mstore(add(value, 32), mload(add(headStart, 32)))\n        let value_1 := mload(add(headStart, 64))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n        mstore(add(value, 64), value_1)\n        mstore(add(value, 96), abi_decode_uint48_fromMemory(add(headStart, 96)))\n        mstore(add(value, 128), abi_decode_uint48_fromMemory(add(headStart, 128)))\n        let offset := mload(add(headStart, 160))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        mstore(add(value, 160), abi_decode_bytes_fromMemory(add(headStart, offset), end))\n    }\n    function abi_decode_struct_StakeInfo_fromMemory(headStart, end) -> value\n    {\n        if slt(sub(end, headStart), 0x40) { revert(0, 0) }\n        value := allocate_memory_3430()\n        mstore(value, mload(headStart))\n        mstore(add(value, 32), mload(add(headStart, 32)))\n    }\n    function abi_decode_tuple_t_struct$_ReturnInfo_$15_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_struct_ReturnInfo_fromMemory(add(headStart, offset), dataEnd)\n        value1 := abi_decode_struct_StakeInfo_fromMemory(add(headStart, 32), dataEnd)\n        value2 := abi_decode_struct_StakeInfo_fromMemory(add(headStart, 96), dataEnd)\n        value3 := abi_decode_struct_StakeInfo_fromMemory(add(headStart, 160), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_decode_tuple_t_struct$_ReturnInfo_$15_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_StakeInfo_$20_memory_ptrt_struct$_AggregatorStakeInfo_$26_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        let _1 := sub(dataEnd, headStart)\n        if slt(_1, 320) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_struct_ReturnInfo_fromMemory(add(headStart, offset), dataEnd)\n        value1 := abi_decode_struct_StakeInfo_fromMemory(add(headStart, 32), dataEnd)\n        value2 := abi_decode_struct_StakeInfo_fromMemory(add(headStart, 96), dataEnd)\n        value3 := abi_decode_struct_StakeInfo_fromMemory(add(headStart, 160), dataEnd)\n        if slt(add(_1, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20), 96) { revert(0, 0) }\n        let value := allocate_memory_3430()\n        let value_1 := mload(add(headStart, 224))\n        validator_revert_contract_IEntryPoint(value_1)\n        mstore(value, value_1)\n        mstore(add(value, 32), abi_decode_struct_StakeInfo_fromMemory(add(headStart, 256), dataEnd))\n        value4 := value\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := mload(headStart)\n        let offset := mload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value1 := abi_decode_available_length_bytes_fromMemory(add(_1, 32), mload(_1), dataEnd)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_5d3d629f76473d94377d221b1f1c8f2161f7b65cab69e095662ec5d0e026c17e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"slice_overflow\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cca2258dcc0d08c244435525255fbef9116c9a31b4c29471218f002bbbceb7a0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"slice_outOfBounds\")\n        tail := add(headStart, 96)\n    }\n}","id":7,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100675760003560e01c80639b249f69116100505780639b249f69146100b6578063b0d691fe146100ee578063ee2194231461010e57600080fd5b80633024e00c1461006c5780637b34b62114610095575b600080fd5b61007f61007a36600461103a565b61012f565b60405161008c91906111f9565b60405180910390f35b6100a86100a336600461123d565b61024d565b60405190815260200161008c565b6100c96100c43660046112d7565b610336565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b6000546100c99073ffffffffffffffffffffffffffffffffffffffff1681565b61012161011c366004611349565b6104e3565b60405161008c9291906113e1565b6060815167ffffffffffffffff81111561014b5761014b610eb8565b604051908082528060200260200182016040528015610174578160200160208202803683370190505b50905060005b8251811015610245578373ffffffffffffffffffffffffffffffffffffffff1663a61935318483815181106101b1576101b161152b565b60200260200101516040518263ffffffff1660e01b81526004016101d5919061155a565b602060405180830381865afa1580156101f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102169190611648565b8282815181106102285761022861152b565b60209081029190910101528061023d81611690565b91505061017a565b505b92915050565b600080825167ffffffffffffffff81111561026a5761026a610eb8565b604051908082528060200260200182016040528015610293578160200160208202803683370190505b50905060005b8351811015610302578381815181106102b4576102b461152b565b602002602001015173ffffffffffffffffffffffffffffffffffffffff163f8282815181106102e5576102e561152b565b6020908102919091010152806102fa81611690565b915050610299565b5060008160405160200161031691906111f9565b60408051601f198184030181529190528051602090910120949350505050565b600080546040517f9b249f6900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690639b249f699061038f90869086906004016116f3565b600060405180830381600087803b1580156103a957600080fd5b505af19250505080156103ba575060015b610247573d8080156103e8576040519150601f19603f3d011682016040523d82523d6000602084013e6103ed565b606091505b5060006103f98261170f565b90507f935847fa000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161047c57600061045e836004808651610459919061175f565b610c39565b8060200190518101906104719190611776565b935061024792505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c696420696e6974436f64650000000000000000000000000000000060448201526064015b60405180910390fd5b60408051606080820183526000808352602083015291810191909152610507610d97565b6000546040517fee21942300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063ee2194239061055d9086906004016117fe565b600060405180830381600087803b15801561057757600080fd5b505af1925050508015610588575060015b610c34573d8080156105b6576040519150601f19603f3d011682016040523d82523d6000602084013e6105bb565b606091505b5060006105c78261170f565b90507f1f300fa1000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016107a75760008060008061062b866004808951610459919061175f565b80602001905181019061063e9190611a3c565b6040805161010081018252601060c082019081527f56616c69646174696f6e526573756c740000000000000000000000000000000060e0830152815260208082018790528183018690526060808301869052608083018590528351808501855260035473ffffffffffffffffffffffffffffffffffffffff168152845180860186526004548152600554818501528184015260a0840152835190810184526018805460ff161515825260195492820192909252601a8054989c50969a509498509296509194919385929184019161071490611aae565b80601f016020809104026020016040519081016040528092919081815260200182805461074090611aae565b801561078d5780601f106107625761010080835404028352916020019161078d565b820191906000526020600020905b81548152906001019060200180831161077057829003601f168201915b505050505081525050915097509750505050505050915091565b7f05134b1c000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161095357600080600080600061080b876004808a51610459919061175f565b80602001905181019061081e9190611b01565b6040805161010081018252601f60c082019081527f56616c69646174696f6e526573756c74576974684167677265676174696f6e0060e08301528152602080820188905281830187905260608083018790526080830186905260a08301859052835190810184526018805460ff161515825260195492820192909252601a8054999e50979c50959a509398509196509194909385928401916108bf90611aae565b80601f01602080910402602001604051908101604052809291908181526020018280546108eb90611aae565b80156109385780601f1061090d57610100808354040283529160200191610938565b820191906000526020600020905b81548152906001019060200180831161091b57829003601f168201915b50505050508152505091509850985050505050505050915091565b7fddfd994a000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610c31576000806109b2846004808751610459919061175f565b8060200190518101906109c59190611bd8565b91509150604051806060016040528060011515815260200183815260200182815250600a806040518060c0016040529081600082018054610a0590611aae565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3190611aae565b8015610a7e5780601f10610a5357610100808354040283529160200191610a7e565b820191906000526020600020905b815481529060010190602001808311610a6157829003601f168201915b50505091835250506040805160c08101825260018401805482526002850154602083810191909152600386015460ff811615159484019490945265ffffffffffff610100850481166060850152670100000000000000909404909316608083015260048501805493909401939192909160a0840191610afc90611aae565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2890611aae565b8015610b755780601f10610b4a57610100808354040283529160200191610b75565b820191906000526020600020905b815481529060010190602001808311610b5857829003601f168201915b505050919092525050508152604080518082018252600584015481526006840154602082810191909152808401919091528151808301835260078501548152600885015481830152828401528151808301835260098501548152600a85015481830152606084015281518083018352600b85015473ffffffffffffffffffffffffffffffffffffffff1681528251808401909352600c8501548352600d9094015482820152830152608001529199919850909650505050505050565b50505b915091565b606081610c4781601f611c33565b1015610caf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016104da565b610cb98284611c33565b84511015610d23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016104da565b606082158015610d425760405191506000825260208201604052610d8c565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610d7b578051835260209283019201610d63565b5050858452601f01601f1916604052505b5090505b9392505050565b6040805160c0808201835260608083528351918201845260008083526020838101829052948301819052828201819052608083015260a082015290918201908152602001610df8604051806040016040528060008152602001600081525090565b8152602001610e1a604051806040016040528060008152602001600081525090565b8152602001610e3c604051806040016040528060008152602001600081525090565b8152602001610e49610e4e565b905290565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001610e49604051806040016040528060008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff81168114610eb557600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715610f0b57610f0b610eb8565b60405290565b60405160c0810167ffffffffffffffff81118282101715610f0b57610f0b610eb8565b6040805190810167ffffffffffffffff81118282101715610f0b57610f0b610eb8565b604051601f8201601f1916810167ffffffffffffffff81118282101715610f8057610f80610eb8565b604052919050565b600067ffffffffffffffff821115610fa257610fa2610eb8565b5060051b60200190565b8035610fb781610e93565b919050565b600067ffffffffffffffff821115610fd657610fd6610eb8565b50601f01601f191660200190565b600082601f830112610ff557600080fd5b813561100861100382610fbc565b610f57565b81815284602083860101111561101d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561104d57600080fd5b823561105881610e93565b915060208381013567ffffffffffffffff8082111561107657600080fd5b818601915086601f83011261108a57600080fd5b813561109861100382610f88565b81815260059190911b830184019084810190898311156110b757600080fd5b8585015b838110156111e8578035858111156110d257600080fd5b8601610160818d03601f190112156110e957600080fd5b6110f1610ee7565b6110fc898301610fac565b815260408201358982015260608201358781111561111957600080fd5b6111278e8b83860101610fe4565b60408301525060808201358781111561113f57600080fd5b61114d8e8b83860101610fe4565b60608301525060a0820135608082015260c082013560a082015260e082013560c082015261010082013560e0820152610120820135610100820152610140808301358881111561119c57600080fd5b6111aa8f8c83870101610fe4565b61012084015250610160830135888111156111c457600080fd5b6111d28f8c83870101610fe4565b91830191909152508452509186019186016110bb565b508096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561123157835183529284019291840191600101611215565b50909695505050505050565b6000602080838503121561125057600080fd5b823567ffffffffffffffff81111561126757600080fd5b8301601f8101851361127857600080fd5b803561128661100382610f88565b81815260059190911b820183019083810190878311156112a557600080fd5b928401925b828410156112cc5783356112bd81610e93565b825292840192908401906112aa565b979650505050505050565b600080602083850312156112ea57600080fd5b823567ffffffffffffffff8082111561130257600080fd5b818501915085601f83011261131657600080fd5b81358181111561132557600080fd5b86602082850101111561133757600080fd5b60209290920196919550909350505050565b60006020828403121561135b57600080fd5b813567ffffffffffffffff81111561137257600080fd5b82016101608185031215610d9057600080fd5b60005b838110156113a0578181015183820152602001611388565b838111156113af576000848401525b50505050565b600081518084526113cd816020860160208601611385565b601f01601f19169290920160200192915050565b6000604080835284511515818401526020808601516060850152818601516060608086015261141360a08601826113b5565b9050848103828601526101608651818352611430828401826113b5565b9150508287015182820384840152805182528381015184830152848101511515858301526060810151935065ffffffffffff80851660608401528060808301511660808401525060a081015193505060c060a082015261149360c08201846113b5565b925050828601516114b08483018280518252602090810151910152565b50606086015180516080830152602081015160a083015292506080860151805160c0830152602081015160e0830152925060a08601519250611521610100820184805173ffffffffffffffffffffffffffffffffffffffff1682526020908101518051828401520151604090910152565b5095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020815261158160208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60208201516040820152600060408301516101608060608501526115a96101808501836113b5565b91506060850151601f19808685030160808701526115c784836113b5565b9350608087015160a087015260a087015160c087015260c087015160e087015260e0870151915061010082818801528088015192505061012082818801528088015192505061014081878603018188015261162285846113b5565b90880151878203909201848801529350905061163e83826113b5565b9695505050505050565b60006020828403121561165a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116c1576116c1611661565b5060010190565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6020815260006117076020830184866116c8565b949350505050565b6000815160208301517fffffffff00000000000000000000000000000000000000000000000000000000808216935060048310156117575780818460040360031b1b83161693505b505050919050565b60008282101561177157611771611661565b500390565b60006020828403121561178857600080fd5b8151610d9081610e93565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126117c857600080fd5b830160208101925035905067ffffffffffffffff8111156117e857600080fd5b8036038213156117f757600080fd5b9250929050565b6020815261182c6020820161181284610fac565b73ffffffffffffffffffffffffffffffffffffffff169052565b6020820135604082015260006118456040840184611793565b61016080606086015261185d610180860183856116c8565b925061186c6060870187611793565b9250601f19808786030160808801526118868585846116c8565b9450608088013560a088015260a088013560c088015260c088013560e0880152610100935060e088013584880152610120915083880135828801526118cd82890189611793565b945091506101408188870301818901526118e88686856116c8565b95506118f6818a018a611793565b9550925050808786030183880152506112cc8484836116c8565b805165ffffffffffff81168114610fb757600080fd5b600061193461100384610fbc565b905082815283838301111561194857600080fd5b610d90836020830184611385565b600082601f83011261196757600080fd5b610d9083835160208501611926565b600060c0828403121561198857600080fd5b611990610f11565b90508151815260208201516020820152604082015180151581146119b357600080fd5b60408201526119c460608301611910565b60608201526119d560808301611910565b608082015260a082015167ffffffffffffffff8111156119f457600080fd5b611a0084828501611956565b60a08301525092915050565b600060408284031215611a1e57600080fd5b611a26610f34565b9050815181526020820151602082015292915050565b60008060008060e08587031215611a5257600080fd5b845167ffffffffffffffff811115611a6957600080fd5b611a7587828801611976565b945050611a858660208701611a0c565b9250611a948660608701611a0c565b9150611aa38660a08701611a0c565b905092959194509250565b600181811c90821680611ac257607f821691505b602082108103611afb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000806000806000858703610140811215611b1b57600080fd5b865167ffffffffffffffff811115611b3257600080fd5b611b3e89828a01611976565b965050611b4e8860208901611a0c565b9450611b5d8860608901611a0c565b9350611b6c8860a08901611a0c565b925060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2082011215611b9e57600080fd5b50611ba7610f34565b60e0870151611bb581610e93565b8152611bc5886101008901611a0c565b6020820152809150509295509295909350565b60008060408385031215611beb57600080fd5b82519150602083015167ffffffffffffffff811115611c0957600080fd5b8301601f81018513611c1a57600080fd5b611c2985825160208401611926565b9150509250929050565b60008219821115611c4657611c46611661565b50019056fea26469706673582212209a1c7252e82e84056f2a73f6c8f87a6651303771a673fe8cebe2dbe5467b390664736f6c634300080f0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x67 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9B249F69 GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x9B249F69 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0xB0D691FE EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0xEE219423 EQ PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3024E00C EQ PUSH2 0x6C JUMPI DUP1 PUSH4 0x7B34B621 EQ PUSH2 0x95 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x7A CALLDATASIZE PUSH1 0x4 PUSH2 0x103A JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP2 SWAP1 PUSH2 0x11F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA8 PUSH2 0xA3 CALLDATASIZE PUSH1 0x4 PUSH2 0x123D JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C JUMP JUMPDEST PUSH2 0xC9 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x12D7 JUMP JUMPDEST PUSH2 0x336 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xC9 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x121 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x1349 JUMP JUMPDEST PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8C SWAP3 SWAP2 SWAP1 PUSH2 0x13E1 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14B JUMPI PUSH2 0x14B PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x174 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x245 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA6193531 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1B1 JUMPI PUSH2 0x1B1 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x155A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x216 SWAP2 SWAP1 PUSH2 0x1648 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x228 JUMPI PUSH2 0x228 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x23D DUP2 PUSH2 0x1690 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x17A JUMP JUMPDEST POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26A JUMPI PUSH2 0x26A PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x293 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x302 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2B4 JUMPI PUSH2 0x2B4 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODEHASH DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E5 JUMPI PUSH2 0x2E5 PUSH2 0x152B JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x2FA DUP2 PUSH2 0x1690 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x299 JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x11F9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9B249F6900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x9B249F69 SWAP1 PUSH2 0x38F SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x16F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3BA JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x247 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x3F9 DUP3 PUSH2 0x170F JUMP JUMPDEST SWAP1 POP PUSH32 0x935847FA00000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND ADD PUSH2 0x47C JUMPI PUSH1 0x0 PUSH2 0x45E DUP4 PUSH1 0x4 DUP1 DUP7 MLOAD PUSH2 0x459 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x471 SWAP2 SWAP1 PUSH2 0x1776 JUMP JUMPDEST SWAP4 POP PUSH2 0x247 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420696E6974436F646500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x507 PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xEE21942300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xEE219423 SWAP1 PUSH2 0x55D SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x17FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x588 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xC34 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5B6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 PUSH2 0x5C7 DUP3 PUSH2 0x170F JUMP JUMPDEST SWAP1 POP PUSH32 0x1F300FA100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND ADD PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x62B DUP7 PUSH1 0x4 DUP1 DUP10 MLOAD PUSH2 0x459 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x63E SWAP2 SWAP1 PUSH2 0x1A3C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x10 PUSH1 0xC0 DUP3 ADD SWAP1 DUP2 MSTORE PUSH32 0x56616C69646174696F6E526573756C7400000000000000000000000000000000 PUSH1 0xE0 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP8 SWAP1 MSTORE DUP2 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD DUP6 MSTORE PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x4 SLOAD DUP2 MSTORE PUSH1 0x5 SLOAD DUP2 DUP6 ADD MSTORE DUP2 DUP5 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 DUP2 ADD DUP5 MSTORE PUSH1 0x18 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP3 MSTORE PUSH1 0x19 SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1A DUP1 SLOAD SWAP9 SWAP13 POP SWAP7 SWAP11 POP SWAP5 SWAP9 POP SWAP3 SWAP7 POP SWAP2 SWAP5 SWAP2 SWAP4 DUP6 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0x714 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x740 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x78D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x762 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x78D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x770 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP2 POP SWAP8 POP SWAP8 POP POP POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH32 0x5134B1C00000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND ADD PUSH2 0x953 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x80B DUP8 PUSH1 0x4 DUP1 DUP11 MLOAD PUSH2 0x459 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x81E SWAP2 SWAP1 PUSH2 0x1B01 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH2 0x100 DUP2 ADD DUP3 MSTORE PUSH1 0x1F PUSH1 0xC0 DUP3 ADD SWAP1 DUP2 MSTORE PUSH32 0x56616C69646174696F6E526573756C74576974684167677265676174696F6E00 PUSH1 0xE0 DUP4 ADD MSTORE DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE DUP2 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD SWAP1 DUP2 ADD DUP5 MSTORE PUSH1 0x18 DUP1 SLOAD PUSH1 0xFF AND ISZERO ISZERO DUP3 MSTORE PUSH1 0x19 SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1A DUP1 SLOAD SWAP10 SWAP15 POP SWAP8 SWAP13 POP SWAP6 SWAP11 POP SWAP4 SWAP9 POP SWAP2 SWAP7 POP SWAP2 SWAP5 SWAP1 SWAP4 DUP6 SWAP3 DUP5 ADD SWAP2 PUSH2 0x8BF SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8EB SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x938 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x90D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x938 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x91B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP2 POP SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH32 0xDDFD994A00000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND ADD PUSH2 0xC31 JUMPI PUSH1 0x0 DUP1 PUSH2 0x9B2 DUP5 PUSH1 0x4 DUP1 DUP8 MLOAD PUSH2 0x459 SWAP2 SWAP1 PUSH2 0x175F JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x9C5 SWAP2 SWAP1 PUSH2 0x1BD8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0xA DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0xA05 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA31 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA7E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA53 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA7E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA61 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x1 DUP5 ADD DUP1 SLOAD DUP3 MSTORE PUSH1 0x2 DUP6 ADD SLOAD PUSH1 0x20 DUP4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP7 ADD SLOAD PUSH1 0xFF DUP2 AND ISZERO ISZERO SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH6 0xFFFFFFFFFFFF PUSH2 0x100 DUP6 DIV DUP2 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH8 0x100000000000000 SWAP1 SWAP5 DIV SWAP1 SWAP4 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x4 DUP6 ADD DUP1 SLOAD SWAP4 SWAP1 SWAP5 ADD SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xA0 DUP5 ADD SWAP2 PUSH2 0xAFC SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB28 SWAP1 PUSH2 0x1AAE JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB75 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB4A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB75 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB58 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 SWAP1 SWAP3 MSTORE POP POP POP DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x5 DUP5 ADD SLOAD DUP2 MSTORE PUSH1 0x6 DUP5 ADD SLOAD PUSH1 0x20 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x7 DUP6 ADD SLOAD DUP2 MSTORE PUSH1 0x8 DUP6 ADD SLOAD DUP2 DUP4 ADD MSTORE DUP3 DUP5 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0x9 DUP6 ADD SLOAD DUP2 MSTORE PUSH1 0xA DUP6 ADD SLOAD DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD DUP4 MSTORE PUSH1 0xB DUP6 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0xC DUP6 ADD SLOAD DUP4 MSTORE PUSH1 0xD SWAP1 SWAP5 ADD SLOAD DUP3 DUP3 ADD MSTORE DUP4 ADD MSTORE PUSH1 0x80 ADD MSTORE SWAP2 SWAP10 SWAP2 SWAP9 POP SWAP1 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0xC47 DUP2 PUSH1 0x1F PUSH2 0x1C33 JUMP JUMPDEST LT ISZERO PUSH2 0xCAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F766572666C6F77000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4DA JUMP JUMPDEST PUSH2 0xCB9 DUP3 DUP5 PUSH2 0x1C33 JUMP JUMPDEST DUP5 MLOAD LT ISZERO PUSH2 0xD23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x736C6963655F6F75744F66426F756E6473000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4DA JUMP JUMPDEST PUSH1 0x60 DUP3 ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x0 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD8C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F DUP5 AND DUP1 ISZERO PUSH1 0x20 MUL DUP2 DUP5 ADD ADD DUP6 DUP2 ADD DUP8 DUP4 ISZERO PUSH1 0x20 MUL DUP5 DUP12 ADD ADD ADD JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0xD7B JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0xD63 JUMP JUMPDEST POP POP DUP6 DUP5 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x40 MSTORE POP JUMPDEST POP SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x60 DUP1 DUP4 MSTORE DUP4 MLOAD SWAP2 DUP3 ADD DUP5 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 DUP2 ADD DUP3 SWAP1 MSTORE SWAP5 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 SWAP2 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDF8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE1A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE49 PUSH2 0xE4E JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE49 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x160 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF0B JUMPI PUSH2 0xF0B PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xC0 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF0B JUMPI PUSH2 0xF0B PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF0B JUMPI PUSH2 0xF0B PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xF80 JUMPI PUSH2 0xF80 PUSH2 0xEB8 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xFA2 JUMPI PUSH2 0xFA2 PUSH2 0xEB8 JUMP JUMPDEST POP PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFB7 DUP2 PUSH2 0xE93 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xFD6 JUMPI PUSH2 0xFD6 PUSH2 0xEB8 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1008 PUSH2 0x1003 DUP3 PUSH2 0xFBC JUMP JUMPDEST PUSH2 0xF57 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x101D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x104D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1058 DUP2 PUSH2 0xE93 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x108A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1098 PUSH2 0x1003 DUP3 PUSH2 0xF88 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP4 ADD DUP5 ADD SWAP1 DUP5 DUP2 ADD SWAP1 DUP10 DUP4 GT ISZERO PUSH2 0x10B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 ADD JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11E8 JUMPI DUP1 CALLDATALOAD DUP6 DUP2 GT ISZERO PUSH2 0x10D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH2 0x160 DUP2 DUP14 SUB PUSH1 0x1F NOT ADD SLT ISZERO PUSH2 0x10E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10F1 PUSH2 0xEE7 JUMP JUMPDEST PUSH2 0x10FC DUP10 DUP4 ADD PUSH2 0xFAC JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD DUP10 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD DUP8 DUP2 GT ISZERO PUSH2 0x1119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1127 DUP15 DUP12 DUP4 DUP7 ADD ADD PUSH2 0xFE4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x80 DUP3 ADD CALLDATALOAD DUP8 DUP2 GT ISZERO PUSH2 0x113F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114D DUP15 DUP12 DUP4 DUP7 ADD ADD PUSH2 0xFE4 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x120 DUP3 ADD CALLDATALOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD DUP9 DUP2 GT ISZERO PUSH2 0x119C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11AA DUP16 DUP13 DUP4 DUP8 ADD ADD PUSH2 0xFE4 JUMP JUMPDEST PUSH2 0x120 DUP5 ADD MSTORE POP PUSH2 0x160 DUP4 ADD CALLDATALOAD DUP9 DUP2 GT ISZERO PUSH2 0x11C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11D2 DUP16 DUP13 DUP4 DUP8 ADD ADD PUSH2 0xFE4 JUMP JUMPDEST SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP5 MSTORE POP SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x10BB JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1231 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1215 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1286 PUSH2 0x1003 DUP3 PUSH2 0xF88 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x5 SWAP2 SWAP1 SWAP2 SHL DUP3 ADD DUP4 ADD SWAP1 DUP4 DUP2 ADD SWAP1 DUP8 DUP4 GT ISZERO PUSH2 0x12A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 DUP5 ADD SWAP3 JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 0x12CC JUMPI DUP4 CALLDATALOAD PUSH2 0x12BD DUP2 PUSH2 0xE93 JUMP JUMPDEST DUP3 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH2 0x12AA JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x135B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH2 0x160 DUP2 DUP6 SUB SLT ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13A0 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1388 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x13AF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x13CD DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1385 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP1 DUP4 MSTORE DUP5 MLOAD ISZERO ISZERO DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP1 DUP7 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE DUP2 DUP7 ADD MLOAD PUSH1 0x60 PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x1413 PUSH1 0xA0 DUP7 ADD DUP3 PUSH2 0x13B5 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 SUB DUP3 DUP7 ADD MSTORE PUSH2 0x160 DUP7 MLOAD DUP2 DUP4 MSTORE PUSH2 0x1430 DUP3 DUP5 ADD DUP3 PUSH2 0x13B5 JUMP JUMPDEST SWAP2 POP POP DUP3 DUP8 ADD MLOAD DUP3 DUP3 SUB DUP5 DUP5 ADD MSTORE DUP1 MLOAD DUP3 MSTORE DUP4 DUP2 ADD MLOAD DUP5 DUP4 ADD MSTORE DUP5 DUP2 ADD MLOAD ISZERO ISZERO DUP6 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD SWAP4 POP PUSH6 0xFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x60 DUP5 ADD MSTORE DUP1 PUSH1 0x80 DUP4 ADD MLOAD AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH1 0xA0 DUP2 ADD MLOAD SWAP4 POP POP PUSH1 0xC0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x1493 PUSH1 0xC0 DUP3 ADD DUP5 PUSH2 0x13B5 JUMP JUMPDEST SWAP3 POP POP DUP3 DUP7 ADD MLOAD PUSH2 0x14B0 DUP5 DUP4 ADD DUP3 DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST POP PUSH1 0x60 DUP7 ADD MLOAD DUP1 MLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP3 POP PUSH1 0x80 DUP7 ADD MLOAD DUP1 MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0xE0 DUP4 ADD MSTORE SWAP3 POP PUSH1 0xA0 DUP7 ADD MLOAD SWAP3 POP PUSH2 0x1521 PUSH2 0x100 DUP3 ADD DUP5 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD MLOAD DUP1 MLOAD DUP3 DUP5 ADD MSTORE ADD MLOAD PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH2 0x1581 PUSH1 0x20 DUP3 ADD DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x160 DUP1 PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x15A9 PUSH2 0x180 DUP6 ADD DUP4 PUSH2 0x13B5 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x1F NOT DUP1 DUP7 DUP6 SUB ADD PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x15C7 DUP5 DUP4 PUSH2 0x13B5 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP8 ADD MLOAD PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0xA0 DUP8 ADD MLOAD PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xC0 DUP8 ADD MLOAD PUSH1 0xE0 DUP8 ADD MSTORE PUSH1 0xE0 DUP8 ADD MLOAD SWAP2 POP PUSH2 0x100 DUP3 DUP2 DUP9 ADD MSTORE DUP1 DUP9 ADD MLOAD SWAP3 POP POP PUSH2 0x120 DUP3 DUP2 DUP9 ADD MSTORE DUP1 DUP9 ADD MLOAD SWAP3 POP POP PUSH2 0x140 DUP2 DUP8 DUP7 SUB ADD DUP2 DUP9 ADD MSTORE PUSH2 0x1622 DUP6 DUP5 PUSH2 0x13B5 JUMP JUMPDEST SWAP1 DUP9 ADD MLOAD DUP8 DUP3 SUB SWAP1 SWAP3 ADD DUP5 DUP9 ADD MSTORE SWAP4 POP SWAP1 POP PUSH2 0x163E DUP4 DUP3 PUSH2 0x13B5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x165A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x16C1 JUMPI PUSH2 0x16C1 PUSH2 0x1661 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1707 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH2 0x16C8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP1 DUP3 AND SWAP4 POP PUSH1 0x4 DUP4 LT ISZERO PUSH2 0x1757 JUMPI DUP1 DUP2 DUP5 PUSH1 0x4 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1771 JUMPI PUSH2 0x1771 PUSH2 0x1661 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1788 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xD90 DUP2 PUSH2 0xE93 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x17C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x17F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH2 0x182C PUSH1 0x20 DUP3 ADD PUSH2 0x1812 DUP5 PUSH2 0xFAC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1845 PUSH1 0x40 DUP5 ADD DUP5 PUSH2 0x1793 JUMP JUMPDEST PUSH2 0x160 DUP1 PUSH1 0x60 DUP7 ADD MSTORE PUSH2 0x185D PUSH2 0x180 DUP7 ADD DUP4 DUP6 PUSH2 0x16C8 JUMP JUMPDEST SWAP3 POP PUSH2 0x186C PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x1793 JUMP JUMPDEST SWAP3 POP PUSH1 0x1F NOT DUP1 DUP8 DUP7 SUB ADD PUSH1 0x80 DUP9 ADD MSTORE PUSH2 0x1886 DUP6 DUP6 DUP5 PUSH2 0x16C8 JUMP JUMPDEST SWAP5 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xA0 DUP9 ADD MSTORE PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH1 0xC0 DUP9 ADD MSTORE PUSH1 0xC0 DUP9 ADD CALLDATALOAD PUSH1 0xE0 DUP9 ADD MSTORE PUSH2 0x100 SWAP4 POP PUSH1 0xE0 DUP9 ADD CALLDATALOAD DUP5 DUP9 ADD MSTORE PUSH2 0x120 SWAP2 POP DUP4 DUP9 ADD CALLDATALOAD DUP3 DUP9 ADD MSTORE PUSH2 0x18CD DUP3 DUP10 ADD DUP10 PUSH2 0x1793 JUMP JUMPDEST SWAP5 POP SWAP2 POP PUSH2 0x140 DUP2 DUP9 DUP8 SUB ADD DUP2 DUP10 ADD MSTORE PUSH2 0x18E8 DUP7 DUP7 DUP6 PUSH2 0x16C8 JUMP JUMPDEST SWAP6 POP PUSH2 0x18F6 DUP2 DUP11 ADD DUP11 PUSH2 0x1793 JUMP JUMPDEST SWAP6 POP SWAP3 POP POP DUP1 DUP8 DUP7 SUB ADD DUP4 DUP9 ADD MSTORE POP PUSH2 0x12CC DUP5 DUP5 DUP4 PUSH2 0x16C8 JUMP JUMPDEST DUP1 MLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xFB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1934 PUSH2 0x1003 DUP5 PUSH2 0xFBC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1948 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD90 DUP4 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1385 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD90 DUP4 DUP4 MLOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1926 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1988 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1990 PUSH2 0xF11 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x19B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x19C4 PUSH1 0x60 DUP4 ADD PUSH2 0x1910 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x19D5 PUSH1 0x80 DUP4 ADD PUSH2 0x1910 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A00 DUP5 DUP3 DUP6 ADD PUSH2 0x1956 JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A26 PUSH2 0xF34 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1A52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1A69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A75 DUP8 DUP3 DUP9 ADD PUSH2 0x1976 JUMP JUMPDEST SWAP5 POP POP PUSH2 0x1A85 DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP3 POP PUSH2 0x1A94 DUP7 PUSH1 0x60 DUP8 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP2 POP PUSH2 0x1AA3 DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1AC2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1AFB JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP8 SUB PUSH2 0x140 DUP2 SLT ISZERO PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B3E DUP10 DUP3 DUP11 ADD PUSH2 0x1976 JUMP JUMPDEST SWAP7 POP POP PUSH2 0x1B4E DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP5 POP PUSH2 0x1B5D DUP9 PUSH1 0x60 DUP10 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP4 POP PUSH2 0x1B6C DUP9 PUSH1 0xA0 DUP10 ADD PUSH2 0x1A0C JUMP JUMPDEST SWAP3 POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF20 DUP3 ADD SLT ISZERO PUSH2 0x1B9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1BA7 PUSH2 0xF34 JUMP JUMPDEST PUSH1 0xE0 DUP8 ADD MLOAD PUSH2 0x1BB5 DUP2 PUSH2 0xE93 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1BC5 DUP9 PUSH2 0x100 DUP10 ADD PUSH2 0x1A0C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1C1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C29 DUP6 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1926 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1C46 JUMPI PUSH2 0x1C46 PUSH2 0x1661 JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP11 SHR PUSH19 0x52E82E84056F2A73F6C8F87A6651303771A673 INVALID DUP13 0xEB 0xE2 0xDB 0xE5 CHAINID PUSH28 0x390664736F6C634300080F0033000000000000000000000000000000 ","sourceMap":"189:9776:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8757:317;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9080:348;;;;;;:::i;:::-;;:::i;:::-;;;7058:25:7;;;7046:2;7031:18;9080:348:0;6912:177:7;9434:529:0;;;;;;:::i;:::-;;:::i;:::-;;;7998:42:7;7986:55;;;7968:74;;7956:2;7941:18;9434:529:0;7822:226:7;3787:29:0;;;;;;;;;4363:1578;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;8757:317::-;8859:20;8911:7;:14;8897:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8897:29:0;;8891:35;;8941:6;8936:112;8957:7;:14;8953:1;:18;8936:112;;;9001:10;:24;;;9026:7;9034:1;9026:10;;;;;;;;:::i;:::-;;;;;;;9001:36;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8992:3;8996:1;8992:6;;;;;;;;:::i;:::-;;;;;;;;;;:45;8973:3;;;;:::i;:::-;;;;8936:112;;;;8757:317;;;;;:::o;9080:348::-;9152:7;9171:23;9211:9;:16;9197:31;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9197:31:0;;9171:57;;9243:6;9238:102;9259:9;:16;9255:1;:20;9238:102;;;9308:9;9318:1;9308:12;;;;;;;;:::i;:::-;;;;;;;:21;;;9296:6;9303:1;9296:9;;;;;;;;:::i;:::-;;;;;;;;;;:33;9277:3;;;;:::i;:::-;;;;9238:102;;;;9349:17;9380:6;9369:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;9369:18:0;;;;;;;;;9405:15;;9369:18;9405:15;;;;;9080:348;-1:-1:-1;;;;9080:348:0:o;9434:529::-;9503:7;9526:10;;:37;;;;;:10;;;;;:27;;:37;;9554:8;;;;9526:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9522:435;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9621:23:0;9647:18;9654:10;9647:18;:::i;:::-;9621:44;-1:-1:-1;9684:48:0;;;;;9680:267;;9752:14;9780:43;9786:10;9798:1;9821;9801:10;:17;:21;;;;:::i;:::-;9780:5;:43::i;:::-;9769:66;;;;;;;;;;;;:::i;:::-;9752:83;-1:-1:-1;9853:13:0;;-1:-1:-1;;;9853:13:0;9680:267;9905:27;;;;;15693:2:7;9905:27:0;;;15675:21:7;15732:2;15712:18;;;15705:30;15771:18;15751;;;15744:46;15807:18;;9905:27:0;;;;;;;;4363:1578;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;4463:15:0;;:::i;:::-;4494:10;;:37;;;;;:10;;;;;:29;;:37;;4524:6;;4494:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4490:1445;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4589:23:0;4615:18;4622:10;4615:18;:::i;:::-;4589:44;-1:-1:-1;4652:45:0;;;;;4648:1277;;4718:28;4748:27;4777:28;4807:30;4852:43;4858:10;4870:1;4893;4873:10;:17;:21;;;;:::i;4852:43::-;4841:102;;;;;;;;;;;;:::i;:::-;4984:101;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4984:101:0;;;;;;;;;;;;5065:19;4984:101;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4984:101:0;;;4961:125;;;;;;;4969:13;4961:125;;;;;;;;;;;;;;;;;;;;4717:226;;-1:-1:-1;4717:226:0;;-1:-1:-1;4717:226:0;;-1:-1:-1;4717:226:0;;-1:-1:-1;4969:13:0;;4984:101;;4969:13;;4961:125;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4363:1578;;;:::o;4648:1277::-;5111:60;;;;;5107:818;;5192:28;5222:27;5251:28;5281:30;5313:41;5369:43;5375:10;5387:1;5410;5390:10;:17;:21;;;;:::i;5369:43::-;5358:123;;;;;;;;;;;;:::i;:::-;5522:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5522:111:0;;;;;-1:-1:-1;5522:111:0;;;;;5499:135;;;;;;;5507:13;5499:135;;;;;;;;;;;;;;;;;;;;5191:290;;-1:-1:-1;5191:290:0;;-1:-1:-1;5191:290:0;;-1:-1:-1;5191:290:0;;-1:-1:-1;5191:290:0;;-1:-1:-1;5507:13:0;;5522:111;;5507:13;;5499:135;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4363:1578;;;:::o;5107:818::-;5659:37;;;;;5655:270;;5716:15;5733:20;5768:43;5774:10;5786:1;5809;5789:10;:17;:21;;;;:::i;5768:43::-;5757:74;;;;;;;;;;;;:::i;:::-;5715:116;;;;5857:37;;;;;;;;5872:4;5857:37;;;;;;5878:7;5857:37;;;;5887:6;5857:37;;;5896:13;5849:61;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5849:61:0;;;-1:-1:-1;;5849:61:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5849:61:0;;;;-1:-1:-1;;;5849:61:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4363:1578:0;;-1:-1:-1;;;;;;;4363:1578:0:o;5655:270::-;4575:1360;4543:1392;4490:1445;4363:1578;;;:::o;5947:2804::-;6093:12;6145:7;6129:12;6145:7;6139:2;6129:12;:::i;:::-;:23;;6121:50;;;;;;;23391:2:7;6121:50:0;;;23373:21:7;23430:2;23410:18;;;23403:30;23469:16;23449:18;;;23442:44;23503:18;;6121:50:0;23189:338:7;6121:50:0;6206:16;6215:7;6206:6;:16;:::i;:::-;6189:6;:13;:33;;6181:63;;;;;;;23734:2:7;6181:63:0;;;23716:21:7;23773:2;23753:18;;;23746:30;23812:19;23792:18;;;23785:47;23849:18;;6181:63:0;23532:341:7;6181:63:0;6255:22;6318:15;;6346:1967;;;;8454:4;8448:11;8435:24;;8640:1;8629:9;8622:20;8688:4;8677:9;8673:20;8667:4;8660:34;6311:2397;;6346:1967;6528:4;6522:11;6509:24;;7187:2;7178:7;7174:16;7569:9;7562:17;7556:4;7552:28;7540:9;7529;7525:25;7521:60;7617:7;7613:2;7609:16;7869:6;7855:9;7848:17;7842:4;7838:28;7826:9;7818:6;7814:22;7810:57;7806:70;7643:425;7902:3;7898:2;7895:11;7643:425;;;8040:9;;8029:21;;7943:4;7935:13;;;;7975;7643:425;;;-1:-1:-1;;8086:26:0;;;8294:2;8277:11;-1:-1:-1;;8273:25:0;8267:4;8260:39;-1:-1:-1;6311:2397:0;-1:-1:-1;8735:9:0;-1:-1:-1;5947:2804:0;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:167:7;113:42;106:5;102:54;95:5;92:65;82:93;;171:1;168;161:12;82:93;14:167;:::o;186:184::-;238:77;235:1;228:88;335:4;332:1;325:15;359:4;356:1;349:15;375:255;447:2;441:9;489:6;477:19;;526:18;511:34;;547:22;;;508:62;505:88;;;573:18;;:::i;:::-;609:2;602:22;375:255;:::o;635:253::-;707:2;701:9;749:4;737:17;;784:18;769:34;;805:22;;;766:62;763:88;;;831:18;;:::i;893:257::-;965:4;959:11;;;997:17;;1044:18;1029:34;;1065:22;;;1026:62;1023:88;;;1091:18;;:::i;1155:334::-;1226:2;1220:9;1282:2;1272:13;;-1:-1:-1;;1268:86:7;1256:99;;1385:18;1370:34;;1406:22;;;1367:62;1364:88;;;1432:18;;:::i;:::-;1468:2;1461:22;1155:334;;-1:-1:-1;1155:334:7:o;1494:196::-;1567:4;1600:18;1592:6;1589:30;1586:56;;;1622:18;;:::i;:::-;-1:-1:-1;1667:1:7;1663:14;1679:4;1659:25;;1494:196::o;1695:147::-;1763:20;;1792:44;1763:20;1792:44;:::i;:::-;1695:147;;;:::o;1847:245::-;1895:4;1928:18;1920:6;1917:30;1914:56;;;1950:18;;:::i;:::-;-1:-1:-1;2007:2:7;1995:15;-1:-1:-1;;1991:88:7;2081:4;1987:99;;1847:245::o;2097:462::-;2139:5;2192:3;2185:4;2177:6;2173:17;2169:27;2159:55;;2210:1;2207;2200:12;2159:55;2246:6;2233:20;2277:48;2293:31;2321:2;2293:31;:::i;:::-;2277:48;:::i;:::-;2350:2;2341:7;2334:19;2396:3;2389:4;2384:2;2376:6;2372:15;2368:26;2365:35;2362:55;;;2413:1;2410;2403:12;2362:55;2478:2;2471:4;2463:6;2459:17;2452:4;2443:7;2439:18;2426:55;2526:1;2501:16;;;2519:4;2497:27;2490:38;;;;2505:7;2097:462;-1:-1:-1;;;2097:462:7:o;2564:2709::-;2707:6;2715;2768:2;2756:9;2747:7;2743:23;2739:32;2736:52;;;2784:1;2781;2774:12;2736:52;2823:9;2810:23;2842:44;2880:5;2842:44;:::i;:::-;2905:5;-1:-1:-1;2929:2:7;2967:18;;;2954:32;3005:18;3035:14;;;3032:34;;;3062:1;3059;3052:12;3032:34;3100:6;3089:9;3085:22;3075:32;;3145:7;3138:4;3134:2;3130:13;3126:27;3116:55;;3167:1;3164;3157:12;3116:55;3203:2;3190:16;3226:73;3242:56;3295:2;3242:56;:::i;3226:73::-;3333:15;;;3415:1;3411:10;;;;3403:19;;3399:28;;;3364:12;;;;3439:19;;;3436:39;;;3471:1;3468;3461:12;3436:39;3503:2;3499;3495:11;3515:1728;3531:6;3526:3;3523:15;3515:1728;;;3617:3;3604:17;3653:2;3640:11;3637:19;3634:39;;;3669:1;3666;3659:12;3634:39;3696:20;;3827:6;3740:16;;;-1:-1:-1;;3736:89:7;3732:102;3729:122;;;3847:1;3844;3837:12;3729:122;3879:22;;:::i;:::-;3930:31;3957:2;3953;3949:11;3930:31;:::i;:::-;3921:7;3914:48;4021:2;4017;4013:11;4000:25;3995:2;3986:7;3982:16;3975:51;4076:2;4072;4068:11;4055:25;4109:2;4099:8;4096:16;4093:36;;;4125:1;4122;4115:12;4093:36;4167:53;4212:7;4207:2;4196:8;4192:2;4188:17;4184:26;4167:53;:::i;:::-;4162:2;4153:7;4149:16;4142:79;;4271:3;4267:2;4263:12;4250:26;4305:2;4295:8;4292:16;4289:36;;;4321:1;4318;4311:12;4289:36;4363:53;4408:7;4403:2;4392:8;4388:2;4384:17;4380:26;4363:53;:::i;:::-;4358:2;4349:7;4345:16;4338:79;;4477:3;4473:2;4469:12;4456:26;4450:3;4441:7;4437:17;4430:53;4543:3;4539:2;4535:12;4522:26;4516:3;4507:7;4503:17;4496:53;4609:3;4605:2;4601:12;4588:26;4582:3;4573:7;4569:17;4562:53;4675:3;4671:2;4667:12;4654:26;4648:3;4639:7;4635:17;4628:53;4741:3;4737:2;4733:12;4720:26;4714:3;4705:7;4701:17;4694:53;4770:3;4823:2;4819;4815:11;4802:25;4856:2;4846:8;4843:16;4840:36;;;4872:1;4869;4862:12;4840:36;4915:53;4960:7;4955:2;4944:8;4940:2;4936:17;4932:26;4915:53;:::i;:::-;4909:3;4900:7;4896:17;4889:80;;5019:6;5015:2;5011:15;4998:29;5056:2;5046:8;5043:16;5040:36;;;5072:1;5069;5062:12;5040:36;5114:53;5159:7;5154:2;5143:8;5139:2;5135:17;5131:26;5114:53;:::i;:::-;5096:16;;;5089:79;;;;-1:-1:-1;5181:20:7;;-1:-1:-1;5221:12:7;;;;3548;;3515:1728;;;3519:3;5262:5;5252:15;;;;;;;;2564:2709;;;;;:::o;5278:632::-;5449:2;5501:21;;;5571:13;;5474:18;;;5593:22;;;5420:4;;5449:2;5672:15;;;;5646:2;5631:18;;;5420:4;5715:169;5729:6;5726:1;5723:13;5715:169;;;5790:13;;5778:26;;5859:15;;;;5824:12;;;;5751:1;5744:9;5715:169;;;-1:-1:-1;5901:3:7;;5278:632;-1:-1:-1;;;;;;5278:632:7:o;5915:992::-;5999:6;6030:2;6073;6061:9;6052:7;6048:23;6044:32;6041:52;;;6089:1;6086;6079:12;6041:52;6129:9;6116:23;6162:18;6154:6;6151:30;6148:50;;;6194:1;6191;6184:12;6148:50;6217:22;;6270:4;6262:13;;6258:27;-1:-1:-1;6248:55:7;;6299:1;6296;6289:12;6248:55;6335:2;6322:16;6358:73;6374:56;6427:2;6374:56;:::i;6358:73::-;6465:15;;;6547:1;6543:10;;;;6535:19;;6531:28;;;6496:12;;;;6571:19;;;6568:39;;;6603:1;6600;6593:12;6568:39;6627:11;;;;6647:230;6663:6;6658:3;6655:15;6647:230;;;6743:3;6730:17;6760:44;6798:5;6760:44;:::i;:::-;6817:18;;6680:12;;;;6855;;;;6647:230;;;6896:5;5915:992;-1:-1:-1;;;;;;;5915:992:7:o;7094:591::-;7164:6;7172;7225:2;7213:9;7204:7;7200:23;7196:32;7193:52;;;7241:1;7238;7231:12;7193:52;7281:9;7268:23;7310:18;7351:2;7343:6;7340:14;7337:34;;;7367:1;7364;7357:12;7337:34;7405:6;7394:9;7390:22;7380:32;;7450:7;7443:4;7439:2;7435:13;7431:27;7421:55;;7472:1;7469;7462:12;7421:55;7512:2;7499:16;7538:2;7530:6;7527:14;7524:34;;;7554:1;7551;7544:12;7524:34;7599:7;7594:2;7585:6;7581:2;7577:15;7573:24;7570:37;7567:57;;;7620:1;7617;7610:12;7567:57;7651:2;7643:11;;;;;7673:6;;-1:-1:-1;7094:591:7;;-1:-1:-1;;;;7094:591:7:o;8303:393::-;8395:6;8448:2;8436:9;8427:7;8423:23;8419:32;8416:52;;;8464:1;8461;8454:12;8416:52;8504:9;8491:23;8537:18;8529:6;8526:30;8523:50;;;8569:1;8566;8559:12;8523:50;8592:22;;8648:3;8630:16;;;8626:26;8623:46;;;8665:1;8662;8655:12;8701:258;8773:1;8783:113;8797:6;8794:1;8791:13;8783:113;;;8873:11;;;8867:18;8854:11;;;8847:39;8819:2;8812:10;8783:113;;;8914:6;8911:1;8908:13;8905:48;;;8949:1;8940:6;8935:3;8931:16;8924:27;8905:48;;8701:258;;;:::o;8964:317::-;9006:3;9044:5;9038:12;9071:6;9066:3;9059:19;9087:63;9143:6;9136:4;9131:3;9127:14;9120:4;9113:5;9109:16;9087:63;:::i;:::-;9195:2;9183:15;-1:-1:-1;;9179:88:7;9170:98;;;;9270:4;9166:109;;8964:317;-1:-1:-1;;8964:317:7:o;9717:2043::-;9945:4;9974:2;10003;9992:9;9985:21;10062:6;10056:13;10049:21;10042:29;10037:2;10026:9;10022:18;10015:57;10091:4;10151:2;10143:6;10139:15;10133:22;10126:4;10115:9;10111:20;10104:52;10203:2;10195:6;10191:15;10185:22;10244:4;10238:3;10227:9;10223:19;10216:33;10269:52;10316:3;10305:9;10301:19;10287:12;10269:52;:::i;:::-;10258:63;;10366:9;10361:3;10357:19;10352:2;10341:9;10337:18;10330:47;10396:6;10439;10433:13;10467:2;10462:3;10455:15;10493:47;10536:2;10531:3;10527:12;10511:14;10493:47;:::i;:::-;10479:61;;;10589:2;10581:6;10577:15;10571:22;10635:3;10627:6;10623:16;10618:2;10613:3;10609:12;10602:38;10670:14;10664:21;10656:6;10649:37;10745:2;10729:14;10725:23;10719:30;10714:2;10706:6;10702:15;10695:55;10823:2;10807:14;10803:23;10797:30;10790:38;10783:46;10778:2;10770:6;10766:15;10759:71;10887:4;10871:14;10867:25;10861:32;10839:54;;10912:14;10981:2;10965:14;10961:23;10954:4;10946:6;10942:17;10935:50;11056:2;11049:3;11033:14;11029:24;11023:31;11019:40;11013:3;11005:6;11001:16;10994:66;;11117:3;11101:14;11097:24;11091:31;11069:53;;;11156:4;11150:3;11142:6;11138:16;11131:30;11183:52;11229:4;11221:6;11217:17;11201:14;11183:52;:::i;:::-;11170:65;;;11284:2;11276:6;11272:15;11266:22;11297:57;11350:2;11345:3;11341:12;11325:14;9361:12;;9349:25;;9423:4;9412:16;;;9406:23;9390:14;;9383:47;9286:150;11297:57;-1:-1:-1;11403:4:7;11391:17;;11385:24;9361:12;;11471:3;11462:13;;9349:25;9423:4;9412:16;;9406:23;9390:14;;;9383:47;11385:24;-1:-1:-1;11525:3:7;11513:16;;11507:23;9361:12;;11592:4;11583:14;;9349:25;9423:4;9412:16;;9406:23;9390:14;;;9383:47;11507:23;-1:-1:-1;11647:3:7;11639:6;11635:16;11629:23;11607:45;;11661:71;11724:6;11719:3;11715:16;11699:14;9530:12;;9544:42;9526:61;9514:74;;9634:4;9623:16;;;9617:23;9361:12;;9691:14;;;9349:25;9412:16;9406:23;9390:14;;;;9383:47;9441:271;11661:71;-1:-1:-1;11749:5:7;9717:2043;-1:-1:-1;;;;;9717:2043:7:o;11765:184::-;11817:77;11814:1;11807:88;11914:4;11911:1;11904:15;11938:4;11935:1;11928:15;11954:1556;12145:2;12134:9;12127:21;12157:53;12206:2;12195:9;12191:18;12182:6;12176:13;7767:42;7756:54;7744:67;;7690:127;12157:53;12264:2;12256:6;12252:15;12246:22;12241:2;12230:9;12226:18;12219:50;12108:4;12316:2;12308:6;12304:15;12298:22;12339:6;12381:2;12376;12365:9;12361:18;12354:30;12407:52;12454:3;12443:9;12439:19;12425:12;12407:52;:::i;:::-;12393:66;;12508:2;12500:6;12496:15;12490:22;-1:-1:-1;;12662:2:7;12650:9;12642:6;12638:22;12634:31;12628:3;12617:9;12613:19;12606:60;12689:41;12723:6;12707:14;12689:41;:::i;:::-;12675:55;;12785:3;12777:6;12773:16;12767:23;12761:3;12750:9;12746:19;12739:52;12846:3;12838:6;12834:16;12828:23;12822:3;12811:9;12807:19;12800:52;12907:3;12899:6;12895:16;12889:23;12883:3;12872:9;12868:19;12861:52;12950:3;12942:6;12938:16;12932:23;12922:33;;12974:3;13013:2;13008;12997:9;12993:18;12986:30;13053:2;13045:6;13041:15;13035:22;13025:32;;;13076:3;13115:2;13110;13099:9;13095:18;13088:30;13167:2;13159:6;13155:15;13149:22;13127:44;;;13190:3;13257:2;13245:9;13237:6;13233:22;13229:31;13224:2;13213:9;13209:18;13202:59;13284:41;13318:6;13302:14;13284:41;:::i;:::-;13362:15;;;13356:22;13418;;;13414:31;;;13394:18;;;13387:59;13270:55;-1:-1:-1;13356:22:7;-1:-1:-1;13463:41:7;13270:55;13356:22;13463:41;:::i;:::-;13455:49;11954:1556;-1:-1:-1;;;;;;11954:1556:7:o;13515:184::-;13585:6;13638:2;13626:9;13617:7;13613:23;13609:32;13606:52;;;13654:1;13651;13644:12;13606:52;-1:-1:-1;13677:16:7;;13515:184;-1:-1:-1;13515:184:7:o;13704:::-;13756:77;13753:1;13746:88;13853:4;13850:1;13843:15;13877:4;13874:1;13867:15;13893:195;13932:3;13963:66;13956:5;13953:77;13950:103;;14033:18;;:::i;:::-;-1:-1:-1;14080:1:7;14069:13;;13893:195::o;14093:325::-;14181:6;14176:3;14169:19;14233:6;14226:5;14219:4;14214:3;14210:14;14197:43;;14285:1;14278:4;14269:6;14264:3;14260:16;14256:27;14249:38;14151:3;14407:4;-1:-1:-1;;14332:2:7;14324:6;14320:15;14316:88;14311:3;14307:98;14303:109;14296:116;;14093:325;;;;:::o;14423:244::-;14580:2;14569:9;14562:21;14543:4;14600:61;14657:2;14646:9;14642:18;14634:6;14626;14600:61;:::i;:::-;14592:69;14423:244;-1:-1:-1;;;;14423:244:7:o;14672:407::-;14755:5;14795;14789:12;14837:4;14830:5;14826:16;14820:23;14862:66;14954:2;14950;14946:11;14937:20;;14980:1;14972:6;14969:13;14966:107;;;15060:2;15054;15044:6;15041:1;15037:14;15034:1;15030:22;15026:31;15022:2;15018:40;15014:49;15005:58;;14966:107;;;;14672:407;;;:::o;15084:125::-;15124:4;15152:1;15149;15146:8;15143:34;;;15157:18;;:::i;:::-;-1:-1:-1;15194:9:7;;15084:125::o;15214:272::-;15292:6;15345:2;15333:9;15324:7;15320:23;15316:32;15313:52;;;15361:1;15358;15351:12;15313:52;15393:9;15387:16;15412:44;15450:5;15412:44;:::i;15836:559::-;15894:5;15901:6;15961:3;15948:17;16043:66;16032:8;16016:14;16012:29;16008:102;15988:18;15984:127;15974:155;;16125:1;16122;16115:12;15974:155;16153:33;;16257:4;16244:18;;;-1:-1:-1;16205:21:7;;-1:-1:-1;16285:18:7;16274:30;;16271:50;;;16317:1;16314;16307:12;16271:50;16364:6;16348:14;16344:27;16337:5;16333:39;16330:59;;;16385:1;16382;16375:12;16330:59;15836:559;;;;;:::o;16400:1859::-;16593:2;16582:9;16575:21;16605:66;16667:2;16656:9;16652:18;16624:26;16643:6;16624:26;:::i;:::-;7767:42;7756:54;7744:67;;7690:127;16605:66;16732:2;16724:6;16720:15;16707:29;16702:2;16691:9;16687:18;16680:57;16556:4;16780:55;16831:2;16823:6;16819:15;16811:6;16780:55;:::i;:::-;16854:6;16896:2;16891;16880:9;16876:18;16869:30;16922:74;16991:3;16980:9;16976:19;16962:12;16948;16922:74;:::i;:::-;16908:88;;17043:55;17094:2;17086:6;17082:15;17074:6;17043:55;:::i;:::-;17005:93;;-1:-1:-1;;17248:2:7;17236:9;17228:6;17224:22;17220:31;17214:3;17203:9;17199:19;17192:60;17275:65;17333:6;17317:14;17301;17275:65;:::i;:::-;17261:79;;17402:3;17394:6;17390:16;17377:30;17371:3;17360:9;17356:19;17349:59;17470:3;17462:6;17458:16;17445:30;17439:3;17428:9;17424:19;17417:59;17538:3;17530:6;17526:16;17513:30;17507:3;17496:9;17492:19;17485:59;17563:3;17553:13;;17627:3;17619:6;17615:16;17602:30;17597:2;17586:9;17582:18;17575:58;17652:3;17642:13;;17716:2;17708:6;17704:15;17691:29;17686:2;17675:9;17671:18;17664:57;17768:55;17819:2;17811:6;17807:15;17799:6;17768:55;:::i;:::-;17730:93;;;;17842:3;17909:2;17897:9;17889:6;17885:22;17881:31;17876:2;17865:9;17861:18;17854:59;17936:65;17994:6;17978:14;17962;17936:65;:::i;:::-;17922:79;;18048:55;18099:2;18091:6;18087:15;18079:6;18048:55;:::i;:::-;18010:93;;;;;18167:2;18155:9;18147:6;18143:22;18139:31;18134:2;18123:9;18119:18;18112:59;;18188:65;18246:6;18230:14;18214;18188:65;:::i;18264:171::-;18342:13;;18395:14;18384:26;;18374:37;;18364:65;;18425:1;18422;18415:12;18440:307;18515:5;18544:52;18560:35;18588:6;18560:35;:::i;18544:52::-;18535:61;;18619:6;18612:5;18605:21;18659:3;18650:6;18645:3;18641:16;18638:25;18635:45;;;18676:1;18673;18666:12;18635:45;18689:52;18734:6;18727:4;18720:5;18716:16;18711:3;18689:52;:::i;18752:235::-;18805:5;18858:3;18851:4;18843:6;18839:17;18835:27;18825:55;;18876:1;18873;18866:12;18825:55;18898:83;18977:3;18968:6;18962:13;18955:4;18947:6;18943:17;18898:83;:::i;18992:806::-;19060:5;19108:4;19096:9;19091:3;19087:19;19083:30;19080:50;;;19126:1;19123;19116:12;19080:50;19148:22;;:::i;:::-;19139:31;;19199:9;19193:16;19186:5;19179:31;19263:2;19252:9;19248:18;19242:25;19237:2;19230:5;19226:14;19219:49;19313:2;19302:9;19298:18;19292:25;19362:7;19355:15;19348:23;19339:7;19336:36;19326:64;;19386:1;19383;19376:12;19326:64;19417:2;19406:14;;19399:31;19462:48;19506:2;19491:18;;19462:48;:::i;:::-;19457:2;19450:5;19446:14;19439:72;19544:49;19588:3;19577:9;19573:19;19544:49;:::i;:::-;19538:3;19531:5;19527:15;19520:74;19638:3;19627:9;19623:19;19617:26;19666:18;19658:6;19655:30;19652:50;;;19698:1;19695;19688:12;19652:50;19735:56;19787:3;19778:6;19767:9;19763:22;19735:56;:::i;:::-;19729:3;19722:5;19718:15;19711:81;;18992:806;;;;:::o;19803:281::-;19870:5;19918:4;19906:9;19901:3;19897:19;19893:30;19890:50;;;19936:1;19933;19926:12;19890:50;19958:22;;:::i;:::-;19949:31;;20009:9;20003:16;19996:5;19989:31;20073:2;20062:9;20058:18;20052:25;20047:2;20040:5;20036:14;20029:49;19803:281;;;;:::o;20089:750::-;20287:6;20295;20303;20311;20364:3;20352:9;20343:7;20339:23;20335:33;20332:53;;;20381:1;20378;20371:12;20332:53;20414:9;20408:16;20447:18;20439:6;20436:30;20433:50;;;20479:1;20476;20469:12;20433:50;20502:72;20566:7;20557:6;20546:9;20542:22;20502:72;:::i;:::-;20492:82;;;20593:67;20652:7;20647:2;20636:9;20632:18;20593:67;:::i;:::-;20583:77;;20679:67;20738:7;20733:2;20722:9;20718:18;20679:67;:::i;:::-;20669:77;;20765:68;20825:7;20819:3;20808:9;20804:19;20765:68;:::i;:::-;20755:78;;20089:750;;;;;;;:::o;20844:437::-;20923:1;20919:12;;;;20966;;;20987:61;;21041:4;21033:6;21029:17;21019:27;;20987:61;21094:2;21086:6;21083:14;21063:18;21060:38;21057:218;;21131:77;21128:1;21121:88;21232:4;21229:1;21222:15;21260:4;21257:1;21250:15;21057:218;;20844:437;;;:::o;21286:1241::-;21528:6;21536;21544;21552;21560;21604:9;21595:7;21591:23;21634:3;21630:2;21626:12;21623:32;;;21651:1;21648;21641:12;21623:32;21684:9;21678:16;21717:18;21709:6;21706:30;21703:50;;;21749:1;21746;21739:12;21703:50;21772:72;21836:7;21827:6;21816:9;21812:22;21772:72;:::i;:::-;21762:82;;;21863:67;21922:7;21917:2;21906:9;21902:18;21863:67;:::i;:::-;21853:77;;21949:67;22008:7;22003:2;21992:9;21988:18;21949:67;:::i;:::-;21939:77;;22035:68;22095:7;22089:3;22078:9;22074:19;22035:68;:::i;:::-;22025:78;;22196:2;22127:66;22123:2;22119:75;22115:84;22112:104;;;22212:1;22209;22202:12;22112:104;;22238:22;;:::i;:::-;22305:3;22294:9;22290:19;22284:26;22319:46;22357:7;22319:46;:::i;:::-;22374:22;;22428:68;22488:7;22482:3;22467:19;;22428:68;:::i;:::-;22423:2;22416:5;22412:14;22405:92;22516:5;22506:15;;;21286:1241;;;;;;;;:::o;22532:519::-;22621:6;22629;22682:2;22670:9;22661:7;22657:23;22653:32;22650:52;;;22698:1;22695;22688:12;22650:52;22727:9;22721:16;22711:26;;22781:2;22770:9;22766:18;22760:25;22808:18;22800:6;22797:30;22794:50;;;22840:1;22837;22830:12;22794:50;22863:22;;22916:4;22908:13;;22904:27;-1:-1:-1;22894:55:7;;22945:1;22942;22935:12;22894:55;22968:77;23037:7;23032:2;23026:9;23021:2;23017;23013:11;22968:77;:::i;:::-;22958:87;;;22532:519;;;;;:::o;23056:128::-;23096:3;23127:1;23123:6;23120:1;23117:13;23114:39;;;23133:18;;:::i;:::-;-1:-1:-1;23169:9:7;;23056:128::o"},"gasEstimates":{"creation":{"codeDepositCost":"1459400","executionCost":"infinite","totalCost":"infinite"},"external":{"entryPoint()":"2335","getCodeHashes(address[])":"infinite","getSenderAddress(bytes)":"infinite","getUserOpHashes(address,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":"infinite","simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"infinite"},"internal":{"slice(bytes memory,uint256,uint256)":"infinite"}},"methodIdentifiers":{"entryPoint()":"b0d691fe","getCodeHashes(address[])":"7b34b621","getSenderAddress(bytes)":"9b249f69","getUserOpHashes(address,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":"3024e00c","simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"ee219423"}},"metadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct EntryPointWrapper.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResult\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct EntryPointWrapper.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct EntryPointWrapper.AggregatorStakeInfo\",\"name\":\"aggregatorInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResultWithAggregation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getCodeHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getSenderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"}],\"name\":\"getUserOpHashes\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ret\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"simulateValidation\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"internalType\":\"struct EntryPointWrapper.FailedOpStatus\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"selectorType\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct EntryPointWrapper.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct EntryPointWrapper.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct EntryPointWrapper.AggregatorStakeInfo\",\"name\":\"aggregatorInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct EntryPointWrapper.Response\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"params\":{\"opIndex\":\"- index into the array of ops to the failed one (in simulateValidation, this is always zero)\",\"reason\":\"- revert reason      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\"}}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"params\":{\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"params\":{\"aggregatorInfo\":\"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation\",\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"notice\":\"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"SenderAddressResult(address)\":[{\"notice\":\"return value of getSenderAddress\"}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"notice\":\"Successful result from simulateValidation.\"}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"notice\":\"Successful result from simulateValidation, if the account returns a signature aggregator\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bundler/EntryPointWrapper.sol\":\"EntryPointWrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/bundler/EntryPointWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\n\\ncontract EntryPointWrapper {\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    struct FailedOpStatus {\\n        bool status;\\n        uint256 opIndex;\\n        string reason;\\n    }\\n\\n    struct Response {\\n        string selectorType;\\n        ReturnInfo returnInfo;\\n        StakeInfo senderInfo;\\n        StakeInfo factoryInfo;\\n        StakeInfo paymasterInfo;\\n        AggregatorStakeInfo aggregatorInfo;\\n    }\\n\\n\\n     /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    IEntryPoint public entryPoint;\\n\\n    StakeInfo private emptyStakeInfo = StakeInfo(0, 0);\\n    AggregatorStakeInfo private emptyAggregatorInfo = AggregatorStakeInfo(address(0), emptyStakeInfo);\\n    ReturnInfo private emptyReturnInfo = ReturnInfo(0, 0, false, 0, 0, new bytes(0));\\n    Response private emptyResponse = Response(\\\"\\\", emptyReturnInfo, emptyStakeInfo, emptyStakeInfo, emptyStakeInfo, emptyAggregatorInfo);\\n    FailedOpStatus private emptyFailedOp = FailedOpStatus(false, 0, \\\"\\\");\\n\\n    constructor(IEntryPoint _entryPoint) {\\n        entryPoint = _entryPoint;\\n    }\\n\\n    function simulateValidation(UserOperation calldata userOp) external returns (FailedOpStatus memory, Response memory) {\\n        try entryPoint.simulateValidation(userOp) {}\\n        catch (bytes memory revertData) {\\n            bytes4 receivedSelector = bytes4(revertData);\\n\\n            if (receivedSelector == ValidationResult.selector) {\\n                (ReturnInfo memory returnInfo, StakeInfo memory senderInfo, StakeInfo memory factoryInfo, StakeInfo memory paymasterInfo) = abi.decode(slice(revertData, 4, revertData.length - 4), (ReturnInfo, StakeInfo, StakeInfo, StakeInfo));\\n                return (emptyFailedOp, Response('ValidationResult', returnInfo, senderInfo, factoryInfo, paymasterInfo, emptyAggregatorInfo));\\n            } else if (receivedSelector == ValidationResultWithAggregation.selector) {\\n                (ReturnInfo memory returnInfo, StakeInfo memory senderInfo, StakeInfo memory factoryInfo, StakeInfo memory paymasterInfo, AggregatorStakeInfo memory aggregatorInfo) = abi.decode(slice(revertData, 4, revertData.length - 4), (ReturnInfo, StakeInfo, StakeInfo, StakeInfo, AggregatorStakeInfo));\\n                return (emptyFailedOp, Response('ValidationResultWithAggregation', returnInfo, senderInfo, factoryInfo, paymasterInfo, aggregatorInfo));\\n            } else if (receivedSelector == FailedOp.selector){\\n                (uint256 opIndex, string memory reason) = abi.decode(slice(revertData, 4, revertData.length - 4), (uint256, string));\\n                return (FailedOpStatus(true, opIndex, reason), emptyResponse);\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function getUserOpHashes(IEntryPoint entryPoint, UserOperation[] memory userOps) public view returns (bytes32[] memory ret) {\\n        ret = new bytes32[](userOps.length);\\n        for (uint i = 0; i < userOps.length; i++) {\\n            ret[i] = entryPoint.getUserOpHash(userOps[i]);\\n        }\\n        return ret;\\n    }\\n\\n    function getCodeHashes(address[] memory addresses) public view returns (bytes32) {\\n        bytes32[] memory hashes = new bytes32[](addresses.length);\\n        for (uint i = 0; i < addresses.length; i++) {\\n            hashes[i] = addresses[i].codehash;\\n        }\\n        bytes memory data = abi.encode(hashes);\\n        return (keccak256(data));\\n    }\\n\\n    function getSenderAddress(bytes calldata initCode) external returns (address) {\\n        try entryPoint.getSenderAddress(initCode) {}\\n        catch (bytes memory revertData) {\\n            bytes4 receivedSelector = bytes4(revertData);\\n\\n            if (receivedSelector == SenderAddressResult.selector) {\\n                address sender = abi.decode(slice(revertData, 4, revertData.length - 4), (address));\\n                return sender;\\n            } else {\\n                revert (\\\"Invalid initCode\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c23023455b0482b74cc944c9e92638e1c7cdfe3f5bf58df0d146b1263ed8654\",\"license\":\"GPL-3.0\"},\"contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\",\"keccak256\":\"0x752bf1326abaf46258a67cbeb506a6a079a51fe5e5e6d262569e3ad2ff9b1780\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x021f7ede6eaaa4744443324b988b9b4f653ffb4cdaa86f87def932514b059356\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":99,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"entryPoint","offset":0,"slot":"0","type":"t_contract(IEntryPoint)998"},{"astId":106,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"emptyStakeInfo","offset":0,"slot":"1","type":"t_struct(StakeInfo)20_storage"},{"astId":116,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"emptyAggregatorInfo","offset":0,"slot":"3","type":"t_struct(AggregatorStakeInfo)26_storage"},{"astId":130,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"emptyReturnInfo","offset":0,"slot":"6","type":"t_struct(ReturnInfo)15_storage"},{"astId":141,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"emptyResponse","offset":0,"slot":"10","type":"t_struct(Response)51_storage"},{"astId":149,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"emptyFailedOp","offset":0,"slot":"24","type":"t_struct(FailedOpStatus)33_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(IEntryPoint)998":{"encoding":"inplace","label":"contract IEntryPoint","numberOfBytes":"20"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(AggregatorStakeInfo)26_storage":{"encoding":"inplace","label":"struct EntryPointWrapper.AggregatorStakeInfo","members":[{"astId":22,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"aggregator","offset":0,"slot":"0","type":"t_address"},{"astId":25,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"stakeInfo","offset":0,"slot":"1","type":"t_struct(StakeInfo)20_storage"}],"numberOfBytes":"96"},"t_struct(FailedOpStatus)33_storage":{"encoding":"inplace","label":"struct EntryPointWrapper.FailedOpStatus","members":[{"astId":28,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"status","offset":0,"slot":"0","type":"t_bool"},{"astId":30,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"opIndex","offset":0,"slot":"1","type":"t_uint256"},{"astId":32,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"reason","offset":0,"slot":"2","type":"t_string_storage"}],"numberOfBytes":"96"},"t_struct(Response)51_storage":{"encoding":"inplace","label":"struct EntryPointWrapper.Response","members":[{"astId":35,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"selectorType","offset":0,"slot":"0","type":"t_string_storage"},{"astId":38,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"returnInfo","offset":0,"slot":"1","type":"t_struct(ReturnInfo)15_storage"},{"astId":41,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"senderInfo","offset":0,"slot":"5","type":"t_struct(StakeInfo)20_storage"},{"astId":44,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"factoryInfo","offset":0,"slot":"7","type":"t_struct(StakeInfo)20_storage"},{"astId":47,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"paymasterInfo","offset":0,"slot":"9","type":"t_struct(StakeInfo)20_storage"},{"astId":50,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"aggregatorInfo","offset":0,"slot":"11","type":"t_struct(AggregatorStakeInfo)26_storage"}],"numberOfBytes":"448"},"t_struct(ReturnInfo)15_storage":{"encoding":"inplace","label":"struct EntryPointWrapper.ReturnInfo","members":[{"astId":4,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"preOpGas","offset":0,"slot":"0","type":"t_uint256"},{"astId":6,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"prefund","offset":0,"slot":"1","type":"t_uint256"},{"astId":8,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"sigFailed","offset":0,"slot":"2","type":"t_bool"},{"astId":10,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"validAfter","offset":1,"slot":"2","type":"t_uint48"},{"astId":12,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"validUntil","offset":7,"slot":"2","type":"t_uint48"},{"astId":14,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"paymasterContext","offset":0,"slot":"3","type":"t_bytes_storage"}],"numberOfBytes":"128"},"t_struct(StakeInfo)20_storage":{"encoding":"inplace","label":"struct EntryPointWrapper.StakeInfo","members":[{"astId":17,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"stake","offset":0,"slot":"0","type":"t_uint256"},{"astId":19,"contract":"contracts/bundler/EntryPointWrapper.sol:EntryPointWrapper","label":"unstakeDelaySec","offset":0,"slot":"1","type":"t_uint256"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint48":{"encoding":"inplace","label":"uint48","numberOfBytes":"6"}}},"userdoc":{"errors":{"FailedOp(uint256,string)":[{"notice":"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it."}],"SenderAddressResult(address)":[{"notice":"return value of getSenderAddress"}],"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))":[{"notice":"Successful result from simulateValidation."}],"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))":[{"notice":"Successful result from simulateValidation, if the account returns a signature aggregator"}]},"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IAggregator.sol":{"IAggregator":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"}],"name":"aggregateSignatures","outputs":[{"internalType":"bytes","name":"aggregatedSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"validateSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"validateUserOpSignature","outputs":[{"internalType":"bytes","name":"sigForUserOp","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":{"params":{"userOps":"array of UserOperations to collect the signatures from."},"returns":{"aggregatedSignature":"the aggregated signature"}},"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"params":{"userOp":"the userOperation received from the user."},"returns":{"sigForUserOp":"the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \"multisig\""}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":"275e2d79","validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)":"e3563a4f","validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"64c530cd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"}],\"name\":\"aggregateSignatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregatedSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"validateUserOpSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"sigForUserOp\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"params\":{\"userOps\":\"array of UserOperations to collect the signatures from.\"},\"returns\":{\"aggregatedSignature\":\"the aggregated signature\"}},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"params\":{\"userOp\":\"the userOperation received from the user.\"},\"returns\":{\"sigForUserOp\":\"the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"notice\":\"aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation\"},\"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)\":{\"notice\":\"validate aggregated signature. revert if the aggregated signature does not match the given list of operations.\"},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\"}},\"notice\":\"Aggregated Signatures validator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IAggregator.sol\":\"IAggregator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\",\"keccak256\":\"0x752bf1326abaf46258a67cbeb506a6a079a51fe5e5e6d262569e3ad2ff9b1780\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x021f7ede6eaaa4744443324b988b9b4f653ffb4cdaa86f87def932514b059356\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":{"notice":"aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation"},"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)":{"notice":"validate aggregated signature. revert if the aggregated signature does not match the given list of operations."},"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"notice":"validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps."}},"notice":"Aggregated Signatures validator.","version":1}}},"contracts/interfaces/IEntryPoint.sol":{"IEntryPoint":{"abi":[{"inputs":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"paid","type":"uint256"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bool","name":"targetSuccess","type":"bool"},{"internalType":"bytes","name":"targetResult","type":"bytes"}],"name":"ExecutionResult","type":"error"},{"inputs":[{"internalType":"uint256","name":"opIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"name":"FailedOp","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderAddressResult","type":"error"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureValidationFailed","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct IEntryPoint.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"paymasterInfo","type":"tuple"}],"name":"ValidationResult","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct IEntryPoint.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"paymasterInfo","type":"tuple"},{"components":[{"internalType":"address","name":"aggregator","type":"address"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"stakeInfo","type":"tuple"}],"internalType":"struct IEntryPoint.AggregatorStakeInfo","name":"aggregatorInfo","type":"tuple"}],"name":"ValidationResultWithAggregation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"factory","type":"address"},{"indexed":false,"internalType":"address","name":"paymaster","type":"address"}],"name":"AccountDeployed","type":"event"},{"anonymous":false,"inputs":[],"name":"BeforeExecution","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalDeposit","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureAggregatorChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"name":"StakeLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawTime","type":"uint256"}],"name":"StakeUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"paymaster","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"},{"indexed":false,"internalType":"uint256","name":"actualGasCost","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"actualGasUsed","type":"uint256"}],"name":"UserOperationEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"revertReason","type":"bytes"}],"name":"UserOperationRevertReason","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[{"internalType":"uint32","name":"_unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"depositTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getDepositInfo","outputs":[{"components":[{"internalType":"uint112","name":"deposit","type":"uint112"},{"internalType":"bool","name":"staked","type":"bool"},{"internalType":"uint112","name":"stake","type":"uint112"},{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"},{"internalType":"uint48","name":"withdrawTime","type":"uint48"}],"internalType":"struct IStakeManager.DepositInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint192","name":"key","type":"uint192"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"getSenderAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"getUserOpHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"},{"internalType":"contract IAggregator","name":"aggregator","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct IEntryPoint.UserOpsPerAggregator[]","name":"opsPerAggregator","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleAggregatedOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"ops","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint192","name":"key","type":"uint192"}],"name":"incrementNonce","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"op","type":"tuple"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"targetCallData","type":"bytes"}],"name":"simulateHandleOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"simulateValidation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedOp(uint256,string)":[{"params":{"opIndex":"- index into the array of ops to the failed one (in simulateValidation, this is always zero)","reason":"- revert reason      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."}}],"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))":[{"params":{"factoryInfo":"stake information about the factory (if any)","paymasterInfo":"stake information about the paymaster (if any)","returnInfo":"gas and time-range returned values","senderInfo":"stake information about the sender"}}],"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))":[{"params":{"aggregatorInfo":"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation","factoryInfo":"stake information about the factory (if any)","paymasterInfo":"stake information about the paymaster (if any)","returnInfo":"gas and time-range returned values","senderInfo":"stake information about the sender"}}]},"events":{"AccountDeployed(bytes32,address,address,address)":{"params":{"factory":"the factory used to deploy this account (in the initCode)","paymaster":"the paymaster used by this UserOp","sender":"the account that is deployed","userOpHash":"the userOp that deployed this account. UserOperationEvent will follow."}},"UserOperationRevertReason(bytes32,address,uint256,bytes)":{"params":{"nonce":"the nonce used in the request","revertReason":"- the return bytes from the (reverted) call to \"callData\".","sender":"the sender of this request","userOpHash":"the request unique identifier."}}},"kind":"dev","methods":{"addStake(uint32)":{"params":{"_unstakeDelaySec":"the new lock duration before the deposit can be withdrawn."}},"balanceOf(address)":{"returns":{"_0":"the deposit (for gas payment) of the account"}},"getDepositInfo(address)":{"returns":{"info":"- full deposit information of given account"}},"getNonce(address,uint192)":{"params":{"key":"the high 192 bit of the nonce","sender":"the account address"},"returns":{"nonce":"a full nonce to pass for next UserOp with this sender."}},"getSenderAddress(bytes)":{"params":{"initCode":"the constructor code to be passed into the UserOperation."}},"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)":{"params":{"beneficiary":"the address to receive the fees","opsPerAggregator":"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)"}},"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)":{"params":{"beneficiary":"the address to receive the fees","ops":"the operations to execute"}},"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)":{"params":{"op":"the UserOperation to simulate","target":"if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.","targetCallData":"callData to pass to target address"}},"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"details":"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.","params":{"userOp":"the user operation to validate."}},"withdrawStake(address)":{"params":{"withdrawAddress":"the address to send withdrawn value."}},"withdrawTo(address,uint256)":{"params":{"withdrawAddress":"the address to send withdrawn value.","withdrawAmount":"the amount to withdraw."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint32)":"0396cb60","balanceOf(address)":"70a08231","depositTo(address)":"b760faf9","getDepositInfo(address)":"5287ce12","getNonce(address,uint192)":"35567e1a","getSenderAddress(bytes)":"9b249f69","getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"a6193531","handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)":"4b1d7cf5","handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)":"1fad948c","incrementNonce(uint192)":"0bd28e3b","simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)":"d6383f94","simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"ee219423","unlockStake()":"bb9fe6bf","withdrawStake(address)":"c23a5cea","withdrawTo(address,uint256)":"205c2878"}},"metadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"targetSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"targetResult\",\"type\":\"bytes\"}],\"name\":\"ExecutionResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureValidationFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResult\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IEntryPoint.AggregatorStakeInfo\",\"name\":\"aggregatorInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResultWithAggregation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"AccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeforeExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasUsed\",\"type\":\"uint256\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getSenderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOpsPerAggregator[]\",\"name\":\"opsPerAggregator\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleAggregatedOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"op\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"targetCallData\",\"type\":\"bytes\"}],\"name\":\"simulateHandleOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"simulateValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"params\":{\"opIndex\":\"- index into the array of ops to the failed one (in simulateValidation, this is always zero)\",\"reason\":\"- revert reason      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\"}}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"params\":{\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"params\":{\"aggregatorInfo\":\"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation\",\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"params\":{\"factory\":\"the factory used to deploy this account (in the initCode)\",\"paymaster\":\"the paymaster used by this UserOp\",\"sender\":\"the account that is deployed\",\"userOpHash\":\"the userOp that deployed this account. UserOperationEvent will follow.\"}},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"params\":{\"nonce\":\"the nonce used in the request\",\"revertReason\":\"- the return bytes from the (reverted) call to \\\"callData\\\".\",\"sender\":\"the sender of this request\",\"userOpHash\":\"the request unique identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"the deposit (for gas payment) of the account\"}},\"getDepositInfo(address)\":{\"returns\":{\"info\":\"- full deposit information of given account\"}},\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}},\"getSenderAddress(bytes)\":{\"params\":{\"initCode\":\"the constructor code to be passed into the UserOperation.\"}},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"opsPerAggregator\":\"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\"}},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"ops\":\"the operations to execute\"}},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"params\":{\"op\":\"the UserOperation to simulate\",\"target\":\"if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.\",\"targetCallData\":\"callData to pass to target address\"}},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"details\":\"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\",\"params\":{\"userOp\":\"the user operation to validate.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)\":[{\"notice\":\"return value of simulateHandleOp\"}],\"FailedOp(uint256,string)\":[{\"notice\":\"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"SenderAddressResult(address)\":[{\"notice\":\"return value of getSenderAddress\"}],\"SignatureValidationFailed(address)\":[{\"notice\":\"error case when a signature aggregator fails to verify the aggregated signature it had created.\"}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"notice\":\"Successful result from simulateValidation.\"}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"notice\":\"Successful result from simulateValidation, if the account returns a signature aggregator\"}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"notice\":\"account \\\"sender\\\" was deployed.\"},\"BeforeExecution()\":{\"notice\":\"an event emitted by handleOps(), before starting the execution loop. any event emitted before this event, is part of the validation.\"},\"SignatureAggregatorChanged(address)\":{\"notice\":\"signature aggregator used by the following UserOperationEvents within this bundle.\"},\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted when stake or unstake delay are modified\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"getSenderAddress(bytes)\":{\"notice\":\"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error\"},\"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\"},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation with Aggregators\"},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"notice\":\"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \\\"ExecutionResult\\\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events.\"},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IEntryPoint.sol\":\"IEntryPoint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\",\"keccak256\":\"0x752bf1326abaf46258a67cbeb506a6a079a51fe5e5e6d262569e3ad2ff9b1780\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x021f7ede6eaaa4744443324b988b9b4f653ffb4cdaa86f87def932514b059356\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)":[{"notice":"return value of simulateHandleOp"}],"FailedOp(uint256,string)":[{"notice":"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it."}],"SenderAddressResult(address)":[{"notice":"return value of getSenderAddress"}],"SignatureValidationFailed(address)":[{"notice":"error case when a signature aggregator fails to verify the aggregated signature it had created."}],"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))":[{"notice":"Successful result from simulateValidation."}],"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))":[{"notice":"Successful result from simulateValidation, if the account returns a signature aggregator"}]},"events":{"AccountDeployed(bytes32,address,address,address)":{"notice":"account \"sender\" was deployed."},"BeforeExecution()":{"notice":"an event emitted by handleOps(), before starting the execution loop. any event emitted before this event, is part of the validation."},"SignatureAggregatorChanged(address)":{"notice":"signature aggregator used by the following UserOperationEvents within this bundle."},"StakeLocked(address,uint256,uint256)":{"notice":"Emitted when stake or unstake delay are modified"},"StakeUnlocked(address,uint256)":{"notice":"Emitted once a stake is scheduled for withdrawal"},"UserOperationRevertReason(bytes32,address,uint256,bytes)":{"notice":"An event emitted if the UserOperation \"callData\" reverted with non-zero length"}},"kind":"user","methods":{"addStake(uint32)":{"notice":"add to the account's stake - amount and delay any pending unstake is first cancelled."},"depositTo(address)":{"notice":"add to the deposit of the given account"},"getNonce(address,uint192)":{"notice":"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."},"getSenderAddress(bytes)":{"notice":"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error"},"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"notice":"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."},"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)":{"notice":"Execute a batch of UserOperation with Aggregators"},"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)":{"notice":"Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead."},"incrementNonce(uint192)":{"notice":"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."},"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)":{"notice":"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \"ExecutionResult\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events."},"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"notice":"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp."},"unlockStake()":{"notice":"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."},"withdrawStake(address)":{"notice":"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"},"withdrawTo(address,uint256)":{"notice":"withdraw from the deposit."}},"version":1}}},"contracts/interfaces/INonceManager.sol":{"INonceManager":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint192","name":"key","type":"uint192"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint192","name":"key","type":"uint192"}],"name":"incrementNonce","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getNonce(address,uint192)":{"params":{"key":"the high 192 bit of the nonce","sender":"the account address"},"returns":{"nonce":"a full nonce to pass for next UserOp with this sender."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getNonce(address,uint192)":"35567e1a","incrementNonce(uint192)":"0bd28e3b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/INonceManager.sol\":\"INonceManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getNonce(address,uint192)":{"notice":"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."},"incrementNonce(uint192)":{"notice":"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."}},"version":1}}},"contracts/interfaces/IStakeManager.sol":{"IStakeManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalDeposit","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"name":"StakeLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawTime","type":"uint256"}],"name":"StakeUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[{"internalType":"uint32","name":"_unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"depositTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getDepositInfo","outputs":[{"components":[{"internalType":"uint112","name":"deposit","type":"uint112"},{"internalType":"bool","name":"staked","type":"bool"},{"internalType":"uint112","name":"stake","type":"uint112"},{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"},{"internalType":"uint48","name":"withdrawTime","type":"uint48"}],"internalType":"struct IStakeManager.DepositInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addStake(uint32)":{"params":{"_unstakeDelaySec":"the new lock duration before the deposit can be withdrawn."}},"balanceOf(address)":{"returns":{"_0":"the deposit (for gas payment) of the account"}},"getDepositInfo(address)":{"returns":{"info":"- full deposit information of given account"}},"withdrawStake(address)":{"params":{"withdrawAddress":"the address to send withdrawn value."}},"withdrawTo(address,uint256)":{"params":{"withdrawAddress":"the address to send withdrawn value.","withdrawAmount":"the amount to withdraw."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint32)":"0396cb60","balanceOf(address)":"70a08231","depositTo(address)":"b760faf9","getDepositInfo(address)":"5287ce12","unlockStake()":"bb9fe6bf","withdrawStake(address)":"c23a5cea","withdrawTo(address,uint256)":"205c2878"}},"metadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"the deposit (for gas payment) of the account\"}},\"getDepositInfo(address)\":{\"returns\":{\"info\":\"- full deposit information of given account\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted when stake or unstake delay are modified\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"notice\":\"manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IStakeManager.sol\":\"IStakeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"StakeLocked(address,uint256,uint256)":{"notice":"Emitted when stake or unstake delay are modified"},"StakeUnlocked(address,uint256)":{"notice":"Emitted once a stake is scheduled for withdrawal"}},"kind":"user","methods":{"addStake(uint32)":{"notice":"add to the account's stake - amount and delay any pending unstake is first cancelled."},"depositTo(address)":{"notice":"add to the deposit of the given account"},"unlockStake()":{"notice":"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."},"withdrawStake(address)":{"notice":"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"},"withdrawTo(address,uint256)":{"notice":"withdraw from the deposit."}},"notice":"manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \"unstakeDelay\" by the staked entity.","version":1}}},"contracts/interfaces/UserOperation.sol":{"UserOperationLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122008ede85b51f24773a2dd2b0edf24b0e09a5175eda2b1ed78902ad573776ccf1264736f6c634300080f0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD 0xED 0xE8 JUMPDEST MLOAD CALLCODE SELFBALANCE PUSH20 0xA2DD2B0EDF24B0E09A5175EDA2B1ED78902AD573 PUSH24 0x6CCF1264736F6C634300080F003300000000000000000000 ","sourceMap":"1642:2115:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1642:2115:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122008ede85b51f24773a2dd2b0edf24b0e09a5175eda2b1ed78902ad573776ccf1264736f6c634300080f0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD 0xED 0xE8 JUMPDEST MLOAD CALLCODE SELFBALANCE PUSH20 0xA2DD2B0EDF24B0E09A5175EDA2B1ED78902AD573 PUSH24 0x6CCF1264736F6C634300080F003300000000000000000000 ","sourceMap":"1642:2115:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"gasPrice(struct UserOperation calldata)":"infinite","getSender(struct UserOperation calldata)":"infinite","hash(struct UserOperation calldata)":"infinite","min(uint256,uint256)":"infinite","pack(struct UserOperation calldata)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Utility functions helpful when working with UserOperation structs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/UserOperation.sol\":\"UserOperationLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\",\"keccak256\":\"0x752bf1326abaf46258a67cbeb506a6a079a51fe5e5e6d262569e3ad2ff9b1780\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n    /**\\n     * User Operation struct\\n     * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x021f7ede6eaaa4744443324b988b9b4f653ffb4cdaa86f87def932514b059356\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Utility functions helpful when working with UserOperation structs.","version":1}}}}}}