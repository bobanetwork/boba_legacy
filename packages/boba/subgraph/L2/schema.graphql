type LPAddLiquidity @entity {
  id: ID!
  sender: Bytes
  amount: String
  token: Bytes
}

type LPClientDepositL2 @entity {
  id: ID!
  sender: Bytes
  amount: String
  token: Bytes
}

type LPClientPayL2 @entity {
  id: ID!
  sender: Bytes
  amount: String
  userRewardFee: String
  ownerRewardFee: String
  totalFee: String
  token: Bytes
}

type LPOwnerRecoverFee @entity {
  id: ID!
  sender: Bytes
  receiver: Bytes
  amount: String
  token: Bytes
}

type LPWithdrawLiquidity @entity {
  id: ID!
  sender: Bytes
  receiver: Bytes
  amount: String
  token: Bytes
}

type LPWithdrawReward @entity {
  id: ID!
  sender: Bytes
  receiver: Bytes
  amount: String
  token: Bytes
}

type StandardBridgeWithdrawalInitiated @entity {
  id: ID!
  l1Token: Bytes
  l2Token: Bytes
  from: Bytes
  to: Bytes
  amount: String
  data: Bytes
}

type StandardBridgeDepositFinalized @entity {
  id: ID!
  l1Token: Bytes
  l2Token: Bytes
  from: Bytes
  to: Bytes
  amount: String
  data: Bytes
}

type StandardBridgeDepositFailed @entity {
  id: ID!
  l1Token: Bytes
  l2Token: Bytes
  from: Bytes
  to: Bytes
  amount: String
  data: Bytes
}

type GovernorNewAdmin @entity {
  id: ID!
  oldAdmin: Bytes
  newAdmin: Bytes
}

type GovernorNewImplementation @entity {
  id: ID!
  oldImplementation: Bytes
  newImplementation: Bytes
}

type GovernorNewPendingAdmin @entity {
  id: ID!
  oldPendingAdmin: Bytes
  newPendingAdmin: Bytes
}

type GovernorProposalCanceled @entity {
  id: ID!
  proposalId: String
}

type GovernorProposalCreated @entity {
  id: ID!
  proposalId: String
  proposer: Bytes
  targets: [Bytes!]
  values: [String!]
  signatures: [String!]
  calldatas: [Bytes!]
  startTimestamp: String
  endTimestamp: String
  description: String
}

type GovernorProposalExecuted @entity {
  id: ID!
  proposalId: String
}

type GovernorProposalQueued @entity {
  id: ID!
  proposalId: String
  eta: String
}

type GovernorProposalThresholdSet @entity {
  id: ID!
  oldProposalThreshold: String
  newProposalThreshold: String
}

type GovernorVoteCast @entity {
  id: ID!
  voter: Bytes
  proposalId: String
  support: String
  votes: String
  reason: String
}

type GovernorVotingDelaySet @entity {
  id: ID!
  oldVotingDelay: String
  newVotingDelay: String
}

type GovernorVotingPeriodSet @entity {
  id: ID!
  oldVotingPeriod: String
  newVotingPeriod: String
}

type UseBobaAsFeeTokenEvent @entity {
  id: ID!
  address: Bytes
}

type SwapBOBAForETHMetaTransactionEvent @entity {
  id: ID!
  address: Bytes
}

type UseETHAsFeeTokenEvent @entity {
  id: ID!
  address: Bytes
}

type TuringMonstersTransferEvent @entity {
  id: ID!
  from: Bytes
  to: Bytes
  tokenId: String
}
