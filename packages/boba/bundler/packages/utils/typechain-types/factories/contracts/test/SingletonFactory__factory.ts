/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SingletonFactory,
  SingletonFactoryInterface,
} from "../../../contracts/test/SingletonFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_initCode",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_salt",
        type: "bytes32",
      },
    ],
    name: "deploy",
    outputs: [
      {
        internalType: "address payable",
        name: "createdContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610173806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634af63f0214610030575b600080fd5b61004361003e366004610088565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000818351602085016000f59392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561009b57600080fd5b823567ffffffffffffffff808211156100b357600080fd5b818501915085601f8301126100c757600080fd5b8135818111156100d9576100d9610072565b604051601f8201601f19908116603f0116810190838211818310171561010157610101610072565b8160405282815288602084870101111561011a57600080fd5b82602086016020830137600060209382018401529896909101359650505050505056fea2646970667358221220a00a6af181a9de8ffaa5190a52de8e7c54787e5e42a2e0de5a6442fbe117a9ec64736f6c63430008110033";

type SingletonFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SingletonFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SingletonFactory__factory extends ContractFactory {
  constructor(...args: SingletonFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SingletonFactory> {
    return super.deploy(overrides || {}) as Promise<SingletonFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SingletonFactory {
    return super.attach(address) as SingletonFactory;
  }
  override connect(signer: Signer): SingletonFactory__factory {
    return super.connect(signer) as SingletonFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SingletonFactoryInterface {
    return new utils.Interface(_abi) as SingletonFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SingletonFactory {
    return new Contract(address, _abi, signerOrProvider) as SingletonFactory;
  }
}
