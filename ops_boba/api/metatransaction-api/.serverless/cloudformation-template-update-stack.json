{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "BobaUnderscoreswapBOBAForETHLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-boba-mainnet-metaTransaction-prod-boba_swapBOBAForETH"
      }
    },
    "BobaUnderscorerequestTestnetETHAuthenticatedLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-boba-mainnet-metaTransaction-prod-boba_requestTestnetETHAuthenticated"
      }
    },
    "BobaUnderscoreswapBOBAForETHLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sls-boba-mainnet-metaTransaction/prod/1652116105349-2022-05-09T17:08:25.349Z/boba_swapBOBAForETH.zip"
        },
        "Handler": "metaTransaction_swapBOBAForETH.mainnetHandler",
        "Runtime": "nodejs12.x",
        "FunctionName": "sls-boba-mainnet-metaTransaction-prod-boba_swapBOBAForETH",
        "MemorySize": 10240,
        "Timeout": 60,
        "Role": "arn:aws:iam::942431445534:role/Enyasmc",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-06d0389929cf31a18"
          ],
          "SubnetIds": [
            "subnet-09319c8bdd93a146d",
            "subnet-094bb0205f83390d6"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:942431445534:layer:nodejs:2"
        ]
      },
      "DependsOn": [
        "BobaUnderscoreswapBOBAForETHLogGroup"
      ]
    },
    "BobaUnderscorerequestTestnetETHAuthenticatedLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sls-boba-mainnet-metaTransaction/prod/1652116105349-2022-05-09T17:08:25.349Z/boba_requestTestnetETHAuthenticated.zip"
        },
        "Handler": "metaTransaction_requestTestnetETHAuthenticated.rinkebyHandler",
        "Runtime": "nodejs12.x",
        "FunctionName": "sls-boba-mainnet-metaTransaction-prod-boba_requestTestnetETHAuthenticated",
        "MemorySize": 10240,
        "Timeout": 60,
        "Role": "arn:aws:iam::942431445534:role/Enyasmc",
        "VpcConfig": {
          "SecurityGroupIds": [
            "sg-06d0389929cf31a18"
          ],
          "SubnetIds": [
            "subnet-09319c8bdd93a146d",
            "subnet-094bb0205f83390d6"
          ]
        },
        "Layers": [
          "arn:aws:lambda:us-east-1:942431445534:layer:nodejs:2"
        ]
      },
      "DependsOn": [
        "BobaUnderscorerequestTestnetETHAuthenticatedLogGroup"
      ]
    },
    "BobaUnderscoreswapBOBAForETHLambdaVersionj4SgZF8AX9VbAHMq45xaO0zOCDSOgzQngO7MBS1dJ4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BobaUnderscoreswapBOBAForETHLambdaFunction"
        },
        "CodeSha256": "k7r5dNMVDISQo27yKrn9g6CtGwCX4gTXrLs6cIN3fdU="
      }
    },
    "BobaUnderscorerequestTestnetETHAuthenticatedLambdaVersionrUlNWQzQmhQ7OY7NSFp50Xxjmb3iXTDlolRagtQjc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "BobaUnderscorerequestTestnetETHAuthenticatedLambdaFunction"
        },
        "CodeSha256": "k7r5dNMVDISQo27yKrn9g6CtGwCX4gTXrLs6cIN3fdU="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "prod-sls-boba-mainnet-metaTransaction",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceSendswapbobaforeth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "send.swapBOBAForETH",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSendrequesttestnetethauthenticated": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "send.requestTestnetETHAuthenticated",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSendswapbobaforethOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSendswapbobaforeth"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSendrequesttestnetethauthenticatedOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSendrequesttestnetethauthenticated"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSendswapbobaforethPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSendswapbobaforeth"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BobaUnderscoreswapBOBAForETHLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "BobaUnderscoreswapBOBAForETHLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSendrequesttestnetethauthenticatedPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSendrequesttestnetethauthenticated"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "BobaUnderscorerequestTestnetETHAuthenticatedLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "BobaUnderscorerequestTestnetETHAuthenticatedLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1652116103667": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "ApiGatewayMethodSendswapbobaforethOptions",
        "ApiGatewayMethodSendrequesttestnetethauthenticatedOptions",
        "ApiGatewayMethodSendswapbobaforethPost",
        "ApiGatewayMethodSendrequesttestnetethauthenticatedPost"
      ]
    },
    "BobaUnderscoreswapBOBAForETHLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BobaUnderscoreswapBOBAForETHLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "BobaUnderscorerequestTestnetETHAuthenticatedLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "BobaUnderscorerequestTestnetETHAuthenticatedLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-sls-boba-mainnet-metaTransaction-prod-ServerlessDeploymentBucketName"
      }
    },
    "BobaUnderscoreswapBOBAForETHLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BobaUnderscoreswapBOBAForETHLambdaVersionj4SgZF8AX9VbAHMq45xaO0zOCDSOgzQngO7MBS1dJ4"
      },
      "Export": {
        "Name": "sls-sls-boba-mainnet-metaTransaction-prod-BobaUnderscoreswapBOBAForETHLambdaFunctionQualifiedArn"
      }
    },
    "BobaUnderscorerequestTestnetETHAuthenticatedLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "BobaUnderscorerequestTestnetETHAuthenticatedLambdaVersionrUlNWQzQmhQ7OY7NSFp50Xxjmb3iXTDlolRagtQjc"
      },
      "Export": {
        "Name": "sls-sls-boba-mainnet-metaTransaction-prod-BobaUnderscorerequestTestnetETHAuthenticatedLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/prod"
          ]
        ]
      },
      "Export": {
        "Name": "sls-sls-boba-mainnet-metaTransaction-prod-ServiceEndpoint"
      }
    }
  }
}