AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya Gnosis-Safe Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: v0.0.6

  DockerPrefix:
    Type: String
    Default: bobanetwork

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: rinkeby-infrastructure-core

Conditions:
  IsProduction:
    !Equals [!Ref EnvironmentName, "production"]

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToELB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:Describe*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "s3:*"
                Resource: "*"
        - PolicyName: AllowAccessToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub
                    - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
                    - S3BucketV2:
                        Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"

        - PolicyName: AllowAccessToSecrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:Describe*"
                  - "cloudwatch:Get*"
                  - "cloudwatch:List*"
                  - "logs:TestMetricFilter"
                  - "logs:PutSubscriptionFilter"
                  - "logs:DeleteSubscriptionFilter"
                  - "logs:DescribeSubscriptionFilters"
                  - "support:*"
                  - "tag:GetResources"
                  - "tag:GetTagKeys"
                  - "tag:GetTagValues"
                Resource: "*"

  GnosisLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GnosisLBTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GnosisLBTargetGroup3:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3666
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GnosisLBHTTPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Matcher:
        HttpCode: 200-499
      HealthCheckProtocol: HTTP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GnosisLBHTTPTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Matcher:
        HttpCode: 200-499
      HealthCheckProtocol: HTTP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GnosisLBHTTPTargetGroup3:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3666
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Matcher:
        HttpCode: 200-499
      HealthCheckProtocol: HTTP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GnosisListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosis:ARN"
      Port: 443
      Protocol: TLS
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBTargetGroup

  GnosisListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:ApplicationLoadBalancerGnosis:ARN"
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2020-10
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBHTTPTargetGroup

  GnosisListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosisTransaction:ARN"
      Port: 443
      Protocol: TLS
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBTargetGroup2

  GnosisListener2HTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:ApplicationLoadBalancerGnosisTransaction:ARN"
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2020-10
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBHTTPTargetGroup2

  GnosisListener3:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosisGateway:ARN"
      Port: 443
      Protocol: TLS
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBTargetGroup3

  GnosisListener3HTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:ApplicationLoadBalancerGnosisGateway:ARN"
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-FS-1-2-Res-2020-10
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GnosisLBHTTPTargetGroup3

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: docker_sock
          Host:
            SourcePath: "/var/run/docker.sock"
        - Name: docker_logs
          Host:
            SourcePath: "/var/lib/docker/containers"
        - Name: docker_run
          Host:
            SourcePath: "/opt/datadog-agent/run"
        - Name: proc
          Host:
            SourcePath: "/proc/"
        - Name: cgroup
          Host:
            SourcePath: "/sys/fs/cgroup/"
        - Name: password
          Host:
            SourcePath: "/etc/passwd"
        - Name: nginx
          Host:
            SourcePath: "/mnt/nginx"
        - Name: nginx2
          Host:
            SourcePath: "/mnt/nginx2"
      ContainerDefinitions:
        - Image: datadog/agent:latest
          Name: datadog
          Environment:
            - Name: DD_SITE
              Value: "datadoghq.com"
            - Name: DD_PROCESS_AGENT_ENABLED
              Value: "true"
            - Name: DD_LOGS_ENABLED
              Value: "true"
            - Name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              Value: "true"
            - Name: DD_LOGS_CONFIG_DOCKER_CONTAINER_USE_FILE
              Value: "true"
            - Name: DD_CONTAINER_EXCLUDE
              Value: "name:datadog-agent"
            - Name: DD_CONTAINER_EXCLUDE
              Value: "name:amazon-ecs-agent"
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/datadog.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          MountPoints:
            - ContainerPath: "/var/run/docker.sock"
              SourceVolume: docker_sock
            - ContainerPath: "/host/sys/fs/cgroup"
              SourceVolume: cgroup
            - ContainerPath: "/host/proc"
              SourceVolume: proc
            - ContainerPath: "/opt/datadog-agent/run"
              SourceVolume: docker_run
            - ContainerPath: "/var/lib/docker/containers"
              SourceVolume: docker_logs
          Essential: true
          Memory: "256"
          Cpu: "10"
        - Image: !Sub "${DockerPrefix}/nginx-safe-transaction-service:latest"
          Name: nginx-safe-transaction-service
          HealthCheck:
            Command:
              - CMD-SHELL
              - test -S /nginx/gunicorn.socket
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
          MountPoints:
            - ContainerPath: "/nginx"
              SourceVolume: nginx
          DockerLabels:
            com.datadoghq.ad.check_names: '["nginx-safe-transaction-service"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "nginx-safe-transaction-service", "service": "nginx-safe-transaction-service"}]'
          Essential: false
          Memory: "1024"
          DependsOn:
            - Condition: HEALTHY
              ContainerName: safe-transaction-service
        - Image: !Sub "${DockerPrefix}/nginx-safe-config-service:latest"
          Name: nginx-safe-config-service
          HealthCheck:
            Command:
              - CMD-SHELL
              - test -S /nginx/gunicorn.socket
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          MountPoints:
            - ContainerPath: "/nginx"
              SourceVolume: nginx2
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: GUNICORN_BIND_PORT
              Value: 80
            - Name: DOCKER_NGINX_VOLUME_ROOT
              Value: /nginx
            - Name: GUNICORN_BIND_SOCKET
              Value: unix:////nginx/gunicorn.socket
            - Name: NGINX_HOST_PORT
              Value: 80
            - Name: NGINX_ENVSUBST_OUTPUT_DIR
              Value: /etc/nginx/
            - Name: GUNICORN_WEB_RELOAD
              Value: false
            - Name: CGW_URL
              Value: !Sub
                - "https://safe-client.${EndpointAddress}/"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: DEFAULT_FILE_STORAGE
              Value: django.core.files.storage.FileSystemStorage
          DependsOn:
            - Condition: HEALTHY
              ContainerName: safe-config-service
          DockerLabels:
            com.datadoghq.ad.check_names: '["nginx-safe-config-service"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "nginx-safe-config-service", "service": "nginx-safe-config-service"}]'
          Essential: false
          Memory: "1024"
        - Image: !Sub "${DockerPrefix}/safe-config-service:${ImageTag}"
          Name: safe-config-service
          HealthCheck:
            Command:
              - CMD-SHELL
              - test -S /nginx/gunicorn.socket
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          MountPoints:
            - ContainerPath: "/nginx"
              SourceVolume: nginx2
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            # in django 4 you need to include scheme
            - Name: CSRF_TRUSTED_ORIGINS
              Value: !Sub
                - "https://safe-config.${EndpointAddress},http://safe-config.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: PYTHONDONTWRITEBYTECODE
              Value: true
            - Name: DJANGO_OTP_ADMIN
              Value: true
            - Name: DEBUG
              Value: false
            - Name: ROOT_LOG_LEVEL
              Value: DEBUG
            - Name: DJANGO_ALLOWED_HOSTS
              Value: !Sub
                - "*,.localhost,127.0.0.1,[::1],safe-client-gateway,safe-client.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: GUNICORN_BIND_PORT
              Value: 8080
            - Name: DOCKER_NGINX_VOLUME_ROOT
              Value: /nginx
            - Name: GUNICORN_BIND_SOCKET
              Value: unix:////nginx/gunicorn.socket
            - Name: NGINX_HOST_PORT
              Value: 80
            - Name: NGINX_ENVSUBST_OUTPUT_DIR
              Value: /etc/nginx/
            - Name: GUNICORN_WEB_RELOAD
              Value: false
            - Name: CGW_URL
              Value: !Sub
                - "https://safe-client.${EndpointAddress}/"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: DEFAULT_FILE_STORAGE
              Value: django.core.files.storage.FileSystemStorage
          PseudoTerminal: true
          Interactive: true
          DockerLabels:
            com.datadoghq.ad.check_names: '["safe-config-service"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "safe-config-service", "service": "safe-config-service"}]'
          Essential: false
          Memory: "2000"
        - Image: !Sub "${DockerPrefix}/safe-transaction-service:${ImageTag}"
          Name: safe-transaction-service
          HealthCheck:
            Command:
              - CMD-SHELL
              - test -S /nginx/gunicorn.socket
            Interval: 30
            Retries: 3
            StartPeriod: 60
            Timeout: 5
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          MountPoints:
            - ContainerPath: "/nginx"
              SourceVolume: nginx
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
          # in django up to 4 you need to not include scheme
            - Name: CSRF_TRUSTED_ORIGINS
              Value: !Sub
                - "safe-transaction.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: DOCKER_SHARED_DIR
              Value: /nginx
            - Name: ETH_L2_NETWORK
              Value: 1
            - Name: PYTHONPATH
              Value: /app/
            - Name: DJANGO_SETTINGS_MODULE
              Value: config.settings.production
            - Name: C_FORCE_ROOT
              Value: true
            - Name: DJANGO_ALLOWED_HOSTS
              Value: !Sub
                - "*,.localhost,127.0.0.1,[::1],safe-client-gateway,safe-client.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_TRACING_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: REDIS_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/0"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
            - Name: CELERY_BROKER_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/1"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
          Command:
            - "./docker/web/run_web.sh"
          DockerLabels:
            com.datadoghq.ad.check_names: '["safe-transaction-service"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "safe-transaction-service", "service": "safe-transaction-service"}]'
          Essential: false
          Memory: "1024"
        - Image: !Sub "${DockerPrefix}/safe-transaction-service:${ImageTag}"
          Name: worker
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: ETH_L2_NETWORK
              Value: 1
            - Name: PYTHONPATH
              Value: /app/
            - Name: DJANGO_SETTINGS_MODULE
              Value: config.settings.production
            - Name: C_FORCE_ROOT
              Value: true
            - Name: DJANGO_ALLOWED_HOSTS
              Value: !Sub
                - "*,.localhost,127.0.0.1,[::1],safe-client-gateway,safe-client.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_TRACING_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: REDIS_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/0"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
            - Name: CELERY_BROKER_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/1"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
          Command:
            - "./docker/web/celery/worker/run.sh"
          DockerLabels:
            com.datadoghq.ad.check_names: '["worker"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "worker", "service": "worker"}]'
          Essential: false
          Memory: "1024"
        - Image: !Sub "${DockerPrefix}/safe-transaction-service:${ImageTag}"
          Name: scheduler
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: ETH_L2_NETWORK
              Value: 1
            - Name: PYTHONPATH
              Value: /app/
            - Name: DJANGO_SETTINGS_MODULE
              Value: config.settings.production
            - Name: C_FORCE_ROOT
              Value: true
            - Name: DJANGO_ALLOWED_HOSTS
              Value: !Sub
                - "*,.localhost,127.0.0.1,[::1],safe-client-gateway,safe-client.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: ETHEREUM_TRACING_NODE_URL
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: REDIS_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/0"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
            - Name: CELERY_BROKER_URL
              Value: !Sub
                - "redis://${EndpointAddress}:6379/1"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
          Command:
            - "./docker/web/celery/scheduler/run.sh"
          DockerLabels:
            com.datadoghq.ad.check_names: '["worker"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "worker", "service": "worker"}]'
          Essential: false
          Memory: "1024"
        - Image: !Sub "${DockerPrefix}/safe-client-gateway:${ImageTag}"
          Name: safe-client-gateway
          Ulimits:
            - Name: nofile
              SoftLimit: 65536
              HardLimit: 65536
            - Name: nproc
              SoftLimit: 65536
              HardLimit: 65536
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 3666
              HostPort: 3666
          MountPoints:
            - ContainerPath: "/nginx"
              SourceVolume: nginx
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/gnosis-safe.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: CONFIG_SERVICE_URI
              Value: !Sub
                - "https://safe-config.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: FEATURE_FLAG_NESTED_DECODING
              Value: true
            - Name: FEATURE_FLAG_BALANCES_RATE_IMPLEMENTATION
              Value: false
            - Name: SCHEME
              Value: http
            - Name: ROCKET_LOG_LEVEL
              Value: normal
            - Name: RUST_BACKTRACE
              Value: 1
            - Name: RUST_LOG
              Value: safe_client_gateway=error,safe_client_gateway::monitoring=info
            - Name: LOG_ALL_ERROR_RESPONSES
              Value: true
            - Name: VPC_TRANSACTION_SERVICE_URI
              Value: true
            - Name: CONCURRENT_BALANCE_TOKEN_REQUESTS
              Value: 5
            - Name: INTERNAL_CLIENT_CONNECT_TIMEOUT
              Value: 10000
            - Name: SAFE_APP_INFO_REQUEST_TIMEOUT
              Value: 10000
            - Name: CHAIN_INFO_REQUEST_TIMEOUT
              Value: 15000
            - Name: EXCHANGE_API_BASE_URI
              Value: http://api.exchangeratesapi.io/latest
            - Name: REDIS_URI
              Value: !Sub
                - "redis://${EndpointAddress}:6379"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:RedisClusterGnosis:DNS"
            - Name: ROCKET_PORT
              Value: 3666
            - Name: ROCKET_ADDRESS
              Value: 0.0.0.0
          DockerLabels:
            com.datadoghq.ad.check_names: '["safe-client-gateway"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "safe-client-gateway", "service": "safe-client-gateway"}]'
          Essential: false
          Memory: "4000"
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: "arn:aws:iam::942431445534:role/ecs-s3-rolw"
      Family: !Sub "Gnosis-${EnvironmentName}"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsClusterGnosis"
      LoadBalancers:
        - ContainerName: nginx-safe-config-service
          ContainerPort: 80
          TargetGroupArn: !Ref GnosisLBHTTPTargetGroup
        - ContainerName: nginx-safe-transaction-service
          ContainerPort: 8000
          TargetGroupArn: !Ref GnosisLBHTTPTargetGroup2
        - ContainerName: safe-client-gateway
          ContainerPort: 3666
          TargetGroupArn: !Ref GnosisLBHTTPTargetGroup3
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGnosis:SecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet1"
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet2"
      HealthCheckGracePeriodSeconds: 900
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: gnosis-safe
      TaskDefinition: !Ref TaskDefinition

  SafeReactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  SafeReactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SafeReactBucket
      PolicyDocument:
        Statement:
          - Sid: CloudFrontAccess
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${SafeReactBucket}/*

  CloudFrontIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - multisig.boba.network
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Origins:
          - Id: StaticAssets
            DomainName: !GetAtt SafeReactBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontIdentity}
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: StaticAssets
          AllowedMethods:
            - GET
            - OPTIONS
            - HEAD
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Ref AWS::StackName
        CorsConfig:
          AccessControlAllowCredentials: false
          AccessControlAllowHeaders:
            Items:
              - "*"
          AccessControlAllowMethods:
            Items:
              - ALL
          AccessControlAllowOrigins:
            Items:
              - https://multisig.boba.network
          OriginOverride: false
        CustomHeadersConfig:
          Items:
            - Header: X-Robots-Tag
              Override: true
              Value: noindex
        SecurityHeadersConfig:
          ContentTypeOptions:
            Override: false
          FrameOptions:
            FrameOption: DENY
            Override: false
          ReferrerPolicy:
            ReferrerPolicy: strict-origin
            Override: false
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Preload: true
            Override: false
          XSSProtection:
            ModeBlock: true
            Protection: true
            Override: false
