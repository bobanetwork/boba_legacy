AWSTemplateFormatVersion: "2010-09-09"
Description: "Gnosis-safe Application Infrastructure"

Parameters:

  EcsImageId:
    # TODO: Implement automatic update or notifications: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS-AMI-SubscribeTopic.html
    Description: Image ID for running the ECS Cluster instances
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  EcsInstanceType:
    # https://aws.amazon.com/ec2/instance-types/
    # The types of instances is limited to avoid mistakes generating huge costs by putting the wrong instance type.
    Description: Type of instances to be added to the ECS cluster
    Type: String
    Default: t3a.xlarge

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: infrastructure-core

Resources:

  LoadBalancerGnosisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "SG for ${AWS::StackName} External LB"
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3666
        ToPort: 3666
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8000
        ToPort: 8000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Gnosis-LB"

  ApplicationLoadBalancerGnosis:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.desync_mitigation_mode
          Value: strictest
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: false
        - Key: routing.http.xff_client_port.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: true
        - Key: waf.fail_open.enabled
          Value: false
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerGnosisSecurityGroup
      Subnets:
        - Fn::ImportValue:
            !Sub ${InfrastructureStackName}:PublicSubnet1
        - Fn::ImportValue:
            !Sub ${InfrastructureStackName}:PublicSubnet2

  ApplicationLoadBalancerGnosisTransaction:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.desync_mitigation_mode
          Value: strictest
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: false
        - Key: routing.http.xff_client_port.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: true
        - Key: waf.fail_open.enabled
          Value: false
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerGnosisSecurityGroup
      Subnets:
        - Fn::ImportValue:
            !Sub ${InfrastructureStackName}:PublicSubnet1
        - Fn::ImportValue:
            !Sub ${InfrastructureStackName}:PublicSubnet2

  ApplicationLoadBalancerGnosisGateway:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.desync_mitigation_mode
          Value: strictest
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: false
        - Key: routing.http.xff_client_port.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: true
        - Key: waf.fail_open.enabled
          Value: false
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerGnosisSecurityGroup
      Subnets:
        - Fn::ImportValue:
            !Sub ${InfrastructureStackName}:PublicSubnet1
        - Fn::ImportValue:
            !Sub ${InfrastructureStackName}:PublicSubnet2

  LoadBalancerGnosis:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: dualstack
      Scheme: internet-facing
      Type: network
      Subnets:
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet1
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet2

  LoadBalancerGnosisTransaction:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: dualstack
      Scheme: internet-facing
      Type: network
      Subnets:
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet1
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet2

  LoadBalancerGnosisGateway:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: dualstack
      Scheme: internet-facing
      Type: network
      Subnets:
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet1
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet2

  EcsCluster:
    Type: AWS::ECS::Cluster

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [!Sub "ec2.${AWS::URLSuffix}"]
          Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: AllowAccessToELB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                  - "ec2:Describe*"
                  - "s3:*"
                  - "elasticloadbalancing:*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticfilesystem:ClientMount"
                  - "elasticfilesystem:ClientRootAccess"
                  - "elasticfilesystem:ClientWrite"
                  - "elasticfilesystem:DescribeMountTargets"
                Resource: "*"

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref EcsInstanceRole]

  EcsSecurityGroupGnosis:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "SG for ${AWS::StackName} Landscape ECS Cluster Gnosis"
      VpcId:
        Fn::ImportValue: !Sub ${InfrastructureStackName}:VpcId
      SecurityGroupIngress:
      - Description: Allow all traffic
        IpProtocol: "-1"
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Gnosis-ECS-Cluster"

  EcsLaunchConfigurationGnosis:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            '/etc/ecs/ecs.config':
              content: !Sub |
                ECS_CLUSTER=${EcsCluster}
                ECS_ENABLE_TASK_IAM_ROLE=true
                ECS_CONTAINER_STOP_TIMEOUT=5s
              mode: "000644"
              owner: root
              group: root
    Properties:
      InstanceType: !Ref EcsInstanceType
      SecurityGroups:
      - !Ref EcsSecurityGroupGnosis
      IamInstanceProfile: !Ref EcsInstanceProfile
      ImageId: !Ref EcsImageId
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -ex
            yum -y install aws-cfn-bootstrap amazon-ssm-agent amazon-efs-utils
            systemctl enable --now amazon-ssm-agent
            echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDbEgniumTWAjZjw7vgcMCrHALO7KcjXHo3I09ulp7ufd1jpk/0PCAPwRqURLZWujjkB/OGto8W/YqCF7F5s3VJvC5lq0Sbbmagyz7obTYRVBNA656wdw2T6udHoci26kQEJoEZCHjlnCnPnNC1IkiJMwjbXivcVdUeCuFaUREWqOB5qPDEoG3xfKqHF1qlVhuuI/Q14AsgUGtMNKQyuR97k/pL2KncTTIg1Ev2pMm3/4sND5TFtX907LNEz1fu1JQqpM/fXUM/a+rlREaBj+2+nWC37+TFjd3WWvohdMEljRGH8JnTcYU5hvfdZV62pLgNjz0LPAn+tLugwacbGy6J chenboyuan@Macbook.hsd1.va.comcast.net" > /home/ec2-user/.ssh/authorized_keys
            echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
            mkdir -p /mnt/efs /mnt/efs/db
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EcsLaunchConfigurationGnosis --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroupGnosis --region ${AWS::Region} || true
  AutoScalingGroupGnosis:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref EcsLaunchConfigurationGnosis
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupTotalInstances
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PrivateSubnet1
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Gnosis-ECS"
          PropagateAtLaunch: true
Outputs:
  EcsCluster:
    Value: !Ref EcsCluster
    Export:
      Name: !Sub "${InfrastructureStackName}:EcsClusterGnosis"
  EcsSecurityGroupGnosis:
    Value: !Ref EcsSecurityGroupGnosis
    Export:
      Name: !Sub "${InfrastructureStackName}:EcsSecurityGroupGnosis"

  ApplicationLoadBalancerGnosisDNSName:
    Value: !GetAtt ApplicationLoadBalancerGnosis.DNSName
    Export:
      Name: !Sub "${InfrastructureStackName}:ApplicationLoadBalancerGnosis:DNSName"
  ApplicationLoadBalancerGnosisArn:
    Value: !Ref ApplicationLoadBalancerGnosis
    Export:
      Name: !Sub "${InfrastructureStackName}:ApplicationLoadBalancerGnosis:ARN"

  ApplicationLoadBalancerGnosisTransactionDNSName:
    Value: !GetAtt ApplicationLoadBalancerGnosisTransaction.DNSName
    Export:
      Name: !Sub "${InfrastructureStackName}:ApplicationLoadBalancerGnosisTransaction:DNSName"
  ApplicationLoadBalancerGnosisTransactionArn:
    Value: !Ref ApplicationLoadBalancerGnosisTransaction
    Export:
      Name: !Sub "${InfrastructureStackName}:ApplicationLoadBalancerGnosisTransaction:ARN"

  LoadBalancerGnosisTransactionDNSName:
    Value: !GetAtt LoadBalancerGnosisTransaction.DNSName
    Export:
      Name: !Sub "${InfrastructureStackName}:LoadBalancerGnosisTransaction:DNSName"
  LoadBalancerGnosisTransactionArn:
    Value: !Ref LoadBalancerGnosisTransaction
    Export:
      Name: !Sub "${InfrastructureStackName}:LoadBalancerGnosisTransaction:ARN"

  LoadBalancerGnosisGatewayDNSName:
    Value: !GetAtt LoadBalancerGnosisGateway.DNSName
    Export:
      Name: !Sub "${InfrastructureStackName}:LoadBalancerGnosisGateway:DNSName"
  LoadBalancerGnosisGatewayArn:
    Value: !Ref LoadBalancerGnosisGateway
    Export:
      Name: !Sub "${InfrastructureStackName}:LoadBalancerGnosisGateway:ARN"

  ApplicationLoadBalancerGnosisGatewayDNSName:
    Value: !GetAtt ApplicationLoadBalancerGnosisGateway.DNSName
    Export:
      Name: !Sub "${InfrastructureStackName}:ApplicationLoadBalancerGnosisGateway:DNSName"
  ApplicationLoadBalancerGnosisGatewayArn:
    Value: !Ref ApplicationLoadBalancerGnosisGateway
    Export:
      Name: !Sub "${InfrastructureStackName}:ApplicationLoadBalancerGnosisGateway:ARN"

  LoadBalancerGnosisDNSName:
    Value: !GetAtt LoadBalancerGnosis.DNSName
    Export:
      Name: !Sub "${InfrastructureStackName}:LoadBalancerGnosis:DNSName"
  LoadBalancerGnosisArn:
    Value: !Ref LoadBalancerGnosis
    Export:
      Name: !Sub "${InfrastructureStackName}:LoadBalancerGnosis:ARN"

  LoadBalancerGnosisSecurityGroup:
    Value: !Ref LoadBalancerGnosisSecurityGroup
    Export:
      Name: !Sub "${InfrastructureStackName}:LoadBalancerGnosis:SecurityGroup"
