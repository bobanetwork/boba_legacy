#adapted from https://raw.githubusercontent.com/ethereum-optimism/optimism/develop/.circleci/config.yml
version: 2.1

executors:
  intergration-tests-executor:
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202111-02
      docker_layer_caching: true
    environment:
      DOCKER_BUILDKIT: 1

commands:
  download-solidity-compilers:
    steps:
      - checkout
      - run:
          name: Generate cache key from all hardhat.config.ts files
          working_directory: ops
          command: ./scripts/checksum.sh /tmp/checksum.txt
      - restore_cache:
          keys:
            - solc-compilers-{{ checksum "/tmp/checksum.txt" }}-{{ .Environment.CACHE_VERSION }}
      - run:
          name: Cache compliers
          command: |
            mkdir -p /home/circleci/.cache/hardhat-nodejs/compilers-v2/linux-amd64/
            cd /home/circleci/.cache/hardhat-nodejs/compilers-v2/linux-amd64/

            find . -name list.json | grep . || curl -L https://github.com/ethereum/solc-bin/raw/gh-pages/linux-amd64/list.json -o ./list.json
            find . -name solc-linux-amd64-v0.4.11+commit.68ef5810 | grep . || curl -L https://binaries.soliditylang.org/linux-amd64/solc-linux-amd64-v0.4.11+commit.68ef5810 -o ./solc-linux-amd64-v0.4.11+commit.68ef5810
            find . -name solc-linux-amd64-v0.5.17+commit.d19bba13 | grep . || curl -L https://binaries.soliditylang.org/linux-amd64/solc-linux-amd64-v0.5.17+commit.d19bba13 -o ./solc-linux-amd64-v0.5.17+commit.d19bba13
            find . -name solc-linux-amd64-v0.6.6+commit.6c089d02 | grep . || curl -L https://binaries.soliditylang.org/linux-amd64/solc-linux-amd64-v0.6.6+commit.6c089d02 -o ./solc-linux-amd64-v0.6.6+commit.6c089d02
            find . -name solc-linux-amd64-v0.8.9+commit.e5eed63a | grep . || curl -L https://binaries.soliditylang.org/linux-amd64/solc-linux-amd64-v0.8.9+commit.e5eed63a -o ./solc-linux-amd64-v0.8.9+commit.e5eed63a
            find . -name solc-linux-amd64-v0.8.11+commit.d7f03943 | grep . || curl -L https://binaries.soliditylang.org/linux-amd64/solc-linux-amd64-v0.8.11+commit.d7f03943 -o ./solc-linux-amd64-v0.8.11+commit.d7f03943
            find . -name solc-linux-amd64-v0.8.15+commit.e14f2714 | grep . || curl -L https://binaries.soliditylang.org/linux-amd64/solc-linux-amd64-v0.8.15+commit.e14f2714 -o ./solc-linux-amd64-v0.8.15+commit.e14f2714
            find . -name solc-linux-amd64-v0.8.17+commit.8df45f5f | grep . || curl -L https://binaries.soliditylang.org/linux-amd64/solc-linux-amd64-v0.8.17+commit.8df45f5f -o ./solc-linux-amd64-v0.8.17+commit.8df45f5f
            chmod +x /home/circleci/.cache/hardhat-nodejs/compilers-v2/linux-amd64/*
          working_directory: /
      - save_cache:
          key: solc-compilers-{{ checksum "/tmp/checksum.txt" }}-{{ .Environment.CACHE_VERSION }}
          paths:
            - /home/circleci/.cache/hardhat-nodejs/compilers-v2/linux-amd64/
  run-integration-tests:
    parameters:
      docker_compose_file:
        description: Docker compose file to use
        type: string
      test_folder:
        description: Folder to run tests in
        type: string
    steps:
      - run:
          name: Build the project
          command: yarn && yarn build
          working_directory: ./

      - run:
          name: Build the core services
          command: docker-compose build
          working_directory: ops

      - run:
          name: Build the side services
          command: docker-compose -f <<parameters.docker_compose_file>> -f docker-compose-side.yml build -- $(yq '(.services | keys)[]' <<parameters.docker_compose_file>>  | tr '\n' ' ') $(yq '(.services | keys)[]' docker-compose-side.yml  | tr '\n' ' ')
          working_directory: ops

      - run:
          name: Print all images
          command: docker images
          working_directory: ops

      - run:
          name: Bring up the stack
          command: |
            docker images
            BUILD=2 DAEMON=1 DOCKER_FILE=<<parameters.docker_compose_file>> ./up_local.sh
          working_directory: ops
      - run:
          name: Bring up services
          command: |
            docker-compose -f <<parameters.docker_compose_file>> -f docker-compose-side.yml up -d bobalink aa_deployer
          working_directory: ops
      - run:
          name: Start background logging
          working_directory: ops
          background: true
          command: docker-compose -f <<parameters.docker_compose_file>> -f docker-compose-side.yml logs --follow
      - run:
          name: Wait for sequencer
          command: bash scripts/wait-for-sequencer.sh
          working_directory: ops
      - run:
          name: Split tests
          command: circleci tests glob "../integration-tests/test/<<parameters.test_folder>>/*.spec.ts" | circleci tests split --split-by=timings --time-default=10s | tee splits.txt
          working_directory: ops
      - run:
          name: Run integration tests
          command: docker-compose -f <<parameters.docker_compose_file>> run integration_tests $(cat splits.txt)
          working_directory: ops
      - run:
          name: Stop docker
          command: docker-compose -f <<parameters.docker_compose_file>> -f docker-compose-side.yml down -v
          working_directory: ops
  report-integration-tests:
    steps:
      - run:
          name: Rewrite test name for next run
          command: |
            mkdir -p result
            cat /home/circleci/result/output.xml | sed 's/\/opt\/optimism/../g' | tee result/result.xml
          working_directory: ops
      - store_test_results:
          path: /home/circleci/project/ops/result
      - store_artifacts:
          path: /home/circleci/project/ops/result

jobs:
  go-lint-test-build:
    parameters:
      binary_name:
        description: Binary name to build
        type: string
      working_directory:
        description: Working directory
        type: string
      build:
        description: Whether or not to build the binary
        type: boolean
        default: true
      dependencies:
        description: Regex matching dependent packages
        type: string
        default: this-package-does-not-exist
    docker:
      - image: ethereumoptimism/ci-builder:latest
      - image: cimg/postgres:14.1
    steps:
      - checkout
      - run:
          name: Check if we should run
          command: |
            shopt -s inherit_errexit
            CHANGED=$(check-changed "(<<parameters.working_directory>>|<<parameters.dependencies>>)" || echo "TRUE")
            echo $CHANGED
            if [[ "$CHANGED" = "FALSE" ]]; then
              circleci step halt
            fi
      - run:
          name: Lint
          command: golangci-lint run -E goimports,sqlclosecheck,bodyclose,asciicheck,misspell,errorlint -e "errors.As" -e "errors.Is" ./...
          working_directory: <<parameters.working_directory>>
      - store_test_results:
          path: /test-results
      - run:
          name: Test
          command: |
            mkdir -p /test-results
            DB_USER=postgres gotestsum --junitfile /test-results/tests.xml
          working_directory: <<parameters.working_directory>>
      - when:
          condition:
            equal: [ true, <<parameters.build>> ]
          steps:
            - run:
                name: Build
                command: make <<parameters.binary_name>>
                working_directory: <<parameters.working_directory>>

  test_flow_bundler_and_depcheck:
    docker: # run the steps with Docker
      - image: cimg/node:16.6.2
    steps: # a collection of executable commands
      - checkout
      - attach_workspace:
          at: .
      - run: # run hardhat-node as standalone process fork
          command: yarn && yarn build
          working_directory: ./
      - run: # run hardhat-node as standalone process fork
          name: hardhat-node-process
          command: yarn hardhat-node
          background: true
          working_directory: ./packages/boba/bundler
      - run: # run tests
          name: test
          command: yarn test-flows | tee /tmp/test-flows-results.log
          working_directory: ./packages/boba/bundler
      - run:
          name: depcheck
          command: yarn depcheck
          working_directory: ./packages/boba/bundler
      - store_test_results: # special step to upload test results for display in Test Summary
          path: /tmp/test-flow-results.log
  integration-tests:
    executor: intergration-tests-executor
    parallelism: 4
    steps:
      - download-solidity-compilers
      - run-integration-tests:
          docker_compose_file: "docker-compose.yml"
          test_folder: "eth-l2"
      - report-integration-tests

  integration-tests-moonbeam:
    executor: intergration-tests-executor
    parallelism: 4
    steps:
      - download-solidity-compilers
      - run-integration-tests:
          docker_compose_file: "docker-compose-moonbeam.yml"
          test_folder: "alt-l2"
      - report-integration-tests

  integration-tests-avalanche:
    executor: intergration-tests-executor
    parallelism: 4
    steps:
      - download-solidity-compilers
      - run-integration-tests:
          docker_compose_file: "docker-compose-avalanche.yml"
          test_folder: "alt-l2"
      - report-integration-tests

  integration-tests-bnb:
    executor: intergration-tests-executor
    parallelism: 4
    steps:
      - download-solidity-compilers
      - run-integration-tests:
          docker_compose_file: "docker-compose-bnb.yml"
          test_folder: "alt-l2"
      - report-integration-tests

  integration-tests-fantom:
    executor: intergration-tests-executor
    parallelism: 4
    steps:
      - download-solidity-compilers
      - run-integration-tests:
          docker_compose_file: "docker-compose-fantom.yml"
          test_folder: "alt-l2"
      - report-integration-tests

workflows:
  main:
    jobs:
      - integration-tests
      - integration-tests-moonbeam
      - integration-tests-avalanche
      - integration-tests-bnb
      - integration-tests-fantom
      - go-lint-test-build:
          name: proxyd-tests
          binary_name: proxyd
          working_directory: go/proxyd
      # - test_flow_bundler_and_depcheck

